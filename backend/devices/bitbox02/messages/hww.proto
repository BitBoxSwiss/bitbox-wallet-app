// Copyright 2019 Shift Cryptosecurity AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Device intialization and Request random number

syntax = "proto3";

message Error {
    int32 code = 1;
    string message = 2;
}

message Success {
}

message RandomNumberResponse {
    bytes number = 1;
}

message RandomNumberRequest {
}

message DeviceInfoRequest {
}

message DeviceInfoResponse {
    string name = 1;
    bool initialized = 2;
    string version = 3;
    bool mnemonic_passphrase_enabled = 4;
    uint32 monotonic_increments_remaining = 5;
}

message SetDeviceNameRequest {
    string name = 1;
}

message SetDeviceLanguageRequest {
    string language = 1;
}

message SetPasswordRequest {
    bytes entropy = 1;
}

// Timestamp must be in UTC
message CreateBackupRequest {
  uint32 timestamp = 1;
  int32 timezone_offset = 2;
}

message RestoreBackupRequest {
  string id = 1;
}

message ListBackupsRequest {
}

message CheckBackupRequest {
    bool silent = 1;
}

message CheckBackupResponse {
  string id = 1;
}

message ShowMnemonicRequest {
}

message InsertRemoveSDCardRequest {
  enum SDCardAction {
    REMOVE_CARD = 0;
    INSERT_CARD = 1;
  }
  SDCardAction action = 1;
}

message CheckSDCardRequest {
}

message CheckSDCardResponse {
  bool inserted = 1;
}

enum BTCCoin {
  BTC = 0;
  TBTC = 1;
  LTC = 2;
  TLTC = 3;
};

enum BTCScriptType {
  SCRIPT_UNKNOWN = 0;
  SCRIPT_P2PKH = 1;
  SCRIPT_P2WPKH_P2SH = 2;
  SCRIPT_P2WPKH = 3;
}

message BTCPubRequest {
  repeated uint32 keypath = 1;
  enum OutputType {
    TPUB = 0;
    XPUB = 1;
    YPUB = 2;
    ZPUB = 3;
    ADDRESS = 4;
  }
  BTCScriptType script_type = 2; // only applies for ADDRESS
  BTCCoin coin = 3;
  OutputType output_type = 4;
  bool display = 5;
}

message PubResponse {
  string pub = 1;
}

message BackupInfo {
  string id = 1;
  uint32 timestamp = 2;
  uint32 timezone_offset = 3;
  string name = 4;
}

message ListBackupsResponse {
  repeated BackupInfo info = 1;
}

message BTCSignInitRequest {
  BTCCoin coin = 1;
  BTCScriptType script_type = 2; // script type for inputs and changes
  uint32 bip44_account = 3;
  uint32 version = 4; // reserved, must be 1
  uint32 num_inputs = 5;
  uint32 num_outputs = 6;
  uint32 locktime = 7; // reserved, must be 0
}

message BTCSignNextResponse {
  enum Type {
    INPUT = 0;
    OUTPUT = 1;
    DONE = 2;
  }
  Type type = 1;
  uint32 index = 2;
  bool has_signature = 3; // only as a response to BTCSignInputRequest
  // 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
  bytes signature = 4;
}

message BTCSignInputRequest {
  bytes prevOutHash = 1;
  uint32 prevOutIndex = 2;
  uint64 prevOutValue = 3;
  uint32 sequence = 4; // reserved, must be 0xffffffff
  repeated uint32 keypath = 6; // all inputs must be ours.
}

enum BTCOutputType {
  UNKNOWN = 0;
  P2PKH = 1;
  P2SH = 2;
  P2WPKH = 3;
  P2WSH = 4;
}

message BTCSignOutputRequest {
  bool ours = 1;
  BTCOutputType type = 2; // if ours is false
  // 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
  uint64 value = 3;
  bytes hash = 4; // if ours is false
  repeated uint32 keypath = 5; // if ours is true
}

message SetMnemonicPassphraseEnabledRequest {
  bool enabled = 1;
}

// Deprecated, last used in v1.0.0
message PerformAttestationRequest {
  // 32 bytes challenge.
  bytes challenge = 1;
}

// Deprecated, last used in v1.0.0
message PerformAttestationResponse {
  bytes bootloader_hash = 1;
  bytes device_pubkey = 2;
  bytes certificate = 3;
  bytes root_pubkey_identifier = 4;
  bytes challenge_signature = 5;
}

message RebootRequest {

}

enum ETHCoin {
  ETH = 0;
  RopstenETH = 1;
  RinkebyETH = 2;
}

message ETHPubRequest {
  repeated uint32 keypath = 1;
  ETHCoin coin = 2;
  enum OutputType {
    ADDRESS = 0;
    XPUB = 1;
  }
  OutputType output_type = 3;
  bool display = 4;
  bytes contract_address = 5;
}

message ETHSignRequest {
  ETHCoin coin = 1;
  repeated uint32 keypath = 2;
  bytes nonce = 3; // smallest big endian serialization, max. 16 bytes
  bytes gas_price = 4; // smallest big endian serialization, max. 16 bytes
  bytes gas_limit = 5; // smallest big endian serialization, max. 16 bytes
  bytes recipient = 6; // 20 byte recipient
  bytes value = 7; // smallest big endian serialization, max. 32 bytes
  bytes data = 8;
}

message ETHSignResponse {
  bytes signature = 1; // 65 bytes, last byte is the recid
}

message ETHRequest {
  oneof request {
    ETHPubRequest pub = 1;
    ETHSignRequest sign = 2;
  }
}

message ETHResponse {
  oneof response {
    PubResponse pub = 1;
    ETHSignResponse sign = 2;
  }
}

message ResetRequest {}

message RestoreFromMnemonicRequest {}

message Request {
    oneof request {
        RandomNumberRequest random_number = 1;
        SetDeviceNameRequest device_name = 2;
        SetDeviceLanguageRequest device_language = 3;
        DeviceInfoRequest device_info = 4;
        SetPasswordRequest set_password = 5;
        CreateBackupRequest create_backup = 6;
        ShowMnemonicRequest show_mnemonic = 7;
        BTCPubRequest btc_pub = 8;
        BTCSignInitRequest btc_sign_init = 9;
        BTCSignInputRequest btc_sign_input = 10;
        BTCSignOutputRequest btc_sign_output = 11;
        InsertRemoveSDCardRequest insert_remove_sdcard = 12;
        CheckSDCardRequest check_sdcard = 13;
        SetMnemonicPassphraseEnabledRequest set_mnemonic_passphrase_enabled = 14;
        ListBackupsRequest list_backups = 15;
        RestoreBackupRequest restore_backup = 16;
        PerformAttestationRequest perform_attestation = 17;
        RebootRequest reboot = 18;
        CheckBackupRequest check_backup = 19;
        ETHRequest eth = 20;
        ResetRequest reset = 21;
        RestoreFromMnemonicRequest restore_from_mnemonic = 22;
    }
}

message Response {
    oneof response {
        Success success = 1;
        Error error = 2;
        RandomNumberResponse random_number = 3;
        DeviceInfoResponse device_info = 4;
        PubResponse pub = 5;
        BTCSignNextResponse btc_sign_next = 6;
        ListBackupsResponse list_backups = 7;
        CheckBackupResponse check_backup = 8;
        PerformAttestationResponse perform_attestation = 9;
        CheckSDCardResponse check_sdcard = 10;
        ETHResponse eth = 11;
    }
}
