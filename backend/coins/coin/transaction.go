// Copyright 2018 Shift Devices AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package coin

import (
	"time"
)

// Transaction models a generic transaction.
type Transaction interface {
	// Coin which is transferred by this transaction.
	Coin() Coin

	// Fee that is paid to the miner that includes this transaction.
	Fee() Amount

	// Inputs that are spent in this outgoing transaction or empty slice for incoming transactions.
	// If the coin is account-based, then there may only be exactly one input.
	Inputs() []Input

	// Outputs that are generated by this transaction.
	Outputs() []Output

	// ChangeAddress can be nil for account-based blockchains.
	ChangeAddress() AccountAddress

	// Identifier returns the identifier of this transaction.
	// Please note that the identifier can still change for proposed transactions.
	Identifier() string
}

// ProposedTransaction models a proposed but not yet fully signed transaction of the given coin.
type ProposedTransaction interface {
	// Transaction

	// IsFullySigned returns whether each input is signed by the required amount of cosigners.
	// IsFullySigned() bool

	// MakeSignedTransaction makes a signed transaction from the fully signed proposed transaction.
	// MakeSignedTransaction() (SignedTransaction, error)
}

// SignedTransaction models a signed but not yet broadcasted transaction of the given coin.
type SignedTransaction interface {
	Transaction

	// Valid returns whether this signed transaction has valid signatures.
	// Please note that this method does not verify that none of the inputs have been spent before.
	Valid() bool

	// Broadcast sends this signed transaction to the connected full node.
	Broadcast() (PendingTransaction, error)
}

// PendingTransaction models a broadcast but not yet confirmed transaction of the given coin.
type PendingTransaction interface {
	Transaction

	// BroadcastTime returns the time when this pending transaction was broadcast.
	BroadcastTime() time.Time
}

// ConfirmedTransaction models a confirmed transaction of the given coin.
type ConfirmedTransaction interface {
	Transaction

	// ConfirmationTime returns the time of the block where this transaction was included.
	ConfirmationTime() time.Time
}
