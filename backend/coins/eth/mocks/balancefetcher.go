// Code generated by moq; DO NOT EDIT.
// github.com/matryer/moq

package mocks

import (
	"context"
	"github.com/BitBoxSwiss/bitbox-wallet-app/backend/coins/eth"
	ethcommon "github.com/ethereum/go-ethereum/common"
	"math/big"
	"sync"
)

// Ensure, that BalanceFetcherMock does implement eth.BalanceFetcher.
// If this is not the case, regenerate this file with moq.
var _ eth.BalanceFetcher = &BalanceFetcherMock{}

// BalanceFetcherMock is a mock implementation of eth.BalanceFetcher.
//
//	func TestSomethingThatUsesBalanceFetcher(t *testing.T) {
//
//		// make and configure a mocked eth.BalanceFetcher
//		mockedBalanceFetcher := &BalanceFetcherMock{
//			BalancesFunc: func(ctx context.Context, addresses []ethcommon.Address) (map[ethcommon.Address]*big.Int, error) {
//				panic("mock out the Balances method")
//			},
//		}
//
//		// use mockedBalanceFetcher in code that requires eth.BalanceFetcher
//		// and then make assertions.
//
//	}
type BalanceFetcherMock struct {
	// BalancesFunc mocks the Balances method.
	BalancesFunc func(ctx context.Context, addresses []ethcommon.Address) (map[ethcommon.Address]*big.Int, error)

	// calls tracks calls to the methods.
	calls struct {
		// Balances holds details about calls to the Balances method.
		Balances []struct {
			// Ctx is the ctx argument value.
			Ctx context.Context
			// Addresses is the addresses argument value.
			Addresses []ethcommon.Address
		}
	}
	lockBalances sync.RWMutex
}

// Balances calls BalancesFunc.
func (mock *BalanceFetcherMock) Balances(ctx context.Context, addresses []ethcommon.Address) (map[ethcommon.Address]*big.Int, error) {
	if mock.BalancesFunc == nil {
		panic("BalanceFetcherMock.BalancesFunc: method is nil but BalanceFetcher.Balances was just called")
	}
	callInfo := struct {
		Ctx       context.Context
		Addresses []ethcommon.Address
	}{
		Ctx:       ctx,
		Addresses: addresses,
	}
	mock.lockBalances.Lock()
	mock.calls.Balances = append(mock.calls.Balances, callInfo)
	mock.lockBalances.Unlock()
	return mock.BalancesFunc(ctx, addresses)
}

// BalancesCalls gets all the calls that were made to Balances.
// Check the length with:
//
//	len(mockedBalanceFetcher.BalancesCalls())
func (mock *BalanceFetcherMock) BalancesCalls() []struct {
	Ctx       context.Context
	Addresses []ethcommon.Address
} {
	var calls []struct {
		Ctx       context.Context
		Addresses []ethcommon.Address
	}
	mock.lockBalances.RLock()
	calls = mock.calls.Balances
	mock.lockBalances.RUnlock()
	return calls
}
