// Copyright 2019 Shift Cryptosecurity AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: hww.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Error struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32  `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *Error) Reset() {
	*x = Error{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hww_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Error) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Error) ProtoMessage() {}

func (x *Error) ProtoReflect() protoreflect.Message {
	mi := &file_hww_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Error.ProtoReflect.Descriptor instead.
func (*Error) Descriptor() ([]byte, []int) {
	return file_hww_proto_rawDescGZIP(), []int{0}
}

func (x *Error) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *Error) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

type Success struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *Success) Reset() {
	*x = Success{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hww_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Success) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Success) ProtoMessage() {}

func (x *Success) ProtoReflect() protoreflect.Message {
	mi := &file_hww_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Success.ProtoReflect.Descriptor instead.
func (*Success) Descriptor() ([]byte, []int) {
	return file_hww_proto_rawDescGZIP(), []int{1}
}

type Request struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*Request_DeviceName
	//	*Request_DeviceLanguage
	//	*Request_DeviceInfo
	//	*Request_SetPassword
	//	*Request_CreateBackup
	//	*Request_ShowMnemonic
	//	*Request_BtcPub
	//	*Request_BtcSignInit
	//	*Request_BtcSignInput
	//	*Request_BtcSignOutput
	//	*Request_InsertRemoveSdcard
	//	*Request_CheckSdcard
	//	*Request_SetMnemonicPassphraseEnabled
	//	*Request_ListBackups
	//	*Request_RestoreBackup
	//	*Request_PerformAttestation
	//	*Request_Reboot
	//	*Request_CheckBackup
	//	*Request_Eth
	//	*Request_Reset_
	//	*Request_RestoreFromMnemonic
	//	*Request_Fingerprint
	//	*Request_Btc
	//	*Request_ElectrumEncryptionKey
	//	*Request_Cardano
	Request isRequest_Request `protobuf_oneof:"request"`
}

func (x *Request) Reset() {
	*x = Request{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hww_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Request) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Request) ProtoMessage() {}

func (x *Request) ProtoReflect() protoreflect.Message {
	mi := &file_hww_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Request.ProtoReflect.Descriptor instead.
func (*Request) Descriptor() ([]byte, []int) {
	return file_hww_proto_rawDescGZIP(), []int{2}
}

func (m *Request) GetRequest() isRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *Request) GetDeviceName() *SetDeviceNameRequest {
	if x, ok := x.GetRequest().(*Request_DeviceName); ok {
		return x.DeviceName
	}
	return nil
}

func (x *Request) GetDeviceLanguage() *SetDeviceLanguageRequest {
	if x, ok := x.GetRequest().(*Request_DeviceLanguage); ok {
		return x.DeviceLanguage
	}
	return nil
}

func (x *Request) GetDeviceInfo() *DeviceInfoRequest {
	if x, ok := x.GetRequest().(*Request_DeviceInfo); ok {
		return x.DeviceInfo
	}
	return nil
}

func (x *Request) GetSetPassword() *SetPasswordRequest {
	if x, ok := x.GetRequest().(*Request_SetPassword); ok {
		return x.SetPassword
	}
	return nil
}

func (x *Request) GetCreateBackup() *CreateBackupRequest {
	if x, ok := x.GetRequest().(*Request_CreateBackup); ok {
		return x.CreateBackup
	}
	return nil
}

func (x *Request) GetShowMnemonic() *ShowMnemonicRequest {
	if x, ok := x.GetRequest().(*Request_ShowMnemonic); ok {
		return x.ShowMnemonic
	}
	return nil
}

func (x *Request) GetBtcPub() *BTCPubRequest {
	if x, ok := x.GetRequest().(*Request_BtcPub); ok {
		return x.BtcPub
	}
	return nil
}

func (x *Request) GetBtcSignInit() *BTCSignInitRequest {
	if x, ok := x.GetRequest().(*Request_BtcSignInit); ok {
		return x.BtcSignInit
	}
	return nil
}

func (x *Request) GetBtcSignInput() *BTCSignInputRequest {
	if x, ok := x.GetRequest().(*Request_BtcSignInput); ok {
		return x.BtcSignInput
	}
	return nil
}

func (x *Request) GetBtcSignOutput() *BTCSignOutputRequest {
	if x, ok := x.GetRequest().(*Request_BtcSignOutput); ok {
		return x.BtcSignOutput
	}
	return nil
}

func (x *Request) GetInsertRemoveSdcard() *InsertRemoveSDCardRequest {
	if x, ok := x.GetRequest().(*Request_InsertRemoveSdcard); ok {
		return x.InsertRemoveSdcard
	}
	return nil
}

func (x *Request) GetCheckSdcard() *CheckSDCardRequest {
	if x, ok := x.GetRequest().(*Request_CheckSdcard); ok {
		return x.CheckSdcard
	}
	return nil
}

func (x *Request) GetSetMnemonicPassphraseEnabled() *SetMnemonicPassphraseEnabledRequest {
	if x, ok := x.GetRequest().(*Request_SetMnemonicPassphraseEnabled); ok {
		return x.SetMnemonicPassphraseEnabled
	}
	return nil
}

func (x *Request) GetListBackups() *ListBackupsRequest {
	if x, ok := x.GetRequest().(*Request_ListBackups); ok {
		return x.ListBackups
	}
	return nil
}

func (x *Request) GetRestoreBackup() *RestoreBackupRequest {
	if x, ok := x.GetRequest().(*Request_RestoreBackup); ok {
		return x.RestoreBackup
	}
	return nil
}

func (x *Request) GetPerformAttestation() *PerformAttestationRequest {
	if x, ok := x.GetRequest().(*Request_PerformAttestation); ok {
		return x.PerformAttestation
	}
	return nil
}

func (x *Request) GetReboot() *RebootRequest {
	if x, ok := x.GetRequest().(*Request_Reboot); ok {
		return x.Reboot
	}
	return nil
}

func (x *Request) GetCheckBackup() *CheckBackupRequest {
	if x, ok := x.GetRequest().(*Request_CheckBackup); ok {
		return x.CheckBackup
	}
	return nil
}

func (x *Request) GetEth() *ETHRequest {
	if x, ok := x.GetRequest().(*Request_Eth); ok {
		return x.Eth
	}
	return nil
}

func (x *Request) GetReset_() *ResetRequest {
	if x, ok := x.GetRequest().(*Request_Reset_); ok {
		return x.Reset_
	}
	return nil
}

func (x *Request) GetRestoreFromMnemonic() *RestoreFromMnemonicRequest {
	if x, ok := x.GetRequest().(*Request_RestoreFromMnemonic); ok {
		return x.RestoreFromMnemonic
	}
	return nil
}

func (x *Request) GetFingerprint() *RootFingerprintRequest {
	if x, ok := x.GetRequest().(*Request_Fingerprint); ok {
		return x.Fingerprint
	}
	return nil
}

func (x *Request) GetBtc() *BTCRequest {
	if x, ok := x.GetRequest().(*Request_Btc); ok {
		return x.Btc
	}
	return nil
}

func (x *Request) GetElectrumEncryptionKey() *ElectrumEncryptionKeyRequest {
	if x, ok := x.GetRequest().(*Request_ElectrumEncryptionKey); ok {
		return x.ElectrumEncryptionKey
	}
	return nil
}

func (x *Request) GetCardano() *CardanoRequest {
	if x, ok := x.GetRequest().(*Request_Cardano); ok {
		return x.Cardano
	}
	return nil
}

type isRequest_Request interface {
	isRequest_Request()
}

type Request_DeviceName struct {
	// removed: RandomNumberRequest random_number = 1;
	DeviceName *SetDeviceNameRequest `protobuf:"bytes,2,opt,name=device_name,json=deviceName,proto3,oneof"`
}

type Request_DeviceLanguage struct {
	DeviceLanguage *SetDeviceLanguageRequest `protobuf:"bytes,3,opt,name=device_language,json=deviceLanguage,proto3,oneof"`
}

type Request_DeviceInfo struct {
	DeviceInfo *DeviceInfoRequest `protobuf:"bytes,4,opt,name=device_info,json=deviceInfo,proto3,oneof"`
}

type Request_SetPassword struct {
	SetPassword *SetPasswordRequest `protobuf:"bytes,5,opt,name=set_password,json=setPassword,proto3,oneof"`
}

type Request_CreateBackup struct {
	CreateBackup *CreateBackupRequest `protobuf:"bytes,6,opt,name=create_backup,json=createBackup,proto3,oneof"`
}

type Request_ShowMnemonic struct {
	ShowMnemonic *ShowMnemonicRequest `protobuf:"bytes,7,opt,name=show_mnemonic,json=showMnemonic,proto3,oneof"`
}

type Request_BtcPub struct {
	BtcPub *BTCPubRequest `protobuf:"bytes,8,opt,name=btc_pub,json=btcPub,proto3,oneof"`
}

type Request_BtcSignInit struct {
	BtcSignInit *BTCSignInitRequest `protobuf:"bytes,9,opt,name=btc_sign_init,json=btcSignInit,proto3,oneof"`
}

type Request_BtcSignInput struct {
	BtcSignInput *BTCSignInputRequest `protobuf:"bytes,10,opt,name=btc_sign_input,json=btcSignInput,proto3,oneof"`
}

type Request_BtcSignOutput struct {
	BtcSignOutput *BTCSignOutputRequest `protobuf:"bytes,11,opt,name=btc_sign_output,json=btcSignOutput,proto3,oneof"`
}

type Request_InsertRemoveSdcard struct {
	InsertRemoveSdcard *InsertRemoveSDCardRequest `protobuf:"bytes,12,opt,name=insert_remove_sdcard,json=insertRemoveSdcard,proto3,oneof"`
}

type Request_CheckSdcard struct {
	CheckSdcard *CheckSDCardRequest `protobuf:"bytes,13,opt,name=check_sdcard,json=checkSdcard,proto3,oneof"`
}

type Request_SetMnemonicPassphraseEnabled struct {
	SetMnemonicPassphraseEnabled *SetMnemonicPassphraseEnabledRequest `protobuf:"bytes,14,opt,name=set_mnemonic_passphrase_enabled,json=setMnemonicPassphraseEnabled,proto3,oneof"`
}

type Request_ListBackups struct {
	ListBackups *ListBackupsRequest `protobuf:"bytes,15,opt,name=list_backups,json=listBackups,proto3,oneof"`
}

type Request_RestoreBackup struct {
	RestoreBackup *RestoreBackupRequest `protobuf:"bytes,16,opt,name=restore_backup,json=restoreBackup,proto3,oneof"`
}

type Request_PerformAttestation struct {
	PerformAttestation *PerformAttestationRequest `protobuf:"bytes,17,opt,name=perform_attestation,json=performAttestation,proto3,oneof"`
}

type Request_Reboot struct {
	Reboot *RebootRequest `protobuf:"bytes,18,opt,name=reboot,proto3,oneof"`
}

type Request_CheckBackup struct {
	CheckBackup *CheckBackupRequest `protobuf:"bytes,19,opt,name=check_backup,json=checkBackup,proto3,oneof"`
}

type Request_Eth struct {
	Eth *ETHRequest `protobuf:"bytes,20,opt,name=eth,proto3,oneof"`
}

type Request_Reset_ struct {
	Reset_ *ResetRequest `protobuf:"bytes,21,opt,name=reset,proto3,oneof"`
}

type Request_RestoreFromMnemonic struct {
	RestoreFromMnemonic *RestoreFromMnemonicRequest `protobuf:"bytes,22,opt,name=restore_from_mnemonic,json=restoreFromMnemonic,proto3,oneof"`
}

type Request_Fingerprint struct {
	// removed: BitBoxBaseRequest bitboxbase = 23;
	Fingerprint *RootFingerprintRequest `protobuf:"bytes,24,opt,name=fingerprint,proto3,oneof"`
}

type Request_Btc struct {
	Btc *BTCRequest `protobuf:"bytes,25,opt,name=btc,proto3,oneof"`
}

type Request_ElectrumEncryptionKey struct {
	ElectrumEncryptionKey *ElectrumEncryptionKeyRequest `protobuf:"bytes,26,opt,name=electrum_encryption_key,json=electrumEncryptionKey,proto3,oneof"`
}

type Request_Cardano struct {
	Cardano *CardanoRequest `protobuf:"bytes,27,opt,name=cardano,proto3,oneof"`
}

func (*Request_DeviceName) isRequest_Request() {}

func (*Request_DeviceLanguage) isRequest_Request() {}

func (*Request_DeviceInfo) isRequest_Request() {}

func (*Request_SetPassword) isRequest_Request() {}

func (*Request_CreateBackup) isRequest_Request() {}

func (*Request_ShowMnemonic) isRequest_Request() {}

func (*Request_BtcPub) isRequest_Request() {}

func (*Request_BtcSignInit) isRequest_Request() {}

func (*Request_BtcSignInput) isRequest_Request() {}

func (*Request_BtcSignOutput) isRequest_Request() {}

func (*Request_InsertRemoveSdcard) isRequest_Request() {}

func (*Request_CheckSdcard) isRequest_Request() {}

func (*Request_SetMnemonicPassphraseEnabled) isRequest_Request() {}

func (*Request_ListBackups) isRequest_Request() {}

func (*Request_RestoreBackup) isRequest_Request() {}

func (*Request_PerformAttestation) isRequest_Request() {}

func (*Request_Reboot) isRequest_Request() {}

func (*Request_CheckBackup) isRequest_Request() {}

func (*Request_Eth) isRequest_Request() {}

func (*Request_Reset_) isRequest_Request() {}

func (*Request_RestoreFromMnemonic) isRequest_Request() {}

func (*Request_Fingerprint) isRequest_Request() {}

func (*Request_Btc) isRequest_Request() {}

func (*Request_ElectrumEncryptionKey) isRequest_Request() {}

func (*Request_Cardano) isRequest_Request() {}

type Response struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*Response_Success
	//	*Response_Error
	//	*Response_DeviceInfo
	//	*Response_Pub
	//	*Response_BtcSignNext
	//	*Response_ListBackups
	//	*Response_CheckBackup
	//	*Response_PerformAttestation
	//	*Response_CheckSdcard
	//	*Response_Eth
	//	*Response_Fingerprint
	//	*Response_Btc
	//	*Response_ElectrumEncryptionKey
	//	*Response_Cardano
	Response isResponse_Response `protobuf_oneof:"response"`
}

func (x *Response) Reset() {
	*x = Response{}
	if protoimpl.UnsafeEnabled {
		mi := &file_hww_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Response) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Response) ProtoMessage() {}

func (x *Response) ProtoReflect() protoreflect.Message {
	mi := &file_hww_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Response.ProtoReflect.Descriptor instead.
func (*Response) Descriptor() ([]byte, []int) {
	return file_hww_proto_rawDescGZIP(), []int{3}
}

func (m *Response) GetResponse() isResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *Response) GetSuccess() *Success {
	if x, ok := x.GetResponse().(*Response_Success); ok {
		return x.Success
	}
	return nil
}

func (x *Response) GetError() *Error {
	if x, ok := x.GetResponse().(*Response_Error); ok {
		return x.Error
	}
	return nil
}

func (x *Response) GetDeviceInfo() *DeviceInfoResponse {
	if x, ok := x.GetResponse().(*Response_DeviceInfo); ok {
		return x.DeviceInfo
	}
	return nil
}

func (x *Response) GetPub() *PubResponse {
	if x, ok := x.GetResponse().(*Response_Pub); ok {
		return x.Pub
	}
	return nil
}

func (x *Response) GetBtcSignNext() *BTCSignNextResponse {
	if x, ok := x.GetResponse().(*Response_BtcSignNext); ok {
		return x.BtcSignNext
	}
	return nil
}

func (x *Response) GetListBackups() *ListBackupsResponse {
	if x, ok := x.GetResponse().(*Response_ListBackups); ok {
		return x.ListBackups
	}
	return nil
}

func (x *Response) GetCheckBackup() *CheckBackupResponse {
	if x, ok := x.GetResponse().(*Response_CheckBackup); ok {
		return x.CheckBackup
	}
	return nil
}

func (x *Response) GetPerformAttestation() *PerformAttestationResponse {
	if x, ok := x.GetResponse().(*Response_PerformAttestation); ok {
		return x.PerformAttestation
	}
	return nil
}

func (x *Response) GetCheckSdcard() *CheckSDCardResponse {
	if x, ok := x.GetResponse().(*Response_CheckSdcard); ok {
		return x.CheckSdcard
	}
	return nil
}

func (x *Response) GetEth() *ETHResponse {
	if x, ok := x.GetResponse().(*Response_Eth); ok {
		return x.Eth
	}
	return nil
}

func (x *Response) GetFingerprint() *RootFingerprintResponse {
	if x, ok := x.GetResponse().(*Response_Fingerprint); ok {
		return x.Fingerprint
	}
	return nil
}

func (x *Response) GetBtc() *BTCResponse {
	if x, ok := x.GetResponse().(*Response_Btc); ok {
		return x.Btc
	}
	return nil
}

func (x *Response) GetElectrumEncryptionKey() *ElectrumEncryptionKeyResponse {
	if x, ok := x.GetResponse().(*Response_ElectrumEncryptionKey); ok {
		return x.ElectrumEncryptionKey
	}
	return nil
}

func (x *Response) GetCardano() *CardanoResponse {
	if x, ok := x.GetResponse().(*Response_Cardano); ok {
		return x.Cardano
	}
	return nil
}

type isResponse_Response interface {
	isResponse_Response()
}

type Response_Success struct {
	Success *Success `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type Response_Error struct {
	Error *Error `protobuf:"bytes,2,opt,name=error,proto3,oneof"`
}

type Response_DeviceInfo struct {
	// removed: RandomNumberResponse random_number = 3;
	DeviceInfo *DeviceInfoResponse `protobuf:"bytes,4,opt,name=device_info,json=deviceInfo,proto3,oneof"`
}

type Response_Pub struct {
	Pub *PubResponse `protobuf:"bytes,5,opt,name=pub,proto3,oneof"`
}

type Response_BtcSignNext struct {
	BtcSignNext *BTCSignNextResponse `protobuf:"bytes,6,opt,name=btc_sign_next,json=btcSignNext,proto3,oneof"`
}

type Response_ListBackups struct {
	ListBackups *ListBackupsResponse `protobuf:"bytes,7,opt,name=list_backups,json=listBackups,proto3,oneof"`
}

type Response_CheckBackup struct {
	CheckBackup *CheckBackupResponse `protobuf:"bytes,8,opt,name=check_backup,json=checkBackup,proto3,oneof"`
}

type Response_PerformAttestation struct {
	PerformAttestation *PerformAttestationResponse `protobuf:"bytes,9,opt,name=perform_attestation,json=performAttestation,proto3,oneof"`
}

type Response_CheckSdcard struct {
	CheckSdcard *CheckSDCardResponse `protobuf:"bytes,10,opt,name=check_sdcard,json=checkSdcard,proto3,oneof"`
}

type Response_Eth struct {
	Eth *ETHResponse `protobuf:"bytes,11,opt,name=eth,proto3,oneof"`
}

type Response_Fingerprint struct {
	Fingerprint *RootFingerprintResponse `protobuf:"bytes,12,opt,name=fingerprint,proto3,oneof"`
}

type Response_Btc struct {
	Btc *BTCResponse `protobuf:"bytes,13,opt,name=btc,proto3,oneof"`
}

type Response_ElectrumEncryptionKey struct {
	ElectrumEncryptionKey *ElectrumEncryptionKeyResponse `protobuf:"bytes,14,opt,name=electrum_encryption_key,json=electrumEncryptionKey,proto3,oneof"`
}

type Response_Cardano struct {
	Cardano *CardanoResponse `protobuf:"bytes,15,opt,name=cardano,proto3,oneof"`
}

func (*Response_Success) isResponse_Response() {}

func (*Response_Error) isResponse_Response() {}

func (*Response_DeviceInfo) isResponse_Response() {}

func (*Response_Pub) isResponse_Response() {}

func (*Response_BtcSignNext) isResponse_Response() {}

func (*Response_ListBackups) isResponse_Response() {}

func (*Response_CheckBackup) isResponse_Response() {}

func (*Response_PerformAttestation) isResponse_Response() {}

func (*Response_CheckSdcard) isResponse_Response() {}

func (*Response_Eth) isResponse_Response() {}

func (*Response_Fingerprint) isResponse_Response() {}

func (*Response_Btc) isResponse_Response() {}

func (*Response_ElectrumEncryptionKey) isResponse_Response() {}

func (*Response_Cardano) isResponse_Response() {}

var File_hww_proto protoreflect.FileDescriptor

var file_hww_proto_rawDesc = []byte{
	0x0a, 0x09, 0x68, 0x77, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x15, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x15, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32,
	0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x62,
	0x74, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x65, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x6b, 0x65, 0x79, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0e, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x0c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x19, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x35, 0x0a, 0x05, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x22, 0x09, 0x0a, 0x07, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0xa3, 0x10,
	0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x4d, 0x0a, 0x0b, 0x64, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74,
	0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x59, 0x0a, 0x0f, 0x64, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x5f, 0x6c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2e, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x53, 0x65, 0x74, 0x44, 0x65, 0x76, 0x69,
	0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0e, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4c, 0x61, 0x6e, 0x67, 0x75,
	0x61, 0x67, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e,
	0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x4d, 0x0a, 0x0c, 0x73, 0x65, 0x74, 0x5f, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x53, 0x65, 0x74,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x50,
	0x0a, 0x0d, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0c, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x12, 0x50, 0x0a, 0x0d, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69,
	0x63, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x53,
	0x68, 0x6f, 0x77, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x68, 0x6f, 0x77, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e,
	0x69, 0x63, 0x12, 0x3e, 0x0a, 0x07, 0x62, 0x74, 0x63, 0x5f, 0x70, 0x75, 0x62, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x50, 0x75,
	0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x06, 0x62, 0x74, 0x63, 0x50,
	0x75, 0x62, 0x12, 0x4e, 0x0a, 0x0d, 0x62, 0x74, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x6e, 0x69, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32,
	0x2e, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x74, 0x63, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e,
	0x69, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x62, 0x74, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x69,
	0x6e, 0x70, 0x75, 0x74, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x62, 0x74, 0x63, 0x53, 0x69, 0x67, 0x6e,
	0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x54, 0x0a, 0x0f, 0x62, 0x74, 0x63, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a,
	0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74,
	0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x62, 0x74,
	0x63, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x63, 0x0a, 0x14, 0x69,
	0x6e, 0x73, 0x65, 0x72, 0x74, 0x5f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x73, 0x64, 0x63,
	0x61, 0x72, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32,
	0x2e, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x44, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x69, 0x6e,
	0x73, 0x65, 0x72, 0x74, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x53, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x12, 0x4d, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x73, 0x64, 0x63, 0x61, 0x72, 0x64,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x53, 0x44, 0x43, 0x61, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12,
	0x82, 0x01, 0x0a, 0x1f, 0x73, 0x65, 0x74, 0x5f, 0x6d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63,
	0x5f, 0x70, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x5f, 0x65, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32,
	0x2e, 0x53, 0x65, 0x74, 0x4d, 0x6e, 0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x50, 0x61, 0x73, 0x73,
	0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x1c, 0x73, 0x65, 0x74, 0x4d, 0x6e, 0x65, 0x6d, 0x6f,
	0x6e, 0x69, 0x63, 0x50, 0x61, 0x73, 0x73, 0x70, 0x68, 0x72, 0x61, 0x73, 0x65, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x64, 0x12, 0x4d, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x61, 0x63,
	0x6b, 0x75, 0x70, 0x73, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b,
	0x75, 0x70, 0x73, 0x12, 0x53, 0x0a, 0x0e, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0d, 0x72, 0x65, 0x73, 0x74, 0x6f,
	0x72, 0x65, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x62, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66,
	0x6f, 0x72, 0x6d, 0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x50, 0x65, 0x72,
	0x66, 0x6f, 0x72, 0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x06,
	0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f,
	0x78, 0x30, 0x32, 0x2e, 0x52, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x06, 0x72, 0x65, 0x62, 0x6f, 0x6f, 0x74, 0x12, 0x4d, 0x0a, 0x0c, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x34, 0x0a, 0x03, 0x65, 0x74,
	0x68, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45,
	0x54, 0x48, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x65, 0x74, 0x68,
	0x12, 0x3a, 0x0a, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69,
	0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x72, 0x65, 0x73, 0x65, 0x74, 0x12, 0x66, 0x0a, 0x15,
	0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x6d, 0x6e, 0x65,
	0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x52, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x6e,
	0x65, 0x6d, 0x6f, 0x6e, 0x69, 0x63, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52,
	0x13, 0x72, 0x65, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x46, 0x72, 0x6f, 0x6d, 0x4d, 0x6e, 0x65, 0x6d,
	0x6f, 0x6e, 0x69, 0x63, 0x12, 0x50, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72,
	0x69, 0x6e, 0x74, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32,
	0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65,
	0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x03, 0x62, 0x74, 0x63, 0x18, 0x19, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x62, 0x74, 0x63, 0x12, 0x6c, 0x0a, 0x17,
	0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x32, 0x2e,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62,
	0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x15, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x40, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4a, 0x04, 0x08, 0x01, 0x10, 0x02, 0x4a, 0x04, 0x08,
	0x17, 0x10, 0x18, 0x22, 0xa9, 0x08, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x39, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x48, 0x00, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x48, 0x00, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x12, 0x4b, 0x0a, 0x0b, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x44, 0x65, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0a, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x35, 0x0a,
	0x03, 0x70, 0x75, 0x62, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x2e, 0x50, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52,
	0x03, 0x70, 0x75, 0x62, 0x12, 0x4f, 0x0a, 0x0d, 0x62, 0x74, 0x63, 0x5f, 0x73, 0x69, 0x67, 0x6e,
	0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x62, 0x74, 0x63, 0x53, 0x69, 0x67,
	0x6e, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x4e, 0x0a, 0x0c, 0x6c, 0x69, 0x73, 0x74, 0x5f, 0x62, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x6c, 0x69, 0x73, 0x74, 0x42, 0x61,
	0x63, 0x6b, 0x75, 0x70, 0x73, 0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x5f, 0x62,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x42,
	0x61, 0x63, 0x6b, 0x75, 0x70, 0x12, 0x63, 0x0a, 0x13, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d,
	0x5f, 0x61, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x50, 0x65, 0x72, 0x66, 0x6f, 0x72,
	0x6d, 0x41, 0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x12, 0x70, 0x65, 0x72, 0x66, 0x6f, 0x72, 0x6d, 0x41,
	0x74, 0x74, 0x65, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x0c, 0x63, 0x68,
	0x65, 0x63, 0x6b, 0x5f, 0x73, 0x64, 0x63, 0x61, 0x72, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x29, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62,
	0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x44, 0x43,
	0x61, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x63,
	0x68, 0x65, 0x63, 0x6b, 0x53, 0x64, 0x63, 0x61, 0x72, 0x64, 0x12, 0x35, 0x0a, 0x03, 0x65, 0x74,
	0x68, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45,
	0x54, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x65, 0x74,
	0x68, 0x12, 0x51, 0x0a, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x52, 0x6f,
	0x6f, 0x74, 0x46, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70, 0x72, 0x69, 0x6e, 0x74, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0b, 0x66, 0x69, 0x6e, 0x67, 0x65, 0x72, 0x70,
	0x72, 0x69, 0x6e, 0x74, 0x12, 0x35, 0x0a, 0x03, 0x62, 0x74, 0x63, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03, 0x62, 0x74, 0x63, 0x12, 0x6d, 0x0a, 0x17, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x5f, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f,
	0x78, 0x30, 0x32, 0x2e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x45, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x48, 0x00, 0x52, 0x15, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x72, 0x75, 0x6d, 0x45, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x12, 0x41, 0x0a, 0x07, 0x63, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x48, 0x00, 0x52, 0x07, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x42, 0x0a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x4a, 0x04, 0x08, 0x03, 0x10, 0x04, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_hww_proto_rawDescOnce sync.Once
	file_hww_proto_rawDescData = file_hww_proto_rawDesc
)

func file_hww_proto_rawDescGZIP() []byte {
	file_hww_proto_rawDescOnce.Do(func() {
		file_hww_proto_rawDescData = protoimpl.X.CompressGZIP(file_hww_proto_rawDescData)
	})
	return file_hww_proto_rawDescData
}

var file_hww_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_hww_proto_goTypes = []interface{}{
	(*Error)(nil),                               // 0: shiftcrypto.bitbox02.Error
	(*Success)(nil),                             // 1: shiftcrypto.bitbox02.Success
	(*Request)(nil),                             // 2: shiftcrypto.bitbox02.Request
	(*Response)(nil),                            // 3: shiftcrypto.bitbox02.Response
	(*SetDeviceNameRequest)(nil),                // 4: shiftcrypto.bitbox02.SetDeviceNameRequest
	(*SetDeviceLanguageRequest)(nil),            // 5: shiftcrypto.bitbox02.SetDeviceLanguageRequest
	(*DeviceInfoRequest)(nil),                   // 6: shiftcrypto.bitbox02.DeviceInfoRequest
	(*SetPasswordRequest)(nil),                  // 7: shiftcrypto.bitbox02.SetPasswordRequest
	(*CreateBackupRequest)(nil),                 // 8: shiftcrypto.bitbox02.CreateBackupRequest
	(*ShowMnemonicRequest)(nil),                 // 9: shiftcrypto.bitbox02.ShowMnemonicRequest
	(*BTCPubRequest)(nil),                       // 10: shiftcrypto.bitbox02.BTCPubRequest
	(*BTCSignInitRequest)(nil),                  // 11: shiftcrypto.bitbox02.BTCSignInitRequest
	(*BTCSignInputRequest)(nil),                 // 12: shiftcrypto.bitbox02.BTCSignInputRequest
	(*BTCSignOutputRequest)(nil),                // 13: shiftcrypto.bitbox02.BTCSignOutputRequest
	(*InsertRemoveSDCardRequest)(nil),           // 14: shiftcrypto.bitbox02.InsertRemoveSDCardRequest
	(*CheckSDCardRequest)(nil),                  // 15: shiftcrypto.bitbox02.CheckSDCardRequest
	(*SetMnemonicPassphraseEnabledRequest)(nil), // 16: shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest
	(*ListBackupsRequest)(nil),                  // 17: shiftcrypto.bitbox02.ListBackupsRequest
	(*RestoreBackupRequest)(nil),                // 18: shiftcrypto.bitbox02.RestoreBackupRequest
	(*PerformAttestationRequest)(nil),           // 19: shiftcrypto.bitbox02.PerformAttestationRequest
	(*RebootRequest)(nil),                       // 20: shiftcrypto.bitbox02.RebootRequest
	(*CheckBackupRequest)(nil),                  // 21: shiftcrypto.bitbox02.CheckBackupRequest
	(*ETHRequest)(nil),                          // 22: shiftcrypto.bitbox02.ETHRequest
	(*ResetRequest)(nil),                        // 23: shiftcrypto.bitbox02.ResetRequest
	(*RestoreFromMnemonicRequest)(nil),          // 24: shiftcrypto.bitbox02.RestoreFromMnemonicRequest
	(*RootFingerprintRequest)(nil),              // 25: shiftcrypto.bitbox02.RootFingerprintRequest
	(*BTCRequest)(nil),                          // 26: shiftcrypto.bitbox02.BTCRequest
	(*ElectrumEncryptionKeyRequest)(nil),        // 27: shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest
	(*CardanoRequest)(nil),                      // 28: shiftcrypto.bitbox02.CardanoRequest
	(*DeviceInfoResponse)(nil),                  // 29: shiftcrypto.bitbox02.DeviceInfoResponse
	(*PubResponse)(nil),                         // 30: shiftcrypto.bitbox02.PubResponse
	(*BTCSignNextResponse)(nil),                 // 31: shiftcrypto.bitbox02.BTCSignNextResponse
	(*ListBackupsResponse)(nil),                 // 32: shiftcrypto.bitbox02.ListBackupsResponse
	(*CheckBackupResponse)(nil),                 // 33: shiftcrypto.bitbox02.CheckBackupResponse
	(*PerformAttestationResponse)(nil),          // 34: shiftcrypto.bitbox02.PerformAttestationResponse
	(*CheckSDCardResponse)(nil),                 // 35: shiftcrypto.bitbox02.CheckSDCardResponse
	(*ETHResponse)(nil),                         // 36: shiftcrypto.bitbox02.ETHResponse
	(*RootFingerprintResponse)(nil),             // 37: shiftcrypto.bitbox02.RootFingerprintResponse
	(*BTCResponse)(nil),                         // 38: shiftcrypto.bitbox02.BTCResponse
	(*ElectrumEncryptionKeyResponse)(nil),       // 39: shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse
	(*CardanoResponse)(nil),                     // 40: shiftcrypto.bitbox02.CardanoResponse
}
var file_hww_proto_depIdxs = []int32{
	4,  // 0: shiftcrypto.bitbox02.Request.device_name:type_name -> shiftcrypto.bitbox02.SetDeviceNameRequest
	5,  // 1: shiftcrypto.bitbox02.Request.device_language:type_name -> shiftcrypto.bitbox02.SetDeviceLanguageRequest
	6,  // 2: shiftcrypto.bitbox02.Request.device_info:type_name -> shiftcrypto.bitbox02.DeviceInfoRequest
	7,  // 3: shiftcrypto.bitbox02.Request.set_password:type_name -> shiftcrypto.bitbox02.SetPasswordRequest
	8,  // 4: shiftcrypto.bitbox02.Request.create_backup:type_name -> shiftcrypto.bitbox02.CreateBackupRequest
	9,  // 5: shiftcrypto.bitbox02.Request.show_mnemonic:type_name -> shiftcrypto.bitbox02.ShowMnemonicRequest
	10, // 6: shiftcrypto.bitbox02.Request.btc_pub:type_name -> shiftcrypto.bitbox02.BTCPubRequest
	11, // 7: shiftcrypto.bitbox02.Request.btc_sign_init:type_name -> shiftcrypto.bitbox02.BTCSignInitRequest
	12, // 8: shiftcrypto.bitbox02.Request.btc_sign_input:type_name -> shiftcrypto.bitbox02.BTCSignInputRequest
	13, // 9: shiftcrypto.bitbox02.Request.btc_sign_output:type_name -> shiftcrypto.bitbox02.BTCSignOutputRequest
	14, // 10: shiftcrypto.bitbox02.Request.insert_remove_sdcard:type_name -> shiftcrypto.bitbox02.InsertRemoveSDCardRequest
	15, // 11: shiftcrypto.bitbox02.Request.check_sdcard:type_name -> shiftcrypto.bitbox02.CheckSDCardRequest
	16, // 12: shiftcrypto.bitbox02.Request.set_mnemonic_passphrase_enabled:type_name -> shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest
	17, // 13: shiftcrypto.bitbox02.Request.list_backups:type_name -> shiftcrypto.bitbox02.ListBackupsRequest
	18, // 14: shiftcrypto.bitbox02.Request.restore_backup:type_name -> shiftcrypto.bitbox02.RestoreBackupRequest
	19, // 15: shiftcrypto.bitbox02.Request.perform_attestation:type_name -> shiftcrypto.bitbox02.PerformAttestationRequest
	20, // 16: shiftcrypto.bitbox02.Request.reboot:type_name -> shiftcrypto.bitbox02.RebootRequest
	21, // 17: shiftcrypto.bitbox02.Request.check_backup:type_name -> shiftcrypto.bitbox02.CheckBackupRequest
	22, // 18: shiftcrypto.bitbox02.Request.eth:type_name -> shiftcrypto.bitbox02.ETHRequest
	23, // 19: shiftcrypto.bitbox02.Request.reset:type_name -> shiftcrypto.bitbox02.ResetRequest
	24, // 20: shiftcrypto.bitbox02.Request.restore_from_mnemonic:type_name -> shiftcrypto.bitbox02.RestoreFromMnemonicRequest
	25, // 21: shiftcrypto.bitbox02.Request.fingerprint:type_name -> shiftcrypto.bitbox02.RootFingerprintRequest
	26, // 22: shiftcrypto.bitbox02.Request.btc:type_name -> shiftcrypto.bitbox02.BTCRequest
	27, // 23: shiftcrypto.bitbox02.Request.electrum_encryption_key:type_name -> shiftcrypto.bitbox02.ElectrumEncryptionKeyRequest
	28, // 24: shiftcrypto.bitbox02.Request.cardano:type_name -> shiftcrypto.bitbox02.CardanoRequest
	1,  // 25: shiftcrypto.bitbox02.Response.success:type_name -> shiftcrypto.bitbox02.Success
	0,  // 26: shiftcrypto.bitbox02.Response.error:type_name -> shiftcrypto.bitbox02.Error
	29, // 27: shiftcrypto.bitbox02.Response.device_info:type_name -> shiftcrypto.bitbox02.DeviceInfoResponse
	30, // 28: shiftcrypto.bitbox02.Response.pub:type_name -> shiftcrypto.bitbox02.PubResponse
	31, // 29: shiftcrypto.bitbox02.Response.btc_sign_next:type_name -> shiftcrypto.bitbox02.BTCSignNextResponse
	32, // 30: shiftcrypto.bitbox02.Response.list_backups:type_name -> shiftcrypto.bitbox02.ListBackupsResponse
	33, // 31: shiftcrypto.bitbox02.Response.check_backup:type_name -> shiftcrypto.bitbox02.CheckBackupResponse
	34, // 32: shiftcrypto.bitbox02.Response.perform_attestation:type_name -> shiftcrypto.bitbox02.PerformAttestationResponse
	35, // 33: shiftcrypto.bitbox02.Response.check_sdcard:type_name -> shiftcrypto.bitbox02.CheckSDCardResponse
	36, // 34: shiftcrypto.bitbox02.Response.eth:type_name -> shiftcrypto.bitbox02.ETHResponse
	37, // 35: shiftcrypto.bitbox02.Response.fingerprint:type_name -> shiftcrypto.bitbox02.RootFingerprintResponse
	38, // 36: shiftcrypto.bitbox02.Response.btc:type_name -> shiftcrypto.bitbox02.BTCResponse
	39, // 37: shiftcrypto.bitbox02.Response.electrum_encryption_key:type_name -> shiftcrypto.bitbox02.ElectrumEncryptionKeyResponse
	40, // 38: shiftcrypto.bitbox02.Response.cardano:type_name -> shiftcrypto.bitbox02.CardanoResponse
	39, // [39:39] is the sub-list for method output_type
	39, // [39:39] is the sub-list for method input_type
	39, // [39:39] is the sub-list for extension type_name
	39, // [39:39] is the sub-list for extension extendee
	0,  // [0:39] is the sub-list for field type_name
}

func init() { file_hww_proto_init() }
func file_hww_proto_init() {
	if File_hww_proto != nil {
		return
	}
	file_common_proto_init()
	file_backup_commands_proto_init()
	file_bitbox02_system_proto_init()
	file_btc_proto_init()
	file_cardano_proto_init()
	file_eth_proto_init()
	file_keystore_proto_init()
	file_mnemonic_proto_init()
	file_system_proto_init()
	file_perform_attestation_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_hww_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Error); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hww_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Success); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hww_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Request); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_hww_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Response); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_hww_proto_msgTypes[2].OneofWrappers = []interface{}{
		(*Request_DeviceName)(nil),
		(*Request_DeviceLanguage)(nil),
		(*Request_DeviceInfo)(nil),
		(*Request_SetPassword)(nil),
		(*Request_CreateBackup)(nil),
		(*Request_ShowMnemonic)(nil),
		(*Request_BtcPub)(nil),
		(*Request_BtcSignInit)(nil),
		(*Request_BtcSignInput)(nil),
		(*Request_BtcSignOutput)(nil),
		(*Request_InsertRemoveSdcard)(nil),
		(*Request_CheckSdcard)(nil),
		(*Request_SetMnemonicPassphraseEnabled)(nil),
		(*Request_ListBackups)(nil),
		(*Request_RestoreBackup)(nil),
		(*Request_PerformAttestation)(nil),
		(*Request_Reboot)(nil),
		(*Request_CheckBackup)(nil),
		(*Request_Eth)(nil),
		(*Request_Reset_)(nil),
		(*Request_RestoreFromMnemonic)(nil),
		(*Request_Fingerprint)(nil),
		(*Request_Btc)(nil),
		(*Request_ElectrumEncryptionKey)(nil),
		(*Request_Cardano)(nil),
	}
	file_hww_proto_msgTypes[3].OneofWrappers = []interface{}{
		(*Response_Success)(nil),
		(*Response_Error)(nil),
		(*Response_DeviceInfo)(nil),
		(*Response_Pub)(nil),
		(*Response_BtcSignNext)(nil),
		(*Response_ListBackups)(nil),
		(*Response_CheckBackup)(nil),
		(*Response_PerformAttestation)(nil),
		(*Response_CheckSdcard)(nil),
		(*Response_Eth)(nil),
		(*Response_Fingerprint)(nil),
		(*Response_Btc)(nil),
		(*Response_ElectrumEncryptionKey)(nil),
		(*Response_Cardano)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_hww_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_hww_proto_goTypes,
		DependencyIndexes: file_hww_proto_depIdxs,
		MessageInfos:      file_hww_proto_msgTypes,
	}.Build()
	File_hww_proto = out.File
	file_hww_proto_rawDesc = nil
	file_hww_proto_goTypes = nil
	file_hww_proto_depIdxs = nil
}
