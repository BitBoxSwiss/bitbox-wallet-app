// Copyright 2019 Shift Cryptosecurity AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

import "common.proto";

enum BTCCoin {
  BTC = 0;
  TBTC = 1;
  LTC = 2;
  TLTC = 3;
};


message BTCScriptConfig {
  // SimpleType is a "simple" script: one public key, no additional inputs.
  enum SimpleType {
    P2WPKH_P2SH = 0;
    P2WPKH = 1;
  }

  message Multisig {
    uint32 threshold = 1;
    // xpubs are acount-level xpubs. Addresses are going to be derived from it using: m/<change>/<receive>.
    // The number of xpubs defines the number of cosigners.
    repeated XPub xpubs = 2;
    // Index to the xpub of our keystore in xpubs. The keypath to it is provided via
    // BTCPubRequest/BTCSignInit.
    uint32 our_xpub_index = 3;
  }

  oneof config {
    SimpleType simple_type = 1;
    Multisig multisig = 2;
  }
}

message BTCPubRequest {
  enum XPubType {
    TPUB = 0;
    XPUB = 1;
    YPUB = 2;
    ZPUB = 3; // zpub
    VPUB = 4; // vpub
    UPUB = 5;
    CAPITAL_VPUB = 6; // Vpub
    CAPITAL_ZPUB = 7; // Zpub
  }

  BTCCoin coin = 1;
  repeated uint32 keypath = 2;

  oneof output {
    XPubType xpub_type = 3;
    BTCScriptConfig script_config = 4;
  }

  bool display = 5;
}


message BTCSignInitRequest {
  BTCCoin coin = 1;
  BTCScriptConfig script_config = 2; // script config for inputs and changes
  repeated uint32 keypath_account = 3; // prefix to all input and change keypaths.
  uint32 version = 4; // must be 1 or 2
  uint32 num_inputs = 5;
  uint32 num_outputs = 6;
  uint32 locktime = 7; // must be <500000000
}

message BTCSignNextResponse {
  enum Type {
    INPUT = 0;
    OUTPUT = 1;
    DONE = 2;
  }
  Type type = 1;
  uint32 index = 2;
  bool has_signature = 3; // only as a response to BTCSignInputRequest
  // 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
  bytes signature = 4;
}

message BTCSignInputRequest {
  bytes prevOutHash = 1;
  uint32 prevOutIndex = 2;
  uint64 prevOutValue = 3;
  uint32 sequence = 4; // must be 0xffffffff-2, 0xffffffff-1 or 0xffffffff
  repeated uint32 keypath = 6; // all inputs must be ours.
}

enum BTCOutputType {
  UNKNOWN = 0;
  P2PKH = 1;
  P2SH = 2;
  P2WPKH = 3;
  P2WSH = 4;
}

message BTCSignOutputRequest {
  bool ours = 1;
  BTCOutputType type = 2; // if ours is false
  // 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
  uint64 value = 3;
  bytes hash = 4; // if ours is false
  repeated uint32 keypath = 5; // if ours is true
}

message BTCScriptConfigRegistration {
  BTCCoin coin = 1;
  BTCScriptConfig script_config = 2;
  repeated uint32 keypath = 3;
}

message BTCSuccess {
}

message BTCIsScriptConfigRegisteredRequest {
  BTCScriptConfigRegistration registration = 1;
}

message BTCIsScriptConfigRegisteredResponse {
  bool is_registered = 1;
}

message BTCRegisterScriptConfigRequest {
  BTCScriptConfigRegistration registration = 1;
  string name = 2;
}

message BTCRequest {
  oneof request {
    BTCIsScriptConfigRegisteredRequest is_script_config_registered = 1;
    BTCRegisterScriptConfigRequest register_script_config = 2;
  }
}

message BTCResponse {
  oneof response {
    BTCSuccess success = 1;
    BTCIsScriptConfigRegisteredResponse is_script_config_registered = 2;
  }
}
