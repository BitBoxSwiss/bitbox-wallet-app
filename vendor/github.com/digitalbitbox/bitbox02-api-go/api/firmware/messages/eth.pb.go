// Copyright 2019 Shift Cryptosecurity AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: eth.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// Kept for backwards compatibility. Use chain_id instead, introduced in v9.10.0.
type ETHCoin int32

const (
	ETHCoin_ETH ETHCoin = 0
	// Removed in v9.14.0 - deprecated
	ETHCoin_RopstenETH ETHCoin = 1
	// Removed in v9.14.0 - deprecated
	ETHCoin_RinkebyETH ETHCoin = 2
)

// Enum value maps for ETHCoin.
var (
	ETHCoin_name = map[int32]string{
		0: "ETH",
		1: "RopstenETH",
		2: "RinkebyETH",
	}
	ETHCoin_value = map[string]int32{
		"ETH":        0,
		"RopstenETH": 1,
		"RinkebyETH": 2,
	}
)

func (x ETHCoin) Enum() *ETHCoin {
	p := new(ETHCoin)
	*p = x
	return p
}

func (x ETHCoin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETHCoin) Descriptor() protoreflect.EnumDescriptor {
	return file_eth_proto_enumTypes[0].Descriptor()
}

func (ETHCoin) Type() protoreflect.EnumType {
	return &file_eth_proto_enumTypes[0]
}

func (x ETHCoin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETHCoin.Descriptor instead.
func (ETHCoin) EnumDescriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{0}
}

type ETHPubRequest_OutputType int32

const (
	ETHPubRequest_ADDRESS ETHPubRequest_OutputType = 0
	ETHPubRequest_XPUB    ETHPubRequest_OutputType = 1
)

// Enum value maps for ETHPubRequest_OutputType.
var (
	ETHPubRequest_OutputType_name = map[int32]string{
		0: "ADDRESS",
		1: "XPUB",
	}
	ETHPubRequest_OutputType_value = map[string]int32{
		"ADDRESS": 0,
		"XPUB":    1,
	}
)

func (x ETHPubRequest_OutputType) Enum() *ETHPubRequest_OutputType {
	p := new(ETHPubRequest_OutputType)
	*p = x
	return p
}

func (x ETHPubRequest_OutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETHPubRequest_OutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_eth_proto_enumTypes[1].Descriptor()
}

func (ETHPubRequest_OutputType) Type() protoreflect.EnumType {
	return &file_eth_proto_enumTypes[1]
}

func (x ETHPubRequest_OutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETHPubRequest_OutputType.Descriptor instead.
func (ETHPubRequest_OutputType) EnumDescriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{0, 0}
}

type ETHSignTypedMessageRequest_DataType int32

const (
	ETHSignTypedMessageRequest_UNKNOWN ETHSignTypedMessageRequest_DataType = 0
	ETHSignTypedMessageRequest_BYTES   ETHSignTypedMessageRequest_DataType = 1
	ETHSignTypedMessageRequest_UINT    ETHSignTypedMessageRequest_DataType = 2
	ETHSignTypedMessageRequest_INT     ETHSignTypedMessageRequest_DataType = 3
	ETHSignTypedMessageRequest_BOOL    ETHSignTypedMessageRequest_DataType = 4
	ETHSignTypedMessageRequest_ADDRESS ETHSignTypedMessageRequest_DataType = 5
	ETHSignTypedMessageRequest_STRING  ETHSignTypedMessageRequest_DataType = 6
	ETHSignTypedMessageRequest_ARRAY   ETHSignTypedMessageRequest_DataType = 7
	ETHSignTypedMessageRequest_STRUCT  ETHSignTypedMessageRequest_DataType = 8
)

// Enum value maps for ETHSignTypedMessageRequest_DataType.
var (
	ETHSignTypedMessageRequest_DataType_name = map[int32]string{
		0: "UNKNOWN",
		1: "BYTES",
		2: "UINT",
		3: "INT",
		4: "BOOL",
		5: "ADDRESS",
		6: "STRING",
		7: "ARRAY",
		8: "STRUCT",
	}
	ETHSignTypedMessageRequest_DataType_value = map[string]int32{
		"UNKNOWN": 0,
		"BYTES":   1,
		"UINT":    2,
		"INT":     3,
		"BOOL":    4,
		"ADDRESS": 5,
		"STRING":  6,
		"ARRAY":   7,
		"STRUCT":  8,
	}
)

func (x ETHSignTypedMessageRequest_DataType) Enum() *ETHSignTypedMessageRequest_DataType {
	p := new(ETHSignTypedMessageRequest_DataType)
	*p = x
	return p
}

func (x ETHSignTypedMessageRequest_DataType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETHSignTypedMessageRequest_DataType) Descriptor() protoreflect.EnumDescriptor {
	return file_eth_proto_enumTypes[2].Descriptor()
}

func (ETHSignTypedMessageRequest_DataType) Type() protoreflect.EnumType {
	return &file_eth_proto_enumTypes[2]
}

func (x ETHSignTypedMessageRequest_DataType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETHSignTypedMessageRequest_DataType.Descriptor instead.
func (ETHSignTypedMessageRequest_DataType) EnumDescriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{4, 0}
}

type ETHTypedMessageValueResponse_RootObject int32

const (
	ETHTypedMessageValueResponse_UNKNOWN ETHTypedMessageValueResponse_RootObject = 0
	ETHTypedMessageValueResponse_DOMAIN  ETHTypedMessageValueResponse_RootObject = 1
	ETHTypedMessageValueResponse_MESSAGE ETHTypedMessageValueResponse_RootObject = 2
)

// Enum value maps for ETHTypedMessageValueResponse_RootObject.
var (
	ETHTypedMessageValueResponse_RootObject_name = map[int32]string{
		0: "UNKNOWN",
		1: "DOMAIN",
		2: "MESSAGE",
	}
	ETHTypedMessageValueResponse_RootObject_value = map[string]int32{
		"UNKNOWN": 0,
		"DOMAIN":  1,
		"MESSAGE": 2,
	}
)

func (x ETHTypedMessageValueResponse_RootObject) Enum() *ETHTypedMessageValueResponse_RootObject {
	p := new(ETHTypedMessageValueResponse_RootObject)
	*p = x
	return p
}

func (x ETHTypedMessageValueResponse_RootObject) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ETHTypedMessageValueResponse_RootObject) Descriptor() protoreflect.EnumDescriptor {
	return file_eth_proto_enumTypes[3].Descriptor()
}

func (ETHTypedMessageValueResponse_RootObject) Type() protoreflect.EnumType {
	return &file_eth_proto_enumTypes[3]
}

func (x ETHTypedMessageValueResponse_RootObject) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ETHTypedMessageValueResponse_RootObject.Descriptor instead.
func (ETHTypedMessageValueResponse_RootObject) EnumDescriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{5, 0}
}

type ETHPubRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keypath []uint32 `protobuf:"varint,1,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	// Deprecated: use chain_id instead.
	Coin            ETHCoin                  `protobuf:"varint,2,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.ETHCoin" json:"coin,omitempty"`
	OutputType      ETHPubRequest_OutputType `protobuf:"varint,3,opt,name=output_type,json=outputType,proto3,enum=shiftcrypto.bitbox02.ETHPubRequest_OutputType" json:"output_type,omitempty"`
	Display         bool                     `protobuf:"varint,4,opt,name=display,proto3" json:"display,omitempty"`
	ContractAddress []byte                   `protobuf:"bytes,5,opt,name=contract_address,json=contractAddress,proto3" json:"contract_address,omitempty"`
	// If non-zero, `coin` is ignored and `chain_id` is used to identify the network.
	ChainId uint64 `protobuf:"varint,6,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *ETHPubRequest) Reset() {
	*x = ETHPubRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHPubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHPubRequest) ProtoMessage() {}

func (x *ETHPubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHPubRequest.ProtoReflect.Descriptor instead.
func (*ETHPubRequest) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{0}
}

func (x *ETHPubRequest) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *ETHPubRequest) GetCoin() ETHCoin {
	if x != nil {
		return x.Coin
	}
	return ETHCoin_ETH
}

func (x *ETHPubRequest) GetOutputType() ETHPubRequest_OutputType {
	if x != nil {
		return x.OutputType
	}
	return ETHPubRequest_ADDRESS
}

func (x *ETHPubRequest) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *ETHPubRequest) GetContractAddress() []byte {
	if x != nil {
		return x.ContractAddress
	}
	return nil
}

func (x *ETHPubRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type ETHSignRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: use chain_id instead.
	Coin                ETHCoin                        `protobuf:"varint,1,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.ETHCoin" json:"coin,omitempty"`
	Keypath             []uint32                       `protobuf:"varint,2,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	Nonce               []byte                         `protobuf:"bytes,3,opt,name=nonce,proto3" json:"nonce,omitempty"`                       // smallest big endian serialization, max. 16 bytes
	GasPrice            []byte                         `protobuf:"bytes,4,opt,name=gas_price,json=gasPrice,proto3" json:"gas_price,omitempty"` // smallest big endian serialization, max. 16 bytes
	GasLimit            []byte                         `protobuf:"bytes,5,opt,name=gas_limit,json=gasLimit,proto3" json:"gas_limit,omitempty"` // smallest big endian serialization, max. 16 bytes
	Recipient           []byte                         `protobuf:"bytes,6,opt,name=recipient,proto3" json:"recipient,omitempty"`               // 20 byte recipient
	Value               []byte                         `protobuf:"bytes,7,opt,name=value,proto3" json:"value,omitempty"`                       // smallest big endian serialization, max. 32 bytes
	Data                []byte                         `protobuf:"bytes,8,opt,name=data,proto3" json:"data,omitempty"`
	HostNonceCommitment *AntiKleptoHostNonceCommitment `protobuf:"bytes,9,opt,name=host_nonce_commitment,json=hostNonceCommitment,proto3" json:"host_nonce_commitment,omitempty"`
	// If non-zero, `coin` is ignored and `chain_id` is used to identify the network.
	ChainId uint64 `protobuf:"varint,10,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *ETHSignRequest) Reset() {
	*x = ETHSignRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHSignRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHSignRequest) ProtoMessage() {}

func (x *ETHSignRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHSignRequest.ProtoReflect.Descriptor instead.
func (*ETHSignRequest) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{1}
}

func (x *ETHSignRequest) GetCoin() ETHCoin {
	if x != nil {
		return x.Coin
	}
	return ETHCoin_ETH
}

func (x *ETHSignRequest) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *ETHSignRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *ETHSignRequest) GetGasPrice() []byte {
	if x != nil {
		return x.GasPrice
	}
	return nil
}

func (x *ETHSignRequest) GetGasLimit() []byte {
	if x != nil {
		return x.GasLimit
	}
	return nil
}

func (x *ETHSignRequest) GetRecipient() []byte {
	if x != nil {
		return x.Recipient
	}
	return nil
}

func (x *ETHSignRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *ETHSignRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

func (x *ETHSignRequest) GetHostNonceCommitment() *AntiKleptoHostNonceCommitment {
	if x != nil {
		return x.HostNonceCommitment
	}
	return nil
}

func (x *ETHSignRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type ETHSignMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Deprecated: use chain_id instead.
	Coin                ETHCoin                        `protobuf:"varint,1,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.ETHCoin" json:"coin,omitempty"`
	Keypath             []uint32                       `protobuf:"varint,2,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	Msg                 []byte                         `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	HostNonceCommitment *AntiKleptoHostNonceCommitment `protobuf:"bytes,4,opt,name=host_nonce_commitment,json=hostNonceCommitment,proto3" json:"host_nonce_commitment,omitempty"`
	// If non-zero, `coin` is ignored and `chain_id` is used to identify the network.
	ChainId uint64 `protobuf:"varint,5,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (x *ETHSignMessageRequest) Reset() {
	*x = ETHSignMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHSignMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHSignMessageRequest) ProtoMessage() {}

func (x *ETHSignMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHSignMessageRequest.ProtoReflect.Descriptor instead.
func (*ETHSignMessageRequest) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{2}
}

func (x *ETHSignMessageRequest) GetCoin() ETHCoin {
	if x != nil {
		return x.Coin
	}
	return ETHCoin_ETH
}

func (x *ETHSignMessageRequest) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *ETHSignMessageRequest) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *ETHSignMessageRequest) GetHostNonceCommitment() *AntiKleptoHostNonceCommitment {
	if x != nil {
		return x.HostNonceCommitment
	}
	return nil
}

func (x *ETHSignMessageRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

type ETHSignResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"` // 65 bytes, last byte is the recid
}

func (x *ETHSignResponse) Reset() {
	*x = ETHSignResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHSignResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHSignResponse) ProtoMessage() {}

func (x *ETHSignResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHSignResponse.ProtoReflect.Descriptor instead.
func (*ETHSignResponse) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{3}
}

func (x *ETHSignResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type ETHSignTypedMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChainId             uint64                                   `protobuf:"varint,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
	Keypath             []uint32                                 `protobuf:"varint,2,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	Types               []*ETHSignTypedMessageRequest_StructType `protobuf:"bytes,3,rep,name=types,proto3" json:"types,omitempty"`
	PrimaryType         string                                   `protobuf:"bytes,4,opt,name=primary_type,json=primaryType,proto3" json:"primary_type,omitempty"`
	HostNonceCommitment *AntiKleptoHostNonceCommitment           `protobuf:"bytes,5,opt,name=host_nonce_commitment,json=hostNonceCommitment,proto3" json:"host_nonce_commitment,omitempty"`
}

func (x *ETHSignTypedMessageRequest) Reset() {
	*x = ETHSignTypedMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHSignTypedMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHSignTypedMessageRequest) ProtoMessage() {}

func (x *ETHSignTypedMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHSignTypedMessageRequest.ProtoReflect.Descriptor instead.
func (*ETHSignTypedMessageRequest) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{4}
}

func (x *ETHSignTypedMessageRequest) GetChainId() uint64 {
	if x != nil {
		return x.ChainId
	}
	return 0
}

func (x *ETHSignTypedMessageRequest) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *ETHSignTypedMessageRequest) GetTypes() []*ETHSignTypedMessageRequest_StructType {
	if x != nil {
		return x.Types
	}
	return nil
}

func (x *ETHSignTypedMessageRequest) GetPrimaryType() string {
	if x != nil {
		return x.PrimaryType
	}
	return ""
}

func (x *ETHSignTypedMessageRequest) GetHostNonceCommitment() *AntiKleptoHostNonceCommitment {
	if x != nil {
		return x.HostNonceCommitment
	}
	return nil
}

type ETHTypedMessageValueResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RootObject ETHTypedMessageValueResponse_RootObject `protobuf:"varint,1,opt,name=root_object,json=rootObject,proto3,enum=shiftcrypto.bitbox02.ETHTypedMessageValueResponse_RootObject" json:"root_object,omitempty"`
	Path       []uint32                                `protobuf:"varint,2,rep,packed,name=path,proto3" json:"path,omitempty"`
}

func (x *ETHTypedMessageValueResponse) Reset() {
	*x = ETHTypedMessageValueResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHTypedMessageValueResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHTypedMessageValueResponse) ProtoMessage() {}

func (x *ETHTypedMessageValueResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHTypedMessageValueResponse.ProtoReflect.Descriptor instead.
func (*ETHTypedMessageValueResponse) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{5}
}

func (x *ETHTypedMessageValueResponse) GetRootObject() ETHTypedMessageValueResponse_RootObject {
	if x != nil {
		return x.RootObject
	}
	return ETHTypedMessageValueResponse_UNKNOWN
}

func (x *ETHTypedMessageValueResponse) GetPath() []uint32 {
	if x != nil {
		return x.Path
	}
	return nil
}

type ETHTypedMessageValueRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value []byte `protobuf:"bytes,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ETHTypedMessageValueRequest) Reset() {
	*x = ETHTypedMessageValueRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHTypedMessageValueRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHTypedMessageValueRequest) ProtoMessage() {}

func (x *ETHTypedMessageValueRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHTypedMessageValueRequest.ProtoReflect.Descriptor instead.
func (*ETHTypedMessageValueRequest) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{6}
}

func (x *ETHTypedMessageValueRequest) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

type ETHRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*ETHRequest_Pub
	//	*ETHRequest_Sign
	//	*ETHRequest_SignMsg
	//	*ETHRequest_AntikleptoSignature
	//	*ETHRequest_SignTypedMsg
	//	*ETHRequest_TypedMsgValue
	Request isETHRequest_Request `protobuf_oneof:"request"`
}

func (x *ETHRequest) Reset() {
	*x = ETHRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHRequest) ProtoMessage() {}

func (x *ETHRequest) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHRequest.ProtoReflect.Descriptor instead.
func (*ETHRequest) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{7}
}

func (m *ETHRequest) GetRequest() isETHRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *ETHRequest) GetPub() *ETHPubRequest {
	if x, ok := x.GetRequest().(*ETHRequest_Pub); ok {
		return x.Pub
	}
	return nil
}

func (x *ETHRequest) GetSign() *ETHSignRequest {
	if x, ok := x.GetRequest().(*ETHRequest_Sign); ok {
		return x.Sign
	}
	return nil
}

func (x *ETHRequest) GetSignMsg() *ETHSignMessageRequest {
	if x, ok := x.GetRequest().(*ETHRequest_SignMsg); ok {
		return x.SignMsg
	}
	return nil
}

func (x *ETHRequest) GetAntikleptoSignature() *AntiKleptoSignatureRequest {
	if x, ok := x.GetRequest().(*ETHRequest_AntikleptoSignature); ok {
		return x.AntikleptoSignature
	}
	return nil
}

func (x *ETHRequest) GetSignTypedMsg() *ETHSignTypedMessageRequest {
	if x, ok := x.GetRequest().(*ETHRequest_SignTypedMsg); ok {
		return x.SignTypedMsg
	}
	return nil
}

func (x *ETHRequest) GetTypedMsgValue() *ETHTypedMessageValueRequest {
	if x, ok := x.GetRequest().(*ETHRequest_TypedMsgValue); ok {
		return x.TypedMsgValue
	}
	return nil
}

type isETHRequest_Request interface {
	isETHRequest_Request()
}

type ETHRequest_Pub struct {
	Pub *ETHPubRequest `protobuf:"bytes,1,opt,name=pub,proto3,oneof"`
}

type ETHRequest_Sign struct {
	Sign *ETHSignRequest `protobuf:"bytes,2,opt,name=sign,proto3,oneof"`
}

type ETHRequest_SignMsg struct {
	SignMsg *ETHSignMessageRequest `protobuf:"bytes,3,opt,name=sign_msg,json=signMsg,proto3,oneof"`
}

type ETHRequest_AntikleptoSignature struct {
	AntikleptoSignature *AntiKleptoSignatureRequest `protobuf:"bytes,4,opt,name=antiklepto_signature,json=antikleptoSignature,proto3,oneof"`
}

type ETHRequest_SignTypedMsg struct {
	SignTypedMsg *ETHSignTypedMessageRequest `protobuf:"bytes,5,opt,name=sign_typed_msg,json=signTypedMsg,proto3,oneof"`
}

type ETHRequest_TypedMsgValue struct {
	TypedMsgValue *ETHTypedMessageValueRequest `protobuf:"bytes,6,opt,name=typed_msg_value,json=typedMsgValue,proto3,oneof"`
}

func (*ETHRequest_Pub) isETHRequest_Request() {}

func (*ETHRequest_Sign) isETHRequest_Request() {}

func (*ETHRequest_SignMsg) isETHRequest_Request() {}

func (*ETHRequest_AntikleptoSignature) isETHRequest_Request() {}

func (*ETHRequest_SignTypedMsg) isETHRequest_Request() {}

func (*ETHRequest_TypedMsgValue) isETHRequest_Request() {}

type ETHResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*ETHResponse_Pub
	//	*ETHResponse_Sign
	//	*ETHResponse_AntikleptoSignerCommitment
	//	*ETHResponse_TypedMsgValue
	Response isETHResponse_Response `protobuf_oneof:"response"`
}

func (x *ETHResponse) Reset() {
	*x = ETHResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHResponse) ProtoMessage() {}

func (x *ETHResponse) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHResponse.ProtoReflect.Descriptor instead.
func (*ETHResponse) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{8}
}

func (m *ETHResponse) GetResponse() isETHResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *ETHResponse) GetPub() *PubResponse {
	if x, ok := x.GetResponse().(*ETHResponse_Pub); ok {
		return x.Pub
	}
	return nil
}

func (x *ETHResponse) GetSign() *ETHSignResponse {
	if x, ok := x.GetResponse().(*ETHResponse_Sign); ok {
		return x.Sign
	}
	return nil
}

func (x *ETHResponse) GetAntikleptoSignerCommitment() *AntiKleptoSignerCommitment {
	if x, ok := x.GetResponse().(*ETHResponse_AntikleptoSignerCommitment); ok {
		return x.AntikleptoSignerCommitment
	}
	return nil
}

func (x *ETHResponse) GetTypedMsgValue() *ETHTypedMessageValueResponse {
	if x, ok := x.GetResponse().(*ETHResponse_TypedMsgValue); ok {
		return x.TypedMsgValue
	}
	return nil
}

type isETHResponse_Response interface {
	isETHResponse_Response()
}

type ETHResponse_Pub struct {
	Pub *PubResponse `protobuf:"bytes,1,opt,name=pub,proto3,oneof"`
}

type ETHResponse_Sign struct {
	Sign *ETHSignResponse `protobuf:"bytes,2,opt,name=sign,proto3,oneof"`
}

type ETHResponse_AntikleptoSignerCommitment struct {
	AntikleptoSignerCommitment *AntiKleptoSignerCommitment `protobuf:"bytes,3,opt,name=antiklepto_signer_commitment,json=antikleptoSignerCommitment,proto3,oneof"`
}

type ETHResponse_TypedMsgValue struct {
	TypedMsgValue *ETHTypedMessageValueResponse `protobuf:"bytes,4,opt,name=typed_msg_value,json=typedMsgValue,proto3,oneof"`
}

func (*ETHResponse_Pub) isETHResponse_Response() {}

func (*ETHResponse_Sign) isETHResponse_Response() {}

func (*ETHResponse_AntikleptoSignerCommitment) isETHResponse_Response() {}

func (*ETHResponse_TypedMsgValue) isETHResponse_Response() {}

type ETHSignTypedMessageRequest_MemberType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       ETHSignTypedMessageRequest_DataType    `protobuf:"varint,1,opt,name=type,proto3,enum=shiftcrypto.bitbox02.ETHSignTypedMessageRequest_DataType" json:"type,omitempty"`
	Size       uint32                                 `protobuf:"varint,2,opt,name=size,proto3" json:"size,omitempty"`
	StructName string                                 `protobuf:"bytes,3,opt,name=struct_name,json=structName,proto3" json:"struct_name,omitempty"` // if type==STRUCT, name of struct type.
	ArrayType  *ETHSignTypedMessageRequest_MemberType `protobuf:"bytes,4,opt,name=array_type,json=arrayType,proto3" json:"array_type,omitempty"`    // if type==ARRAY, type of elements
}

func (x *ETHSignTypedMessageRequest_MemberType) Reset() {
	*x = ETHSignTypedMessageRequest_MemberType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHSignTypedMessageRequest_MemberType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHSignTypedMessageRequest_MemberType) ProtoMessage() {}

func (x *ETHSignTypedMessageRequest_MemberType) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHSignTypedMessageRequest_MemberType.ProtoReflect.Descriptor instead.
func (*ETHSignTypedMessageRequest_MemberType) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{4, 0}
}

func (x *ETHSignTypedMessageRequest_MemberType) GetType() ETHSignTypedMessageRequest_DataType {
	if x != nil {
		return x.Type
	}
	return ETHSignTypedMessageRequest_UNKNOWN
}

func (x *ETHSignTypedMessageRequest_MemberType) GetSize() uint32 {
	if x != nil {
		return x.Size
	}
	return 0
}

func (x *ETHSignTypedMessageRequest_MemberType) GetStructName() string {
	if x != nil {
		return x.StructName
	}
	return ""
}

func (x *ETHSignTypedMessageRequest_MemberType) GetArrayType() *ETHSignTypedMessageRequest_MemberType {
	if x != nil {
		return x.ArrayType
	}
	return nil
}

type ETHSignTypedMessageRequest_Member struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name string                                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Type *ETHSignTypedMessageRequest_MemberType `protobuf:"bytes,2,opt,name=type,proto3" json:"type,omitempty"`
}

func (x *ETHSignTypedMessageRequest_Member) Reset() {
	*x = ETHSignTypedMessageRequest_Member{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHSignTypedMessageRequest_Member) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHSignTypedMessageRequest_Member) ProtoMessage() {}

func (x *ETHSignTypedMessageRequest_Member) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHSignTypedMessageRequest_Member.ProtoReflect.Descriptor instead.
func (*ETHSignTypedMessageRequest_Member) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{4, 1}
}

func (x *ETHSignTypedMessageRequest_Member) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ETHSignTypedMessageRequest_Member) GetType() *ETHSignTypedMessageRequest_MemberType {
	if x != nil {
		return x.Type
	}
	return nil
}

type ETHSignTypedMessageRequest_StructType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name    string                               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Members []*ETHSignTypedMessageRequest_Member `protobuf:"bytes,2,rep,name=members,proto3" json:"members,omitempty"`
}

func (x *ETHSignTypedMessageRequest_StructType) Reset() {
	*x = ETHSignTypedMessageRequest_StructType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_eth_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ETHSignTypedMessageRequest_StructType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ETHSignTypedMessageRequest_StructType) ProtoMessage() {}

func (x *ETHSignTypedMessageRequest_StructType) ProtoReflect() protoreflect.Message {
	mi := &file_eth_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ETHSignTypedMessageRequest_StructType.ProtoReflect.Descriptor instead.
func (*ETHSignTypedMessageRequest_StructType) Descriptor() ([]byte, []int) {
	return file_eth_proto_rawDescGZIP(), []int{4, 2}
}

func (x *ETHSignTypedMessageRequest_StructType) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ETHSignTypedMessageRequest_StructType) GetMembers() []*ETHSignTypedMessageRequest_Member {
	if x != nil {
		return x.Members
	}
	return nil
}

var File_eth_proto protoreflect.FileDescriptor

var file_eth_proto_rawDesc = []byte{
	0x0a, 0x09, 0x65, 0x74, 0x68, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0xb2, 0x02, 0x0a, 0x0d, 0x45, 0x54, 0x48, 0x50, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x4f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48,
	0x50, 0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0a, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x29, 0x0a, 0x10, 0x63,
	0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x61, 0x63, 0x74, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49,
	0x64, 0x22, 0x23, 0x0a, 0x0a, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x58, 0x50, 0x55, 0x42, 0x10, 0x01, 0x22, 0xf9, 0x02, 0x0a, 0x0e, 0x45, 0x54, 0x48, 0x53, 0x69,
	0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x69,
	0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45,
	0x54, 0x48, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09,
	0x67, 0x61, 0x73, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x08, 0x67, 0x61, 0x73, 0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x67, 0x61, 0x73,
	0x5f, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x67, 0x61,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70, 0x69,
	0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x72, 0x65, 0x63, 0x69, 0x70,
	0x69, 0x65, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x12, 0x67,
	0x0a, 0x15, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62,
	0x6f, 0x78, 0x30, 0x32, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x4b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x48,
	0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d,
	0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e,
	0x49, 0x64, 0x22, 0xfa, 0x01, 0x0a, 0x15, 0x45, 0x54, 0x48, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04,
	0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x2e, 0x45, 0x54, 0x48, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x67, 0x0a, 0x15, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x4b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x74,
	0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52,
	0x13, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x22,
	0x2f, 0x0a, 0x0f, 0x45, 0x54, 0x48, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x22, 0xf4, 0x06, 0x0a, 0x1a, 0x45, 0x54, 0x48, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x19, 0x0a, 0x08, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x07, 0x63, 0x68, 0x61, 0x69, 0x6e, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65,
	0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x12, 0x51, 0x0a, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x18, 0x03, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x53, 0x69,
	0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x05, 0x74, 0x79, 0x70, 0x65, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x69, 0x6d, 0x61,
	0x72, 0x79, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70,
	0x72, 0x69, 0x6d, 0x61, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x12, 0x67, 0x0a, 0x15, 0x68, 0x6f,
	0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32,
	0x2e, 0x41, 0x6e, 0x74, 0x69, 0x4b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x4e,
	0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13,
	0x68, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d,
	0x65, 0x6e, 0x74, 0x1a, 0xec, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x4d, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x39, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62,
	0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x53, 0x69, 0x67, 0x6e, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x74, 0x72, 0x75, 0x63, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x74, 0x72, 0x75,
	0x63, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x0a, 0x61, 0x72, 0x72, 0x61, 0x79, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x2e, 0x45, 0x54, 0x48, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x61, 0x72, 0x72, 0x61, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x1a, 0x6d, 0x0a, 0x06, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x4f, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b,
	0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74,
	0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70,
	0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70,
	0x65, 0x1a, 0x73, 0x0a, 0x0a, 0x53, 0x74, 0x72, 0x75, 0x63, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x12, 0x51, 0x0a, 0x07, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x37, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x52, 0x07, 0x6d,
	0x65, 0x6d, 0x62, 0x65, 0x72, 0x73, 0x22, 0x6f, 0x0a, 0x08, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x42, 0x59, 0x54, 0x45, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x49,
	0x4e, 0x54, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49, 0x4e, 0x54, 0x10, 0x03, 0x12, 0x08, 0x0a,
	0x04, 0x42, 0x4f, 0x4f, 0x4c, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x44, 0x44, 0x52, 0x45,
	0x53, 0x53, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x53, 0x54, 0x52, 0x49, 0x4e, 0x47, 0x10, 0x06,
	0x12, 0x09, 0x0a, 0x05, 0x41, 0x52, 0x52, 0x41, 0x59, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x53,
	0x54, 0x52, 0x55, 0x43, 0x54, 0x10, 0x08, 0x22, 0xc6, 0x01, 0x0a, 0x1c, 0x45, 0x54, 0x48, 0x54,
	0x79, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x5e, 0x0a, 0x0b, 0x72, 0x6f, 0x6f, 0x74,
	0x5f, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62,
	0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x52, 0x6f, 0x6f, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x52, 0x0a, 0x72, 0x6f,
	0x6f, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x22, 0x32, 0x0a, 0x0a,
	0x52, 0x6f, 0x6f, 0x74, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x4f, 0x4d, 0x41, 0x49,
	0x4e, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x02,
	0x22, 0x33, 0x0a, 0x1b, 0x45, 0x54, 0x48, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf4, 0x03, 0x0a, 0x0a, 0x45, 0x54, 0x48, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x37, 0x0a, 0x03, 0x70, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x50, 0x75, 0x62, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x03, 0x70, 0x75, 0x62, 0x12, 0x3a, 0x0a,
	0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x53, 0x69, 0x67, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x73, 0x69, 0x67,
	0x6e, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x07, 0x73, 0x69, 0x67, 0x6e,
	0x4d, 0x73, 0x67, 0x12, 0x65, 0x0a, 0x14, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x6c, 0x65, 0x70, 0x74,
	0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x4b, 0x6c, 0x65,
	0x70, 0x74, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x6c, 0x65, 0x70, 0x74,
	0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x58, 0x0a, 0x0e, 0x73, 0x69,
	0x67, 0x6e, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x53, 0x69, 0x67,
	0x6e, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x64, 0x4d, 0x73, 0x67, 0x12, 0x5b, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f, 0x6d, 0x73,
	0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62,
	0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x42, 0x09, 0x0a, 0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe1, 0x02, 0x0a,
	0x0b, 0x45, 0x54, 0x48, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x35, 0x0a, 0x03,
	0x70, 0x75, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32,
	0x2e, 0x50, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x03,
	0x70, 0x75, 0x62, 0x12, 0x3b, 0x0a, 0x04, 0x73, 0x69, 0x67, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x53, 0x69, 0x67, 0x6e,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x04, 0x73, 0x69, 0x67, 0x6e,
	0x12, 0x74, 0x0a, 0x1c, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x5f, 0x73,
	0x69, 0x67, 0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x41, 0x6e,
	0x74, 0x69, 0x4b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x6e, 0x74, 0x69,
	0x6b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x5c, 0x0a, 0x0f, 0x74, 0x79, 0x70, 0x65, 0x64, 0x5f,
	0x6d, 0x73, 0x67, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x32, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69,
	0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x45, 0x54, 0x48, 0x54, 0x79, 0x70, 0x65, 0x64, 0x4d,
	0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0d, 0x74, 0x79, 0x70, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2a, 0x32, 0x0a, 0x07, 0x45, 0x54, 0x48, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x45,
	0x54, 0x48, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x6f, 0x70, 0x73, 0x74, 0x65, 0x6e, 0x45,
	0x54, 0x48, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x52, 0x69, 0x6e, 0x6b, 0x65, 0x62, 0x79, 0x45,
	0x54, 0x48, 0x10, 0x02, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_eth_proto_rawDescOnce sync.Once
	file_eth_proto_rawDescData = file_eth_proto_rawDesc
)

func file_eth_proto_rawDescGZIP() []byte {
	file_eth_proto_rawDescOnce.Do(func() {
		file_eth_proto_rawDescData = protoimpl.X.CompressGZIP(file_eth_proto_rawDescData)
	})
	return file_eth_proto_rawDescData
}

var file_eth_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_eth_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_eth_proto_goTypes = []interface{}{
	(ETHCoin)(0),                                  // 0: shiftcrypto.bitbox02.ETHCoin
	(ETHPubRequest_OutputType)(0),                 // 1: shiftcrypto.bitbox02.ETHPubRequest.OutputType
	(ETHSignTypedMessageRequest_DataType)(0),      // 2: shiftcrypto.bitbox02.ETHSignTypedMessageRequest.DataType
	(ETHTypedMessageValueResponse_RootObject)(0),  // 3: shiftcrypto.bitbox02.ETHTypedMessageValueResponse.RootObject
	(*ETHPubRequest)(nil),                         // 4: shiftcrypto.bitbox02.ETHPubRequest
	(*ETHSignRequest)(nil),                        // 5: shiftcrypto.bitbox02.ETHSignRequest
	(*ETHSignMessageRequest)(nil),                 // 6: shiftcrypto.bitbox02.ETHSignMessageRequest
	(*ETHSignResponse)(nil),                       // 7: shiftcrypto.bitbox02.ETHSignResponse
	(*ETHSignTypedMessageRequest)(nil),            // 8: shiftcrypto.bitbox02.ETHSignTypedMessageRequest
	(*ETHTypedMessageValueResponse)(nil),          // 9: shiftcrypto.bitbox02.ETHTypedMessageValueResponse
	(*ETHTypedMessageValueRequest)(nil),           // 10: shiftcrypto.bitbox02.ETHTypedMessageValueRequest
	(*ETHRequest)(nil),                            // 11: shiftcrypto.bitbox02.ETHRequest
	(*ETHResponse)(nil),                           // 12: shiftcrypto.bitbox02.ETHResponse
	(*ETHSignTypedMessageRequest_MemberType)(nil), // 13: shiftcrypto.bitbox02.ETHSignTypedMessageRequest.MemberType
	(*ETHSignTypedMessageRequest_Member)(nil),     // 14: shiftcrypto.bitbox02.ETHSignTypedMessageRequest.Member
	(*ETHSignTypedMessageRequest_StructType)(nil), // 15: shiftcrypto.bitbox02.ETHSignTypedMessageRequest.StructType
	(*AntiKleptoHostNonceCommitment)(nil),         // 16: shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment
	(*AntiKleptoSignatureRequest)(nil),            // 17: shiftcrypto.bitbox02.AntiKleptoSignatureRequest
	(*PubResponse)(nil),                           // 18: shiftcrypto.bitbox02.PubResponse
	(*AntiKleptoSignerCommitment)(nil),            // 19: shiftcrypto.bitbox02.AntiKleptoSignerCommitment
}
var file_eth_proto_depIdxs = []int32{
	0,  // 0: shiftcrypto.bitbox02.ETHPubRequest.coin:type_name -> shiftcrypto.bitbox02.ETHCoin
	1,  // 1: shiftcrypto.bitbox02.ETHPubRequest.output_type:type_name -> shiftcrypto.bitbox02.ETHPubRequest.OutputType
	0,  // 2: shiftcrypto.bitbox02.ETHSignRequest.coin:type_name -> shiftcrypto.bitbox02.ETHCoin
	16, // 3: shiftcrypto.bitbox02.ETHSignRequest.host_nonce_commitment:type_name -> shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment
	0,  // 4: shiftcrypto.bitbox02.ETHSignMessageRequest.coin:type_name -> shiftcrypto.bitbox02.ETHCoin
	16, // 5: shiftcrypto.bitbox02.ETHSignMessageRequest.host_nonce_commitment:type_name -> shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment
	15, // 6: shiftcrypto.bitbox02.ETHSignTypedMessageRequest.types:type_name -> shiftcrypto.bitbox02.ETHSignTypedMessageRequest.StructType
	16, // 7: shiftcrypto.bitbox02.ETHSignTypedMessageRequest.host_nonce_commitment:type_name -> shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment
	3,  // 8: shiftcrypto.bitbox02.ETHTypedMessageValueResponse.root_object:type_name -> shiftcrypto.bitbox02.ETHTypedMessageValueResponse.RootObject
	4,  // 9: shiftcrypto.bitbox02.ETHRequest.pub:type_name -> shiftcrypto.bitbox02.ETHPubRequest
	5,  // 10: shiftcrypto.bitbox02.ETHRequest.sign:type_name -> shiftcrypto.bitbox02.ETHSignRequest
	6,  // 11: shiftcrypto.bitbox02.ETHRequest.sign_msg:type_name -> shiftcrypto.bitbox02.ETHSignMessageRequest
	17, // 12: shiftcrypto.bitbox02.ETHRequest.antiklepto_signature:type_name -> shiftcrypto.bitbox02.AntiKleptoSignatureRequest
	8,  // 13: shiftcrypto.bitbox02.ETHRequest.sign_typed_msg:type_name -> shiftcrypto.bitbox02.ETHSignTypedMessageRequest
	10, // 14: shiftcrypto.bitbox02.ETHRequest.typed_msg_value:type_name -> shiftcrypto.bitbox02.ETHTypedMessageValueRequest
	18, // 15: shiftcrypto.bitbox02.ETHResponse.pub:type_name -> shiftcrypto.bitbox02.PubResponse
	7,  // 16: shiftcrypto.bitbox02.ETHResponse.sign:type_name -> shiftcrypto.bitbox02.ETHSignResponse
	19, // 17: shiftcrypto.bitbox02.ETHResponse.antiklepto_signer_commitment:type_name -> shiftcrypto.bitbox02.AntiKleptoSignerCommitment
	9,  // 18: shiftcrypto.bitbox02.ETHResponse.typed_msg_value:type_name -> shiftcrypto.bitbox02.ETHTypedMessageValueResponse
	2,  // 19: shiftcrypto.bitbox02.ETHSignTypedMessageRequest.MemberType.type:type_name -> shiftcrypto.bitbox02.ETHSignTypedMessageRequest.DataType
	13, // 20: shiftcrypto.bitbox02.ETHSignTypedMessageRequest.MemberType.array_type:type_name -> shiftcrypto.bitbox02.ETHSignTypedMessageRequest.MemberType
	13, // 21: shiftcrypto.bitbox02.ETHSignTypedMessageRequest.Member.type:type_name -> shiftcrypto.bitbox02.ETHSignTypedMessageRequest.MemberType
	14, // 22: shiftcrypto.bitbox02.ETHSignTypedMessageRequest.StructType.members:type_name -> shiftcrypto.bitbox02.ETHSignTypedMessageRequest.Member
	23, // [23:23] is the sub-list for method output_type
	23, // [23:23] is the sub-list for method input_type
	23, // [23:23] is the sub-list for extension type_name
	23, // [23:23] is the sub-list for extension extendee
	0,  // [0:23] is the sub-list for field type_name
}

func init() { file_eth_proto_init() }
func file_eth_proto_init() {
	if File_eth_proto != nil {
		return
	}
	file_common_proto_init()
	file_antiklepto_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_eth_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHPubRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHSignRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHSignMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHSignResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHSignTypedMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHTypedMessageValueResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHTypedMessageValueRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHSignTypedMessageRequest_MemberType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHSignTypedMessageRequest_Member); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_eth_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ETHSignTypedMessageRequest_StructType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_eth_proto_msgTypes[7].OneofWrappers = []interface{}{
		(*ETHRequest_Pub)(nil),
		(*ETHRequest_Sign)(nil),
		(*ETHRequest_SignMsg)(nil),
		(*ETHRequest_AntikleptoSignature)(nil),
		(*ETHRequest_SignTypedMsg)(nil),
		(*ETHRequest_TypedMsgValue)(nil),
	}
	file_eth_proto_msgTypes[8].OneofWrappers = []interface{}{
		(*ETHResponse_Pub)(nil),
		(*ETHResponse_Sign)(nil),
		(*ETHResponse_AntikleptoSignerCommitment)(nil),
		(*ETHResponse_TypedMsgValue)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_eth_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_eth_proto_goTypes,
		DependencyIndexes: file_eth_proto_depIdxs,
		EnumInfos:         file_eth_proto_enumTypes,
		MessageInfos:      file_eth_proto_msgTypes,
	}.Build()
	File_eth_proto = out.File
	file_eth_proto_rawDesc = nil
	file_eth_proto_goTypes = nil
	file_eth_proto_depIdxs = nil
}
