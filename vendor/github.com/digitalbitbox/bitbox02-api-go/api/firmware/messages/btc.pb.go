// Copyright 2019 Shift Cryptosecurity AG
// Copyright 2020 Shift Crypto AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.12.4
// source: btc.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BTCCoin int32

const (
	BTCCoin_BTC  BTCCoin = 0
	BTCCoin_TBTC BTCCoin = 1
	BTCCoin_LTC  BTCCoin = 2
	BTCCoin_TLTC BTCCoin = 3
)

// Enum value maps for BTCCoin.
var (
	BTCCoin_name = map[int32]string{
		0: "BTC",
		1: "TBTC",
		2: "LTC",
		3: "TLTC",
	}
	BTCCoin_value = map[string]int32{
		"BTC":  0,
		"TBTC": 1,
		"LTC":  2,
		"TLTC": 3,
	}
)

func (x BTCCoin) Enum() *BTCCoin {
	p := new(BTCCoin)
	*p = x
	return p
}

func (x BTCCoin) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BTCCoin) Descriptor() protoreflect.EnumDescriptor {
	return file_btc_proto_enumTypes[0].Descriptor()
}

func (BTCCoin) Type() protoreflect.EnumType {
	return &file_btc_proto_enumTypes[0]
}

func (x BTCCoin) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BTCCoin.Descriptor instead.
func (BTCCoin) EnumDescriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{0}
}

type BTCOutputType int32

const (
	BTCOutputType_UNKNOWN BTCOutputType = 0
	BTCOutputType_P2PKH   BTCOutputType = 1
	BTCOutputType_P2SH    BTCOutputType = 2
	BTCOutputType_P2WPKH  BTCOutputType = 3
	BTCOutputType_P2WSH   BTCOutputType = 4
	BTCOutputType_P2TR    BTCOutputType = 5
)

// Enum value maps for BTCOutputType.
var (
	BTCOutputType_name = map[int32]string{
		0: "UNKNOWN",
		1: "P2PKH",
		2: "P2SH",
		3: "P2WPKH",
		4: "P2WSH",
		5: "P2TR",
	}
	BTCOutputType_value = map[string]int32{
		"UNKNOWN": 0,
		"P2PKH":   1,
		"P2SH":    2,
		"P2WPKH":  3,
		"P2WSH":   4,
		"P2TR":    5,
	}
)

func (x BTCOutputType) Enum() *BTCOutputType {
	p := new(BTCOutputType)
	*p = x
	return p
}

func (x BTCOutputType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BTCOutputType) Descriptor() protoreflect.EnumDescriptor {
	return file_btc_proto_enumTypes[1].Descriptor()
}

func (BTCOutputType) Type() protoreflect.EnumType {
	return &file_btc_proto_enumTypes[1]
}

func (x BTCOutputType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BTCOutputType.Descriptor instead.
func (BTCOutputType) EnumDescriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{1}
}

// SimpleType is a "simple" script: one public key, no additional inputs.
type BTCScriptConfig_SimpleType int32

const (
	BTCScriptConfig_P2WPKH_P2SH BTCScriptConfig_SimpleType = 0
	BTCScriptConfig_P2WPKH      BTCScriptConfig_SimpleType = 1
	BTCScriptConfig_P2TR        BTCScriptConfig_SimpleType = 2
)

// Enum value maps for BTCScriptConfig_SimpleType.
var (
	BTCScriptConfig_SimpleType_name = map[int32]string{
		0: "P2WPKH_P2SH",
		1: "P2WPKH",
		2: "P2TR",
	}
	BTCScriptConfig_SimpleType_value = map[string]int32{
		"P2WPKH_P2SH": 0,
		"P2WPKH":      1,
		"P2TR":        2,
	}
)

func (x BTCScriptConfig_SimpleType) Enum() *BTCScriptConfig_SimpleType {
	p := new(BTCScriptConfig_SimpleType)
	*p = x
	return p
}

func (x BTCScriptConfig_SimpleType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BTCScriptConfig_SimpleType) Descriptor() protoreflect.EnumDescriptor {
	return file_btc_proto_enumTypes[2].Descriptor()
}

func (BTCScriptConfig_SimpleType) Type() protoreflect.EnumType {
	return &file_btc_proto_enumTypes[2]
}

func (x BTCScriptConfig_SimpleType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BTCScriptConfig_SimpleType.Descriptor instead.
func (BTCScriptConfig_SimpleType) EnumDescriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{0, 0}
}

type BTCScriptConfig_Multisig_ScriptType int32

const (
	BTCScriptConfig_Multisig_P2WSH      BTCScriptConfig_Multisig_ScriptType = 0 // native segwit v0 multisig (bech32 addresses)
	BTCScriptConfig_Multisig_P2WSH_P2SH BTCScriptConfig_Multisig_ScriptType = 1 // wrapped segwit for legacy address compatibility
)

// Enum value maps for BTCScriptConfig_Multisig_ScriptType.
var (
	BTCScriptConfig_Multisig_ScriptType_name = map[int32]string{
		0: "P2WSH",
		1: "P2WSH_P2SH",
	}
	BTCScriptConfig_Multisig_ScriptType_value = map[string]int32{
		"P2WSH":      0,
		"P2WSH_P2SH": 1,
	}
)

func (x BTCScriptConfig_Multisig_ScriptType) Enum() *BTCScriptConfig_Multisig_ScriptType {
	p := new(BTCScriptConfig_Multisig_ScriptType)
	*p = x
	return p
}

func (x BTCScriptConfig_Multisig_ScriptType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BTCScriptConfig_Multisig_ScriptType) Descriptor() protoreflect.EnumDescriptor {
	return file_btc_proto_enumTypes[3].Descriptor()
}

func (BTCScriptConfig_Multisig_ScriptType) Type() protoreflect.EnumType {
	return &file_btc_proto_enumTypes[3]
}

func (x BTCScriptConfig_Multisig_ScriptType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BTCScriptConfig_Multisig_ScriptType.Descriptor instead.
func (BTCScriptConfig_Multisig_ScriptType) EnumDescriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{0, 0, 0}
}

type BTCPubRequest_XPubType int32

const (
	BTCPubRequest_TPUB         BTCPubRequest_XPubType = 0
	BTCPubRequest_XPUB         BTCPubRequest_XPubType = 1
	BTCPubRequest_YPUB         BTCPubRequest_XPubType = 2
	BTCPubRequest_ZPUB         BTCPubRequest_XPubType = 3 // zpub
	BTCPubRequest_VPUB         BTCPubRequest_XPubType = 4 // vpub
	BTCPubRequest_UPUB         BTCPubRequest_XPubType = 5
	BTCPubRequest_CAPITAL_VPUB BTCPubRequest_XPubType = 6 // Vpub
	BTCPubRequest_CAPITAL_ZPUB BTCPubRequest_XPubType = 7 // Zpub
	BTCPubRequest_CAPITAL_UPUB BTCPubRequest_XPubType = 8 // Upub
	BTCPubRequest_CAPITAL_YPUB BTCPubRequest_XPubType = 9 // Ypub
)

// Enum value maps for BTCPubRequest_XPubType.
var (
	BTCPubRequest_XPubType_name = map[int32]string{
		0: "TPUB",
		1: "XPUB",
		2: "YPUB",
		3: "ZPUB",
		4: "VPUB",
		5: "UPUB",
		6: "CAPITAL_VPUB",
		7: "CAPITAL_ZPUB",
		8: "CAPITAL_UPUB",
		9: "CAPITAL_YPUB",
	}
	BTCPubRequest_XPubType_value = map[string]int32{
		"TPUB":         0,
		"XPUB":         1,
		"YPUB":         2,
		"ZPUB":         3,
		"VPUB":         4,
		"UPUB":         5,
		"CAPITAL_VPUB": 6,
		"CAPITAL_ZPUB": 7,
		"CAPITAL_UPUB": 8,
		"CAPITAL_YPUB": 9,
	}
)

func (x BTCPubRequest_XPubType) Enum() *BTCPubRequest_XPubType {
	p := new(BTCPubRequest_XPubType)
	*p = x
	return p
}

func (x BTCPubRequest_XPubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BTCPubRequest_XPubType) Descriptor() protoreflect.EnumDescriptor {
	return file_btc_proto_enumTypes[4].Descriptor()
}

func (BTCPubRequest_XPubType) Type() protoreflect.EnumType {
	return &file_btc_proto_enumTypes[4]
}

func (x BTCPubRequest_XPubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BTCPubRequest_XPubType.Descriptor instead.
func (BTCPubRequest_XPubType) EnumDescriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{1, 0}
}

type BTCSignInitRequest_FormatUnit int32

const (
	// According to `coin` (BTC, LTC, etc.).
	BTCSignInitRequest_DEFAULT BTCSignInitRequest_FormatUnit = 0
	// Only valid for BTC/TBTC, formats as "sat"/"tsat".
	BTCSignInitRequest_SAT BTCSignInitRequest_FormatUnit = 1
)

// Enum value maps for BTCSignInitRequest_FormatUnit.
var (
	BTCSignInitRequest_FormatUnit_name = map[int32]string{
		0: "DEFAULT",
		1: "SAT",
	}
	BTCSignInitRequest_FormatUnit_value = map[string]int32{
		"DEFAULT": 0,
		"SAT":     1,
	}
)

func (x BTCSignInitRequest_FormatUnit) Enum() *BTCSignInitRequest_FormatUnit {
	p := new(BTCSignInitRequest_FormatUnit)
	*p = x
	return p
}

func (x BTCSignInitRequest_FormatUnit) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BTCSignInitRequest_FormatUnit) Descriptor() protoreflect.EnumDescriptor {
	return file_btc_proto_enumTypes[5].Descriptor()
}

func (BTCSignInitRequest_FormatUnit) Type() protoreflect.EnumType {
	return &file_btc_proto_enumTypes[5]
}

func (x BTCSignInitRequest_FormatUnit) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BTCSignInitRequest_FormatUnit.Descriptor instead.
func (BTCSignInitRequest_FormatUnit) EnumDescriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{3, 0}
}

type BTCSignNextResponse_Type int32

const (
	BTCSignNextResponse_INPUT  BTCSignNextResponse_Type = 0
	BTCSignNextResponse_OUTPUT BTCSignNextResponse_Type = 1
	BTCSignNextResponse_DONE   BTCSignNextResponse_Type = 2
	// For the previous transaction at input `index`.
	BTCSignNextResponse_PREVTX_INIT   BTCSignNextResponse_Type = 3
	BTCSignNextResponse_PREVTX_INPUT  BTCSignNextResponse_Type = 4
	BTCSignNextResponse_PREVTX_OUTPUT BTCSignNextResponse_Type = 5
	BTCSignNextResponse_HOST_NONCE    BTCSignNextResponse_Type = 6
)

// Enum value maps for BTCSignNextResponse_Type.
var (
	BTCSignNextResponse_Type_name = map[int32]string{
		0: "INPUT",
		1: "OUTPUT",
		2: "DONE",
		3: "PREVTX_INIT",
		4: "PREVTX_INPUT",
		5: "PREVTX_OUTPUT",
		6: "HOST_NONCE",
	}
	BTCSignNextResponse_Type_value = map[string]int32{
		"INPUT":         0,
		"OUTPUT":        1,
		"DONE":          2,
		"PREVTX_INIT":   3,
		"PREVTX_INPUT":  4,
		"PREVTX_OUTPUT": 5,
		"HOST_NONCE":    6,
	}
)

func (x BTCSignNextResponse_Type) Enum() *BTCSignNextResponse_Type {
	p := new(BTCSignNextResponse_Type)
	*p = x
	return p
}

func (x BTCSignNextResponse_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BTCSignNextResponse_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_btc_proto_enumTypes[6].Descriptor()
}

func (BTCSignNextResponse_Type) Type() protoreflect.EnumType {
	return &file_btc_proto_enumTypes[6]
}

func (x BTCSignNextResponse_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BTCSignNextResponse_Type.Descriptor instead.
func (BTCSignNextResponse_Type) EnumDescriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{4, 0}
}

type BTCRegisterScriptConfigRequest_XPubType int32

const (
	// Automatically choose to match Electrum's xpub format (e.g. Zpub/Vpub for p2wsh multisig mainnet/testnet).
	BTCRegisterScriptConfigRequest_AUTO_ELECTRUM BTCRegisterScriptConfigRequest_XPubType = 0
	// Always xpub for mainnets, tpub for testnets.
	BTCRegisterScriptConfigRequest_AUTO_XPUB_TPUB BTCRegisterScriptConfigRequest_XPubType = 1
)

// Enum value maps for BTCRegisterScriptConfigRequest_XPubType.
var (
	BTCRegisterScriptConfigRequest_XPubType_name = map[int32]string{
		0: "AUTO_ELECTRUM",
		1: "AUTO_XPUB_TPUB",
	}
	BTCRegisterScriptConfigRequest_XPubType_value = map[string]int32{
		"AUTO_ELECTRUM":  0,
		"AUTO_XPUB_TPUB": 1,
	}
)

func (x BTCRegisterScriptConfigRequest_XPubType) Enum() *BTCRegisterScriptConfigRequest_XPubType {
	p := new(BTCRegisterScriptConfigRequest_XPubType)
	*p = x
	return p
}

func (x BTCRegisterScriptConfigRequest_XPubType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BTCRegisterScriptConfigRequest_XPubType) Descriptor() protoreflect.EnumDescriptor {
	return file_btc_proto_enumTypes[7].Descriptor()
}

func (BTCRegisterScriptConfigRequest_XPubType) Type() protoreflect.EnumType {
	return &file_btc_proto_enumTypes[7]
}

func (x BTCRegisterScriptConfigRequest_XPubType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BTCRegisterScriptConfigRequest_XPubType.Descriptor instead.
func (BTCRegisterScriptConfigRequest_XPubType) EnumDescriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{11, 0}
}

type BTCScriptConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Config:
	//
	//	*BTCScriptConfig_SimpleType_
	//	*BTCScriptConfig_Multisig_
	//	*BTCScriptConfig_Policy_
	Config isBTCScriptConfig_Config `protobuf_oneof:"config"`
}

func (x *BTCScriptConfig) Reset() {
	*x = BTCScriptConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCScriptConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCScriptConfig) ProtoMessage() {}

func (x *BTCScriptConfig) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCScriptConfig.ProtoReflect.Descriptor instead.
func (*BTCScriptConfig) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{0}
}

func (m *BTCScriptConfig) GetConfig() isBTCScriptConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *BTCScriptConfig) GetSimpleType() BTCScriptConfig_SimpleType {
	if x, ok := x.GetConfig().(*BTCScriptConfig_SimpleType_); ok {
		return x.SimpleType
	}
	return BTCScriptConfig_P2WPKH_P2SH
}

func (x *BTCScriptConfig) GetMultisig() *BTCScriptConfig_Multisig {
	if x, ok := x.GetConfig().(*BTCScriptConfig_Multisig_); ok {
		return x.Multisig
	}
	return nil
}

func (x *BTCScriptConfig) GetPolicy() *BTCScriptConfig_Policy {
	if x, ok := x.GetConfig().(*BTCScriptConfig_Policy_); ok {
		return x.Policy
	}
	return nil
}

type isBTCScriptConfig_Config interface {
	isBTCScriptConfig_Config()
}

type BTCScriptConfig_SimpleType_ struct {
	SimpleType BTCScriptConfig_SimpleType `protobuf:"varint,1,opt,name=simple_type,json=simpleType,proto3,enum=shiftcrypto.bitbox02.BTCScriptConfig_SimpleType,oneof"`
}

type BTCScriptConfig_Multisig_ struct {
	Multisig *BTCScriptConfig_Multisig `protobuf:"bytes,2,opt,name=multisig,proto3,oneof"`
}

type BTCScriptConfig_Policy_ struct {
	Policy *BTCScriptConfig_Policy `protobuf:"bytes,3,opt,name=policy,proto3,oneof"`
}

func (*BTCScriptConfig_SimpleType_) isBTCScriptConfig_Config() {}

func (*BTCScriptConfig_Multisig_) isBTCScriptConfig_Config() {}

func (*BTCScriptConfig_Policy_) isBTCScriptConfig_Config() {}

type BTCPubRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin    BTCCoin  `protobuf:"varint,1,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.BTCCoin" json:"coin,omitempty"`
	Keypath []uint32 `protobuf:"varint,2,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	// Types that are assignable to Output:
	//
	//	*BTCPubRequest_XpubType
	//	*BTCPubRequest_ScriptConfig
	Output  isBTCPubRequest_Output `protobuf_oneof:"output"`
	Display bool                   `protobuf:"varint,5,opt,name=display,proto3" json:"display,omitempty"`
}

func (x *BTCPubRequest) Reset() {
	*x = BTCPubRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCPubRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCPubRequest) ProtoMessage() {}

func (x *BTCPubRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCPubRequest.ProtoReflect.Descriptor instead.
func (*BTCPubRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{1}
}

func (x *BTCPubRequest) GetCoin() BTCCoin {
	if x != nil {
		return x.Coin
	}
	return BTCCoin_BTC
}

func (x *BTCPubRequest) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (m *BTCPubRequest) GetOutput() isBTCPubRequest_Output {
	if m != nil {
		return m.Output
	}
	return nil
}

func (x *BTCPubRequest) GetXpubType() BTCPubRequest_XPubType {
	if x, ok := x.GetOutput().(*BTCPubRequest_XpubType); ok {
		return x.XpubType
	}
	return BTCPubRequest_TPUB
}

func (x *BTCPubRequest) GetScriptConfig() *BTCScriptConfig {
	if x, ok := x.GetOutput().(*BTCPubRequest_ScriptConfig); ok {
		return x.ScriptConfig
	}
	return nil
}

func (x *BTCPubRequest) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

type isBTCPubRequest_Output interface {
	isBTCPubRequest_Output()
}

type BTCPubRequest_XpubType struct {
	XpubType BTCPubRequest_XPubType `protobuf:"varint,3,opt,name=xpub_type,json=xpubType,proto3,enum=shiftcrypto.bitbox02.BTCPubRequest_XPubType,oneof"`
}

type BTCPubRequest_ScriptConfig struct {
	ScriptConfig *BTCScriptConfig `protobuf:"bytes,4,opt,name=script_config,json=scriptConfig,proto3,oneof"`
}

func (*BTCPubRequest_XpubType) isBTCPubRequest_Output() {}

func (*BTCPubRequest_ScriptConfig) isBTCPubRequest_Output() {}

type BTCScriptConfigWithKeypath struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ScriptConfig *BTCScriptConfig `protobuf:"bytes,2,opt,name=script_config,json=scriptConfig,proto3" json:"script_config,omitempty"`
	Keypath      []uint32         `protobuf:"varint,3,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
}

func (x *BTCScriptConfigWithKeypath) Reset() {
	*x = BTCScriptConfigWithKeypath{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCScriptConfigWithKeypath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCScriptConfigWithKeypath) ProtoMessage() {}

func (x *BTCScriptConfigWithKeypath) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCScriptConfigWithKeypath.ProtoReflect.Descriptor instead.
func (*BTCScriptConfigWithKeypath) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{2}
}

func (x *BTCScriptConfigWithKeypath) GetScriptConfig() *BTCScriptConfig {
	if x != nil {
		return x.ScriptConfig
	}
	return nil
}

func (x *BTCScriptConfigWithKeypath) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

type BTCSignInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin BTCCoin `protobuf:"varint,1,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.BTCCoin" json:"coin,omitempty"`
	// used script configs in inputs and changes
	ScriptConfigs []*BTCScriptConfigWithKeypath `protobuf:"bytes,2,rep,name=script_configs,json=scriptConfigs,proto3" json:"script_configs,omitempty"`
	Version       uint32                        `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"` // must be 1 or 2
	NumInputs     uint32                        `protobuf:"varint,5,opt,name=num_inputs,json=numInputs,proto3" json:"num_inputs,omitempty"`
	NumOutputs    uint32                        `protobuf:"varint,6,opt,name=num_outputs,json=numOutputs,proto3" json:"num_outputs,omitempty"`
	Locktime      uint32                        `protobuf:"varint,7,opt,name=locktime,proto3" json:"locktime,omitempty"` // must be <500000000
	FormatUnit    BTCSignInitRequest_FormatUnit `protobuf:"varint,8,opt,name=format_unit,json=formatUnit,proto3,enum=shiftcrypto.bitbox02.BTCSignInitRequest_FormatUnit" json:"format_unit,omitempty"`
}

func (x *BTCSignInitRequest) Reset() {
	*x = BTCSignInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCSignInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCSignInitRequest) ProtoMessage() {}

func (x *BTCSignInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCSignInitRequest.ProtoReflect.Descriptor instead.
func (*BTCSignInitRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{3}
}

func (x *BTCSignInitRequest) GetCoin() BTCCoin {
	if x != nil {
		return x.Coin
	}
	return BTCCoin_BTC
}

func (x *BTCSignInitRequest) GetScriptConfigs() []*BTCScriptConfigWithKeypath {
	if x != nil {
		return x.ScriptConfigs
	}
	return nil
}

func (x *BTCSignInitRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BTCSignInitRequest) GetNumInputs() uint32 {
	if x != nil {
		return x.NumInputs
	}
	return 0
}

func (x *BTCSignInitRequest) GetNumOutputs() uint32 {
	if x != nil {
		return x.NumOutputs
	}
	return 0
}

func (x *BTCSignInitRequest) GetLocktime() uint32 {
	if x != nil {
		return x.Locktime
	}
	return 0
}

func (x *BTCSignInitRequest) GetFormatUnit() BTCSignInitRequest_FormatUnit {
	if x != nil {
		return x.FormatUnit
	}
	return BTCSignInitRequest_DEFAULT
}

type BTCSignNextResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type BTCSignNextResponse_Type `protobuf:"varint,1,opt,name=type,proto3,enum=shiftcrypto.bitbox02.BTCSignNextResponse_Type" json:"type,omitempty"`
	// index of the current input or output
	Index        uint32 `protobuf:"varint,2,opt,name=index,proto3" json:"index,omitempty"`
	HasSignature bool   `protobuf:"varint,3,opt,name=has_signature,json=hasSignature,proto3" json:"has_signature,omitempty"` // only as a response to BTCSignInputRequest
	// 64 bytes (32 bytes big endian R, 32 bytes big endian S). Only if has_signature is true.
	Signature []byte `protobuf:"bytes,4,opt,name=signature,proto3" json:"signature,omitempty"`
	// Previous tx's input/output index in case of PREV_INPUT or PREV_OUTPUT, for the input at `index`.
	PrevIndex                  uint32                      `protobuf:"varint,5,opt,name=prev_index,json=prevIndex,proto3" json:"prev_index,omitempty"`
	AntiKleptoSignerCommitment *AntiKleptoSignerCommitment `protobuf:"bytes,6,opt,name=anti_klepto_signer_commitment,json=antiKleptoSignerCommitment,proto3" json:"anti_klepto_signer_commitment,omitempty"`
}

func (x *BTCSignNextResponse) Reset() {
	*x = BTCSignNextResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCSignNextResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCSignNextResponse) ProtoMessage() {}

func (x *BTCSignNextResponse) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCSignNextResponse.ProtoReflect.Descriptor instead.
func (*BTCSignNextResponse) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{4}
}

func (x *BTCSignNextResponse) GetType() BTCSignNextResponse_Type {
	if x != nil {
		return x.Type
	}
	return BTCSignNextResponse_INPUT
}

func (x *BTCSignNextResponse) GetIndex() uint32 {
	if x != nil {
		return x.Index
	}
	return 0
}

func (x *BTCSignNextResponse) GetHasSignature() bool {
	if x != nil {
		return x.HasSignature
	}
	return false
}

func (x *BTCSignNextResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

func (x *BTCSignNextResponse) GetPrevIndex() uint32 {
	if x != nil {
		return x.PrevIndex
	}
	return 0
}

func (x *BTCSignNextResponse) GetAntiKleptoSignerCommitment() *AntiKleptoSignerCommitment {
	if x != nil {
		return x.AntiKleptoSignerCommitment
	}
	return nil
}

type BTCSignInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevOutHash  []byte   `protobuf:"bytes,1,opt,name=prevOutHash,proto3" json:"prevOutHash,omitempty"`
	PrevOutIndex uint32   `protobuf:"varint,2,opt,name=prevOutIndex,proto3" json:"prevOutIndex,omitempty"`
	PrevOutValue uint64   `protobuf:"varint,3,opt,name=prevOutValue,proto3" json:"prevOutValue,omitempty"`
	Sequence     uint32   `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`      // must be 0xffffffff-2, 0xffffffff-1 or 0xffffffff
	Keypath      []uint32 `protobuf:"varint,6,rep,packed,name=keypath,proto3" json:"keypath,omitempty"` // all inputs must be ours.
	// References a script config from BTCSignInitRequest
	ScriptConfigIndex   uint32                         `protobuf:"varint,7,opt,name=script_config_index,json=scriptConfigIndex,proto3" json:"script_config_index,omitempty"`
	HostNonceCommitment *AntiKleptoHostNonceCommitment `protobuf:"bytes,8,opt,name=host_nonce_commitment,json=hostNonceCommitment,proto3" json:"host_nonce_commitment,omitempty"`
}

func (x *BTCSignInputRequest) Reset() {
	*x = BTCSignInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCSignInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCSignInputRequest) ProtoMessage() {}

func (x *BTCSignInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCSignInputRequest.ProtoReflect.Descriptor instead.
func (*BTCSignInputRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{5}
}

func (x *BTCSignInputRequest) GetPrevOutHash() []byte {
	if x != nil {
		return x.PrevOutHash
	}
	return nil
}

func (x *BTCSignInputRequest) GetPrevOutIndex() uint32 {
	if x != nil {
		return x.PrevOutIndex
	}
	return 0
}

func (x *BTCSignInputRequest) GetPrevOutValue() uint64 {
	if x != nil {
		return x.PrevOutValue
	}
	return 0
}

func (x *BTCSignInputRequest) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *BTCSignInputRequest) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *BTCSignInputRequest) GetScriptConfigIndex() uint32 {
	if x != nil {
		return x.ScriptConfigIndex
	}
	return 0
}

func (x *BTCSignInputRequest) GetHostNonceCommitment() *AntiKleptoHostNonceCommitment {
	if x != nil {
		return x.HostNonceCommitment
	}
	return nil
}

type BTCSignOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Ours bool          `protobuf:"varint,1,opt,name=ours,proto3" json:"ours,omitempty"`
	Type BTCOutputType `protobuf:"varint,2,opt,name=type,proto3,enum=shiftcrypto.bitbox02.BTCOutputType" json:"type,omitempty"` // if ours is false
	// 20 bytes for p2pkh, p2sh, pw2wpkh. 32 bytes for p2wsh.
	Value   uint64   `protobuf:"varint,3,opt,name=value,proto3" json:"value,omitempty"`
	Payload []byte   `protobuf:"bytes,4,opt,name=payload,proto3" json:"payload,omitempty"`         // if ours is false. Renamed from `hash`.
	Keypath []uint32 `protobuf:"varint,5,rep,packed,name=keypath,proto3" json:"keypath,omitempty"` // if ours is true
	// If ours is true. References a script config from BTCSignInitRequest
	ScriptConfigIndex uint32 `protobuf:"varint,6,opt,name=script_config_index,json=scriptConfigIndex,proto3" json:"script_config_index,omitempty"`
}

func (x *BTCSignOutputRequest) Reset() {
	*x = BTCSignOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCSignOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCSignOutputRequest) ProtoMessage() {}

func (x *BTCSignOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCSignOutputRequest.ProtoReflect.Descriptor instead.
func (*BTCSignOutputRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{6}
}

func (x *BTCSignOutputRequest) GetOurs() bool {
	if x != nil {
		return x.Ours
	}
	return false
}

func (x *BTCSignOutputRequest) GetType() BTCOutputType {
	if x != nil {
		return x.Type
	}
	return BTCOutputType_UNKNOWN
}

func (x *BTCSignOutputRequest) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BTCSignOutputRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

func (x *BTCSignOutputRequest) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *BTCSignOutputRequest) GetScriptConfigIndex() uint32 {
	if x != nil {
		return x.ScriptConfigIndex
	}
	return 0
}

type BTCScriptConfigRegistration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin         BTCCoin          `protobuf:"varint,1,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.BTCCoin" json:"coin,omitempty"`
	ScriptConfig *BTCScriptConfig `protobuf:"bytes,2,opt,name=script_config,json=scriptConfig,proto3" json:"script_config,omitempty"`
	// Unused for policy registrations.
	Keypath []uint32 `protobuf:"varint,3,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
}

func (x *BTCScriptConfigRegistration) Reset() {
	*x = BTCScriptConfigRegistration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCScriptConfigRegistration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCScriptConfigRegistration) ProtoMessage() {}

func (x *BTCScriptConfigRegistration) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCScriptConfigRegistration.ProtoReflect.Descriptor instead.
func (*BTCScriptConfigRegistration) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{7}
}

func (x *BTCScriptConfigRegistration) GetCoin() BTCCoin {
	if x != nil {
		return x.Coin
	}
	return BTCCoin_BTC
}

func (x *BTCScriptConfigRegistration) GetScriptConfig() *BTCScriptConfig {
	if x != nil {
		return x.ScriptConfig
	}
	return nil
}

func (x *BTCScriptConfigRegistration) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

type BTCSuccess struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *BTCSuccess) Reset() {
	*x = BTCSuccess{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCSuccess) ProtoMessage() {}

func (x *BTCSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCSuccess.ProtoReflect.Descriptor instead.
func (*BTCSuccess) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{8}
}

type BTCIsScriptConfigRegisteredRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registration *BTCScriptConfigRegistration `protobuf:"bytes,1,opt,name=registration,proto3" json:"registration,omitempty"`
}

func (x *BTCIsScriptConfigRegisteredRequest) Reset() {
	*x = BTCIsScriptConfigRegisteredRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCIsScriptConfigRegisteredRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCIsScriptConfigRegisteredRequest) ProtoMessage() {}

func (x *BTCIsScriptConfigRegisteredRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCIsScriptConfigRegisteredRequest.ProtoReflect.Descriptor instead.
func (*BTCIsScriptConfigRegisteredRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{9}
}

func (x *BTCIsScriptConfigRegisteredRequest) GetRegistration() *BTCScriptConfigRegistration {
	if x != nil {
		return x.Registration
	}
	return nil
}

type BTCIsScriptConfigRegisteredResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsRegistered bool `protobuf:"varint,1,opt,name=is_registered,json=isRegistered,proto3" json:"is_registered,omitempty"`
}

func (x *BTCIsScriptConfigRegisteredResponse) Reset() {
	*x = BTCIsScriptConfigRegisteredResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCIsScriptConfigRegisteredResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCIsScriptConfigRegisteredResponse) ProtoMessage() {}

func (x *BTCIsScriptConfigRegisteredResponse) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCIsScriptConfigRegisteredResponse.ProtoReflect.Descriptor instead.
func (*BTCIsScriptConfigRegisteredResponse) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{10}
}

func (x *BTCIsScriptConfigRegisteredResponse) GetIsRegistered() bool {
	if x != nil {
		return x.IsRegistered
	}
	return false
}

type BTCRegisterScriptConfigRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Registration *BTCScriptConfigRegistration `protobuf:"bytes,1,opt,name=registration,proto3" json:"registration,omitempty"`
	// If empty, the name is entered on the device instead.
	Name     string                                  `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	XpubType BTCRegisterScriptConfigRequest_XPubType `protobuf:"varint,3,opt,name=xpub_type,json=xpubType,proto3,enum=shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest_XPubType" json:"xpub_type,omitempty"`
}

func (x *BTCRegisterScriptConfigRequest) Reset() {
	*x = BTCRegisterScriptConfigRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCRegisterScriptConfigRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCRegisterScriptConfigRequest) ProtoMessage() {}

func (x *BTCRegisterScriptConfigRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCRegisterScriptConfigRequest.ProtoReflect.Descriptor instead.
func (*BTCRegisterScriptConfigRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{11}
}

func (x *BTCRegisterScriptConfigRequest) GetRegistration() *BTCScriptConfigRegistration {
	if x != nil {
		return x.Registration
	}
	return nil
}

func (x *BTCRegisterScriptConfigRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *BTCRegisterScriptConfigRequest) GetXpubType() BTCRegisterScriptConfigRequest_XPubType {
	if x != nil {
		return x.XpubType
	}
	return BTCRegisterScriptConfigRequest_AUTO_ELECTRUM
}

type BTCPrevTxInitRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version    uint32 `protobuf:"varint,1,opt,name=version,proto3" json:"version,omitempty"`
	NumInputs  uint32 `protobuf:"varint,2,opt,name=num_inputs,json=numInputs,proto3" json:"num_inputs,omitempty"`
	NumOutputs uint32 `protobuf:"varint,3,opt,name=num_outputs,json=numOutputs,proto3" json:"num_outputs,omitempty"`
	Locktime   uint32 `protobuf:"varint,4,opt,name=locktime,proto3" json:"locktime,omitempty"`
}

func (x *BTCPrevTxInitRequest) Reset() {
	*x = BTCPrevTxInitRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCPrevTxInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCPrevTxInitRequest) ProtoMessage() {}

func (x *BTCPrevTxInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCPrevTxInitRequest.ProtoReflect.Descriptor instead.
func (*BTCPrevTxInitRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{12}
}

func (x *BTCPrevTxInitRequest) GetVersion() uint32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *BTCPrevTxInitRequest) GetNumInputs() uint32 {
	if x != nil {
		return x.NumInputs
	}
	return 0
}

func (x *BTCPrevTxInitRequest) GetNumOutputs() uint32 {
	if x != nil {
		return x.NumOutputs
	}
	return 0
}

func (x *BTCPrevTxInitRequest) GetLocktime() uint32 {
	if x != nil {
		return x.Locktime
	}
	return 0
}

type BTCPrevTxInputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PrevOutHash     []byte `protobuf:"bytes,1,opt,name=prev_out_hash,json=prevOutHash,proto3" json:"prev_out_hash,omitempty"`
	PrevOutIndex    uint32 `protobuf:"varint,2,opt,name=prev_out_index,json=prevOutIndex,proto3" json:"prev_out_index,omitempty"`
	SignatureScript []byte `protobuf:"bytes,3,opt,name=signature_script,json=signatureScript,proto3" json:"signature_script,omitempty"`
	Sequence        uint32 `protobuf:"varint,4,opt,name=sequence,proto3" json:"sequence,omitempty"`
}

func (x *BTCPrevTxInputRequest) Reset() {
	*x = BTCPrevTxInputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCPrevTxInputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCPrevTxInputRequest) ProtoMessage() {}

func (x *BTCPrevTxInputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCPrevTxInputRequest.ProtoReflect.Descriptor instead.
func (*BTCPrevTxInputRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{13}
}

func (x *BTCPrevTxInputRequest) GetPrevOutHash() []byte {
	if x != nil {
		return x.PrevOutHash
	}
	return nil
}

func (x *BTCPrevTxInputRequest) GetPrevOutIndex() uint32 {
	if x != nil {
		return x.PrevOutIndex
	}
	return 0
}

func (x *BTCPrevTxInputRequest) GetSignatureScript() []byte {
	if x != nil {
		return x.SignatureScript
	}
	return nil
}

func (x *BTCPrevTxInputRequest) GetSequence() uint32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

type BTCPrevTxOutputRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value        uint64 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
	PubkeyScript []byte `protobuf:"bytes,2,opt,name=pubkey_script,json=pubkeyScript,proto3" json:"pubkey_script,omitempty"`
}

func (x *BTCPrevTxOutputRequest) Reset() {
	*x = BTCPrevTxOutputRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCPrevTxOutputRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCPrevTxOutputRequest) ProtoMessage() {}

func (x *BTCPrevTxOutputRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCPrevTxOutputRequest.ProtoReflect.Descriptor instead.
func (*BTCPrevTxOutputRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{14}
}

func (x *BTCPrevTxOutputRequest) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *BTCPrevTxOutputRequest) GetPubkeyScript() []byte {
	if x != nil {
		return x.PubkeyScript
	}
	return nil
}

type BTCSignMessageRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Coin                BTCCoin                        `protobuf:"varint,1,opt,name=coin,proto3,enum=shiftcrypto.bitbox02.BTCCoin" json:"coin,omitempty"`
	ScriptConfig        *BTCScriptConfigWithKeypath    `protobuf:"bytes,2,opt,name=script_config,json=scriptConfig,proto3" json:"script_config,omitempty"`
	Msg                 []byte                         `protobuf:"bytes,3,opt,name=msg,proto3" json:"msg,omitempty"`
	HostNonceCommitment *AntiKleptoHostNonceCommitment `protobuf:"bytes,4,opt,name=host_nonce_commitment,json=hostNonceCommitment,proto3" json:"host_nonce_commitment,omitempty"`
}

func (x *BTCSignMessageRequest) Reset() {
	*x = BTCSignMessageRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCSignMessageRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCSignMessageRequest) ProtoMessage() {}

func (x *BTCSignMessageRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCSignMessageRequest.ProtoReflect.Descriptor instead.
func (*BTCSignMessageRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{15}
}

func (x *BTCSignMessageRequest) GetCoin() BTCCoin {
	if x != nil {
		return x.Coin
	}
	return BTCCoin_BTC
}

func (x *BTCSignMessageRequest) GetScriptConfig() *BTCScriptConfigWithKeypath {
	if x != nil {
		return x.ScriptConfig
	}
	return nil
}

func (x *BTCSignMessageRequest) GetMsg() []byte {
	if x != nil {
		return x.Msg
	}
	return nil
}

func (x *BTCSignMessageRequest) GetHostNonceCommitment() *AntiKleptoHostNonceCommitment {
	if x != nil {
		return x.HostNonceCommitment
	}
	return nil
}

type BTCSignMessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 65 bytes (32 bytes big endian R, 32 bytes big endian S, 1 recid).
	Signature []byte `protobuf:"bytes,1,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *BTCSignMessageResponse) Reset() {
	*x = BTCSignMessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCSignMessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCSignMessageResponse) ProtoMessage() {}

func (x *BTCSignMessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCSignMessageResponse.ProtoReflect.Descriptor instead.
func (*BTCSignMessageResponse) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{16}
}

func (x *BTCSignMessageResponse) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

type BTCRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*BTCRequest_IsScriptConfigRegistered
	//	*BTCRequest_RegisterScriptConfig
	//	*BTCRequest_PrevtxInit
	//	*BTCRequest_PrevtxInput
	//	*BTCRequest_PrevtxOutput
	//	*BTCRequest_SignMessage
	//	*BTCRequest_AntikleptoSignature
	Request isBTCRequest_Request `protobuf_oneof:"request"`
}

func (x *BTCRequest) Reset() {
	*x = BTCRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCRequest) ProtoMessage() {}

func (x *BTCRequest) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCRequest.ProtoReflect.Descriptor instead.
func (*BTCRequest) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{17}
}

func (m *BTCRequest) GetRequest() isBTCRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *BTCRequest) GetIsScriptConfigRegistered() *BTCIsScriptConfigRegisteredRequest {
	if x, ok := x.GetRequest().(*BTCRequest_IsScriptConfigRegistered); ok {
		return x.IsScriptConfigRegistered
	}
	return nil
}

func (x *BTCRequest) GetRegisterScriptConfig() *BTCRegisterScriptConfigRequest {
	if x, ok := x.GetRequest().(*BTCRequest_RegisterScriptConfig); ok {
		return x.RegisterScriptConfig
	}
	return nil
}

func (x *BTCRequest) GetPrevtxInit() *BTCPrevTxInitRequest {
	if x, ok := x.GetRequest().(*BTCRequest_PrevtxInit); ok {
		return x.PrevtxInit
	}
	return nil
}

func (x *BTCRequest) GetPrevtxInput() *BTCPrevTxInputRequest {
	if x, ok := x.GetRequest().(*BTCRequest_PrevtxInput); ok {
		return x.PrevtxInput
	}
	return nil
}

func (x *BTCRequest) GetPrevtxOutput() *BTCPrevTxOutputRequest {
	if x, ok := x.GetRequest().(*BTCRequest_PrevtxOutput); ok {
		return x.PrevtxOutput
	}
	return nil
}

func (x *BTCRequest) GetSignMessage() *BTCSignMessageRequest {
	if x, ok := x.GetRequest().(*BTCRequest_SignMessage); ok {
		return x.SignMessage
	}
	return nil
}

func (x *BTCRequest) GetAntikleptoSignature() *AntiKleptoSignatureRequest {
	if x, ok := x.GetRequest().(*BTCRequest_AntikleptoSignature); ok {
		return x.AntikleptoSignature
	}
	return nil
}

type isBTCRequest_Request interface {
	isBTCRequest_Request()
}

type BTCRequest_IsScriptConfigRegistered struct {
	IsScriptConfigRegistered *BTCIsScriptConfigRegisteredRequest `protobuf:"bytes,1,opt,name=is_script_config_registered,json=isScriptConfigRegistered,proto3,oneof"`
}

type BTCRequest_RegisterScriptConfig struct {
	RegisterScriptConfig *BTCRegisterScriptConfigRequest `protobuf:"bytes,2,opt,name=register_script_config,json=registerScriptConfig,proto3,oneof"`
}

type BTCRequest_PrevtxInit struct {
	PrevtxInit *BTCPrevTxInitRequest `protobuf:"bytes,3,opt,name=prevtx_init,json=prevtxInit,proto3,oneof"`
}

type BTCRequest_PrevtxInput struct {
	PrevtxInput *BTCPrevTxInputRequest `protobuf:"bytes,4,opt,name=prevtx_input,json=prevtxInput,proto3,oneof"`
}

type BTCRequest_PrevtxOutput struct {
	PrevtxOutput *BTCPrevTxOutputRequest `protobuf:"bytes,5,opt,name=prevtx_output,json=prevtxOutput,proto3,oneof"`
}

type BTCRequest_SignMessage struct {
	SignMessage *BTCSignMessageRequest `protobuf:"bytes,6,opt,name=sign_message,json=signMessage,proto3,oneof"`
}

type BTCRequest_AntikleptoSignature struct {
	AntikleptoSignature *AntiKleptoSignatureRequest `protobuf:"bytes,7,opt,name=antiklepto_signature,json=antikleptoSignature,proto3,oneof"`
}

func (*BTCRequest_IsScriptConfigRegistered) isBTCRequest_Request() {}

func (*BTCRequest_RegisterScriptConfig) isBTCRequest_Request() {}

func (*BTCRequest_PrevtxInit) isBTCRequest_Request() {}

func (*BTCRequest_PrevtxInput) isBTCRequest_Request() {}

func (*BTCRequest_PrevtxOutput) isBTCRequest_Request() {}

func (*BTCRequest_SignMessage) isBTCRequest_Request() {}

func (*BTCRequest_AntikleptoSignature) isBTCRequest_Request() {}

type BTCResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*BTCResponse_Success
	//	*BTCResponse_IsScriptConfigRegistered
	//	*BTCResponse_SignNext
	//	*BTCResponse_SignMessage
	//	*BTCResponse_AntikleptoSignerCommitment
	Response isBTCResponse_Response `protobuf_oneof:"response"`
}

func (x *BTCResponse) Reset() {
	*x = BTCResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCResponse) ProtoMessage() {}

func (x *BTCResponse) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCResponse.ProtoReflect.Descriptor instead.
func (*BTCResponse) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{18}
}

func (m *BTCResponse) GetResponse() isBTCResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *BTCResponse) GetSuccess() *BTCSuccess {
	if x, ok := x.GetResponse().(*BTCResponse_Success); ok {
		return x.Success
	}
	return nil
}

func (x *BTCResponse) GetIsScriptConfigRegistered() *BTCIsScriptConfigRegisteredResponse {
	if x, ok := x.GetResponse().(*BTCResponse_IsScriptConfigRegistered); ok {
		return x.IsScriptConfigRegistered
	}
	return nil
}

func (x *BTCResponse) GetSignNext() *BTCSignNextResponse {
	if x, ok := x.GetResponse().(*BTCResponse_SignNext); ok {
		return x.SignNext
	}
	return nil
}

func (x *BTCResponse) GetSignMessage() *BTCSignMessageResponse {
	if x, ok := x.GetResponse().(*BTCResponse_SignMessage); ok {
		return x.SignMessage
	}
	return nil
}

func (x *BTCResponse) GetAntikleptoSignerCommitment() *AntiKleptoSignerCommitment {
	if x, ok := x.GetResponse().(*BTCResponse_AntikleptoSignerCommitment); ok {
		return x.AntikleptoSignerCommitment
	}
	return nil
}

type isBTCResponse_Response interface {
	isBTCResponse_Response()
}

type BTCResponse_Success struct {
	Success *BTCSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type BTCResponse_IsScriptConfigRegistered struct {
	IsScriptConfigRegistered *BTCIsScriptConfigRegisteredResponse `protobuf:"bytes,2,opt,name=is_script_config_registered,json=isScriptConfigRegistered,proto3,oneof"`
}

type BTCResponse_SignNext struct {
	SignNext *BTCSignNextResponse `protobuf:"bytes,3,opt,name=sign_next,json=signNext,proto3,oneof"`
}

type BTCResponse_SignMessage struct {
	SignMessage *BTCSignMessageResponse `protobuf:"bytes,4,opt,name=sign_message,json=signMessage,proto3,oneof"`
}

type BTCResponse_AntikleptoSignerCommitment struct {
	AntikleptoSignerCommitment *AntiKleptoSignerCommitment `protobuf:"bytes,5,opt,name=antiklepto_signer_commitment,json=antikleptoSignerCommitment,proto3,oneof"`
}

func (*BTCResponse_Success) isBTCResponse_Response() {}

func (*BTCResponse_IsScriptConfigRegistered) isBTCResponse_Response() {}

func (*BTCResponse_SignNext) isBTCResponse_Response() {}

func (*BTCResponse_SignMessage) isBTCResponse_Response() {}

func (*BTCResponse_AntikleptoSignerCommitment) isBTCResponse_Response() {}

type BTCScriptConfig_Multisig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Threshold uint32 `protobuf:"varint,1,opt,name=threshold,proto3" json:"threshold,omitempty"`
	// xpubs are acount-level xpubs. Addresses are going to be derived from it using: m/<change>/<receive>.
	// The number of xpubs defines the number of cosigners.
	Xpubs []*XPub `protobuf:"bytes,2,rep,name=xpubs,proto3" json:"xpubs,omitempty"`
	// Index to the xpub of our keystore in xpubs. The keypath to it is provided via
	// BTCPubRequest/BTCSignInit.
	OurXpubIndex uint32                              `protobuf:"varint,3,opt,name=our_xpub_index,json=ourXpubIndex,proto3" json:"our_xpub_index,omitempty"`
	ScriptType   BTCScriptConfig_Multisig_ScriptType `protobuf:"varint,4,opt,name=script_type,json=scriptType,proto3,enum=shiftcrypto.bitbox02.BTCScriptConfig_Multisig_ScriptType" json:"script_type,omitempty"`
}

func (x *BTCScriptConfig_Multisig) Reset() {
	*x = BTCScriptConfig_Multisig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCScriptConfig_Multisig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCScriptConfig_Multisig) ProtoMessage() {}

func (x *BTCScriptConfig_Multisig) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCScriptConfig_Multisig.ProtoReflect.Descriptor instead.
func (*BTCScriptConfig_Multisig) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{0, 0}
}

func (x *BTCScriptConfig_Multisig) GetThreshold() uint32 {
	if x != nil {
		return x.Threshold
	}
	return 0
}

func (x *BTCScriptConfig_Multisig) GetXpubs() []*XPub {
	if x != nil {
		return x.Xpubs
	}
	return nil
}

func (x *BTCScriptConfig_Multisig) GetOurXpubIndex() uint32 {
	if x != nil {
		return x.OurXpubIndex
	}
	return 0
}

func (x *BTCScriptConfig_Multisig) GetScriptType() BTCScriptConfig_Multisig_ScriptType {
	if x != nil {
		return x.ScriptType
	}
	return BTCScriptConfig_Multisig_P2WSH
}

// A policy as specified by 'Wallet policies':
// https://github.com/bitcoin/bips/pull/1389
type BTCScriptConfig_Policy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Policy string           `protobuf:"bytes,1,opt,name=policy,proto3" json:"policy,omitempty"`
	Keys   []*KeyOriginInfo `protobuf:"bytes,2,rep,name=keys,proto3" json:"keys,omitempty"`
}

func (x *BTCScriptConfig_Policy) Reset() {
	*x = BTCScriptConfig_Policy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_btc_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BTCScriptConfig_Policy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BTCScriptConfig_Policy) ProtoMessage() {}

func (x *BTCScriptConfig_Policy) ProtoReflect() protoreflect.Message {
	mi := &file_btc_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BTCScriptConfig_Policy.ProtoReflect.Descriptor instead.
func (*BTCScriptConfig_Policy) Descriptor() ([]byte, []int) {
	return file_btc_proto_rawDescGZIP(), []int{0, 1}
}

func (x *BTCScriptConfig_Policy) GetPolicy() string {
	if x != nil {
		return x.Policy
	}
	return ""
}

func (x *BTCScriptConfig_Policy) GetKeys() []*KeyOriginInfo {
	if x != nil {
		return x.Keys
	}
	return nil
}

var File_btc_proto protoreflect.FileDescriptor

var file_btc_proto_rawDesc = []byte{
	0x0a, 0x09, 0x62, 0x74, 0x63, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x10, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x22, 0x9e, 0x05, 0x0a, 0x0f, 0x42, 0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x53, 0x0a, 0x0b, 0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x5f,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x48, 0x00, 0x52, 0x0a,
	0x73, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f,
	0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x48, 0x00, 0x52, 0x08,
	0x6d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x46, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e,
	0x42, 0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x50, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x48, 0x00, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79,
	0x1a, 0x85, 0x02, 0x0a, 0x08, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x12, 0x1c, 0x0a,
	0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x74, 0x68, 0x72, 0x65, 0x73, 0x68, 0x6f, 0x6c, 0x64, 0x12, 0x30, 0x0a, 0x05, 0x78,
	0x70, 0x75, 0x62, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x2e, 0x58, 0x50, 0x75, 0x62, 0x52, 0x05, 0x78, 0x70, 0x75, 0x62, 0x73, 0x12, 0x24, 0x0a,
	0x0e, 0x6f, 0x75, 0x72, 0x5f, 0x78, 0x70, 0x75, 0x62, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x6f, 0x75, 0x72, 0x58, 0x70, 0x75, 0x62, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x12, 0x5a, 0x0a, 0x0b, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x39, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e,
	0x42, 0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x73, 0x69, 0x67, 0x2e, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x0a, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22,
	0x27, 0x0a, 0x0a, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a,
	0x05, 0x50, 0x32, 0x57, 0x53, 0x48, 0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x32, 0x57, 0x53,
	0x48, 0x5f, 0x50, 0x32, 0x53, 0x48, 0x10, 0x01, 0x1a, 0x59, 0x0a, 0x06, 0x50, 0x6f, 0x6c, 0x69,
	0x63, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x12, 0x37, 0x0a, 0x04, 0x6b, 0x65,
	0x79, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e,
	0x4b, 0x65, 0x79, 0x4f, 0x72, 0x69, 0x67, 0x69, 0x6e, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x6b,
	0x65, 0x79, 0x73, 0x22, 0x33, 0x0a, 0x0a, 0x53, 0x69, 0x6d, 0x70, 0x6c, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x32, 0x57, 0x50, 0x4b, 0x48, 0x5f, 0x50, 0x32, 0x53, 0x48,
	0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x32, 0x57, 0x50, 0x4b, 0x48, 0x10, 0x01, 0x12, 0x08,
	0x0a, 0x04, 0x50, 0x32, 0x54, 0x52, 0x10, 0x02, 0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x22, 0xac, 0x03, 0x0a, 0x0d, 0x42, 0x54, 0x43, 0x50, 0x75, 0x62, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x43, 0x6f, 0x69,
	0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61,
	0x74, 0x68, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74,
	0x68, 0x12, 0x4b, 0x0a, 0x09, 0x78, 0x70, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x50,
	0x75, 0x62, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x58, 0x50, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x48, 0x00, 0x52, 0x08, 0x78, 0x70, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x4c,
	0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x48, 0x00, 0x52, 0x0c,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64,
	0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x22, 0x8e, 0x01, 0x0a, 0x08, 0x58, 0x50, 0x75, 0x62, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x50, 0x55, 0x42, 0x10, 0x00, 0x12, 0x08, 0x0a,
	0x04, 0x58, 0x50, 0x55, 0x42, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x59, 0x50, 0x55, 0x42, 0x10,
	0x02, 0x12, 0x08, 0x0a, 0x04, 0x5a, 0x50, 0x55, 0x42, 0x10, 0x03, 0x12, 0x08, 0x0a, 0x04, 0x56,
	0x50, 0x55, 0x42, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x55, 0x50, 0x55, 0x42, 0x10, 0x05, 0x12,
	0x10, 0x0a, 0x0c, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x56, 0x50, 0x55, 0x42, 0x10,
	0x06, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x5a, 0x50, 0x55,
	0x42, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41, 0x4c, 0x5f, 0x55,
	0x50, 0x55, 0x42, 0x10, 0x08, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x41, 0x50, 0x49, 0x54, 0x41, 0x4c,
	0x5f, 0x59, 0x50, 0x55, 0x42, 0x10, 0x09, 0x42, 0x08, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x22, 0x82, 0x01, 0x0a, 0x1a, 0x42, 0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68,
	0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42,
	0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x18, 0x0a, 0x07,
	0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6b,
	0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x22, 0x90, 0x03, 0x0a, 0x12, 0x42, 0x54, 0x43, 0x53, 0x69,
	0x67, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x12, 0x57, 0x0a, 0x0e, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e,
	0x42, 0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57,
	0x69, 0x74, 0x68, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x0d, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x75, 0x74, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x12,
	0x54, 0x0a, 0x0b, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x5f, 0x75, 0x6e, 0x69, 0x74, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x53,
	0x69, 0x67, 0x6e, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x55, 0x6e, 0x69, 0x74, 0x52, 0x0a, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x55, 0x6e, 0x69, 0x74, 0x22, 0x22, 0x0a, 0x0a, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x55,
	0x6e, 0x69, 0x74, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x45, 0x46, 0x41, 0x55, 0x4c, 0x54, 0x10, 0x00,
	0x12, 0x07, 0x0a, 0x03, 0x53, 0x41, 0x54, 0x10, 0x01, 0x22, 0xb5, 0x03, 0x0a, 0x13, 0x42, 0x54,
	0x43, 0x53, 0x69, 0x67, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x42, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x2e, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69,
	0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x4e, 0x65,
	0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x23, 0x0a, 0x0d, 0x68,
	0x61, 0x73, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x12, 0x1d,
	0x0a, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x70, 0x72, 0x65, 0x76, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x73, 0x0a,
	0x1d, 0x61, 0x6e, 0x74, 0x69, 0x5f, 0x6b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x41, 0x6e, 0x74, 0x69,
	0x4b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x1a, 0x61, 0x6e, 0x74, 0x69, 0x4b, 0x6c, 0x65, 0x70,
	0x74, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0x6d, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x09, 0x0a, 0x05, 0x49, 0x4e,
	0x50, 0x55, 0x54, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10,
	0x01, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x4f, 0x4e, 0x45, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x50,
	0x52, 0x45, 0x56, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x49, 0x54, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c,
	0x50, 0x52, 0x45, 0x56, 0x54, 0x58, 0x5f, 0x49, 0x4e, 0x50, 0x55, 0x54, 0x10, 0x04, 0x12, 0x11,
	0x0a, 0x0d, 0x50, 0x52, 0x45, 0x56, 0x54, 0x58, 0x5f, 0x4f, 0x55, 0x54, 0x50, 0x55, 0x54, 0x10,
	0x05, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x4f, 0x53, 0x54, 0x5f, 0x4e, 0x4f, 0x4e, 0x43, 0x45, 0x10,
	0x06, 0x22, 0xce, 0x02, 0x0a, 0x13, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x49, 0x6e, 0x70,
	0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x65,
	0x76, 0x4f, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b,
	0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x22, 0x0a, 0x0c, 0x70,
	0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12,
	0x22, 0x0a, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64, 0x65, 0x78, 0x12, 0x67, 0x0a, 0x15, 0x68, 0x6f, 0x73,
	0x74, 0x5f, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e,
	0x41, 0x6e, 0x74, 0x69, 0x4b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x68,
	0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65,
	0x6e, 0x74, 0x22, 0xdd, 0x01, 0x0a, 0x14, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x04, 0x6f, 0x75, 0x72, 0x73, 0x12,
	0x37, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62,
	0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x2e, 0x0a, 0x13, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x11, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x22, 0xb6, 0x01, 0x0a, 0x1b, 0x42, 0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62,
	0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x43, 0x6f, 0x69, 0x6e, 0x52,
	0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x4a, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f,
	0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x03, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x22, 0x0c, 0x0a, 0x0a, 0x42,
	0x54, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x22, 0x7b, 0x0a, 0x22, 0x42, 0x54, 0x43,
	0x49, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x55, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43,
	0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x4a, 0x0a, 0x23, 0x42, 0x54, 0x43, 0x49, 0x73, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x69, 0x73, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x69, 0x73, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x65, 0x64, 0x22, 0x9a, 0x02, 0x0a, 0x1e, 0x42, 0x54, 0x43, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x0c, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x5a, 0x0a, 0x09, 0x78, 0x70, 0x75, 0x62, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x3d, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x52, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x58, 0x50, 0x75, 0x62, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x08, 0x78, 0x70, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x22, 0x31, 0x0a, 0x08,
	0x58, 0x50, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x55, 0x54, 0x4f,
	0x5f, 0x45, 0x4c, 0x45, 0x43, 0x54, 0x52, 0x55, 0x4d, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41,
	0x55, 0x54, 0x4f, 0x5f, 0x58, 0x50, 0x55, 0x42, 0x5f, 0x54, 0x50, 0x55, 0x42, 0x10, 0x01, 0x22,
	0x8c, 0x01, 0x0a, 0x14, 0x42, 0x54, 0x43, 0x50, 0x72, 0x65, 0x76, 0x54, 0x78, 0x49, 0x6e, 0x69,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x6e, 0x75, 0x6d, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x6e, 0x75, 0x6d, 0x49, 0x6e, 0x70, 0x75, 0x74,
	0x73, 0x12, 0x1f, 0x0a, 0x0b, 0x6e, 0x75, 0x6d, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x6e, 0x75, 0x6d, 0x4f, 0x75, 0x74, 0x70, 0x75,
	0x74, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x6c, 0x6f, 0x63, 0x6b, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa8,
	0x01, 0x0a, 0x15, 0x42, 0x54, 0x43, 0x50, 0x72, 0x65, 0x76, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75,
	0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76,
	0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x0b, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a, 0x0e,
	0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x49, 0x6e, 0x64,
	0x65, 0x78, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x69,
	0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x12, 0x1a, 0x0a,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x22, 0x53, 0x0a, 0x16, 0x42, 0x54, 0x43,
	0x50, 0x72, 0x65, 0x76, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x23, 0x0a, 0x0d, 0x70, 0x75, 0x62,
	0x6b, 0x65, 0x79, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0c, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x22, 0x9c,
	0x02, 0x0a, 0x15, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x31, 0x0a, 0x04, 0x63, 0x6f, 0x69, 0x6e,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54,
	0x43, 0x43, 0x6f, 0x69, 0x6e, 0x52, 0x04, 0x63, 0x6f, 0x69, 0x6e, 0x12, 0x55, 0x0a, 0x0d, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x63, 0x72,
	0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x57, 0x69, 0x74, 0x68, 0x4b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x52,
	0x03, 0x6d, 0x73, 0x67, 0x12, 0x67, 0x0a, 0x15, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x6e, 0x6f, 0x6e,
	0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x4b,
	0x6c, 0x65, 0x70, 0x74, 0x6f, 0x48, 0x6f, 0x73, 0x74, 0x4e, 0x6f, 0x6e, 0x63, 0x65, 0x43, 0x6f,
	0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x52, 0x13, 0x68, 0x6f, 0x73, 0x74, 0x4e, 0x6f,
	0x6e, 0x63, 0x65, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x22, 0x36, 0x0a,
	0x16, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61,
	0x74, 0x75, 0x72, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0xaf, 0x05, 0x0a, 0x0a, 0x42, 0x54, 0x43, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x79, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x38, 0x2e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32,
	0x2e, 0x42, 0x54, 0x43, 0x49, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x18, 0x69, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x12,
	0x6c, 0x0a, 0x16, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x34, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69,
	0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x14, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4d, 0x0a,
	0x0b, 0x70, 0x72, 0x65, 0x76, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x50, 0x72, 0x65,
	0x76, 0x54, 0x78, 0x49, 0x6e, 0x69, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00,
	0x52, 0x0a, 0x70, 0x72, 0x65, 0x76, 0x74, 0x78, 0x49, 0x6e, 0x69, 0x74, 0x12, 0x50, 0x0a, 0x0c,
	0x70, 0x72, 0x65, 0x76, 0x74, 0x78, 0x5f, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f,
	0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x50, 0x72, 0x65,
	0x76, 0x54, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48,
	0x00, 0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x74, 0x78, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12, 0x53,
	0x0a, 0x0d, 0x70, 0x72, 0x65, 0x76, 0x74, 0x78, 0x5f, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43,
	0x50, 0x72, 0x65, 0x76, 0x54, 0x78, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x74, 0x78, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x12, 0x50, 0x0a, 0x0c, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x68, 0x69, 0x66,
	0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32,
	0x2e, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x65, 0x0a, 0x14, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x6c, 0x65,
	0x70, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x41, 0x6e, 0x74, 0x69, 0x4b,
	0x6c, 0x65, 0x70, 0x74, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x13, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x6c, 0x65,
	0x70, 0x74, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42, 0x09, 0x0a, 0x07,
	0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xe6, 0x03, 0x0a, 0x0b, 0x42, 0x54, 0x43, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3c, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74,
	0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e,
	0x42, 0x54, 0x43, 0x53, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x48, 0x00, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x7a, 0x0a, 0x1b, 0x69, 0x73, 0x5f, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x65, 0x72, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x39, 0x2e, 0x73, 0x68, 0x69,
	0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30,
	0x32, 0x2e, 0x42, 0x54, 0x43, 0x49, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x18, 0x69, 0x73, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x65,
	0x64, 0x12, 0x48, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x5f, 0x6e, 0x65, 0x78, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x53,
	0x69, 0x67, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x08, 0x73, 0x69, 0x67, 0x6e, 0x4e, 0x65, 0x78, 0x74, 0x12, 0x51, 0x0a, 0x0c, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x2c, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x42, 0x54, 0x43, 0x53, 0x69, 0x67, 0x6e,
	0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48,
	0x00, 0x52, 0x0b, 0x73, 0x69, 0x67, 0x6e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x74,
	0x0a, 0x1c, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x5f, 0x73, 0x69, 0x67,
	0x6e, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x41, 0x6e, 0x74, 0x69,
	0x4b, 0x6c, 0x65, 0x70, 0x74, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d,
	0x69, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x48, 0x00, 0x52, 0x1a, 0x61, 0x6e, 0x74, 0x69, 0x6b, 0x6c,
	0x65, 0x70, 0x74, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x6d, 0x65, 0x6e, 0x74, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2a, 0x2f, 0x0a, 0x07, 0x42, 0x54, 0x43, 0x43, 0x6f, 0x69, 0x6e, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x54, 0x43, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x42, 0x54, 0x43, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x4c, 0x54, 0x43, 0x10, 0x02, 0x12, 0x08, 0x0a, 0x04, 0x54, 0x4c, 0x54, 0x43, 0x10,
	0x03, 0x2a, 0x52, 0x0a, 0x0d, 0x42, 0x54, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12,
	0x09, 0x0a, 0x05, 0x50, 0x32, 0x50, 0x4b, 0x48, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x50, 0x32,
	0x53, 0x48, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x32, 0x57, 0x50, 0x4b, 0x48, 0x10, 0x03,
	0x12, 0x09, 0x0a, 0x05, 0x50, 0x32, 0x57, 0x53, 0x48, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x50,
	0x32, 0x54, 0x52, 0x10, 0x05, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_btc_proto_rawDescOnce sync.Once
	file_btc_proto_rawDescData = file_btc_proto_rawDesc
)

func file_btc_proto_rawDescGZIP() []byte {
	file_btc_proto_rawDescOnce.Do(func() {
		file_btc_proto_rawDescData = protoimpl.X.CompressGZIP(file_btc_proto_rawDescData)
	})
	return file_btc_proto_rawDescData
}

var file_btc_proto_enumTypes = make([]protoimpl.EnumInfo, 8)
var file_btc_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_btc_proto_goTypes = []interface{}{
	(BTCCoin)(0),                                 // 0: shiftcrypto.bitbox02.BTCCoin
	(BTCOutputType)(0),                           // 1: shiftcrypto.bitbox02.BTCOutputType
	(BTCScriptConfig_SimpleType)(0),              // 2: shiftcrypto.bitbox02.BTCScriptConfig.SimpleType
	(BTCScriptConfig_Multisig_ScriptType)(0),     // 3: shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType
	(BTCPubRequest_XPubType)(0),                  // 4: shiftcrypto.bitbox02.BTCPubRequest.XPubType
	(BTCSignInitRequest_FormatUnit)(0),           // 5: shiftcrypto.bitbox02.BTCSignInitRequest.FormatUnit
	(BTCSignNextResponse_Type)(0),                // 6: shiftcrypto.bitbox02.BTCSignNextResponse.Type
	(BTCRegisterScriptConfigRequest_XPubType)(0), // 7: shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType
	(*BTCScriptConfig)(nil),                      // 8: shiftcrypto.bitbox02.BTCScriptConfig
	(*BTCPubRequest)(nil),                        // 9: shiftcrypto.bitbox02.BTCPubRequest
	(*BTCScriptConfigWithKeypath)(nil),           // 10: shiftcrypto.bitbox02.BTCScriptConfigWithKeypath
	(*BTCSignInitRequest)(nil),                   // 11: shiftcrypto.bitbox02.BTCSignInitRequest
	(*BTCSignNextResponse)(nil),                  // 12: shiftcrypto.bitbox02.BTCSignNextResponse
	(*BTCSignInputRequest)(nil),                  // 13: shiftcrypto.bitbox02.BTCSignInputRequest
	(*BTCSignOutputRequest)(nil),                 // 14: shiftcrypto.bitbox02.BTCSignOutputRequest
	(*BTCScriptConfigRegistration)(nil),          // 15: shiftcrypto.bitbox02.BTCScriptConfigRegistration
	(*BTCSuccess)(nil),                           // 16: shiftcrypto.bitbox02.BTCSuccess
	(*BTCIsScriptConfigRegisteredRequest)(nil),   // 17: shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest
	(*BTCIsScriptConfigRegisteredResponse)(nil),  // 18: shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse
	(*BTCRegisterScriptConfigRequest)(nil),       // 19: shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest
	(*BTCPrevTxInitRequest)(nil),                 // 20: shiftcrypto.bitbox02.BTCPrevTxInitRequest
	(*BTCPrevTxInputRequest)(nil),                // 21: shiftcrypto.bitbox02.BTCPrevTxInputRequest
	(*BTCPrevTxOutputRequest)(nil),               // 22: shiftcrypto.bitbox02.BTCPrevTxOutputRequest
	(*BTCSignMessageRequest)(nil),                // 23: shiftcrypto.bitbox02.BTCSignMessageRequest
	(*BTCSignMessageResponse)(nil),               // 24: shiftcrypto.bitbox02.BTCSignMessageResponse
	(*BTCRequest)(nil),                           // 25: shiftcrypto.bitbox02.BTCRequest
	(*BTCResponse)(nil),                          // 26: shiftcrypto.bitbox02.BTCResponse
	(*BTCScriptConfig_Multisig)(nil),             // 27: shiftcrypto.bitbox02.BTCScriptConfig.Multisig
	(*BTCScriptConfig_Policy)(nil),               // 28: shiftcrypto.bitbox02.BTCScriptConfig.Policy
	(*AntiKleptoSignerCommitment)(nil),           // 29: shiftcrypto.bitbox02.AntiKleptoSignerCommitment
	(*AntiKleptoHostNonceCommitment)(nil),        // 30: shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment
	(*AntiKleptoSignatureRequest)(nil),           // 31: shiftcrypto.bitbox02.AntiKleptoSignatureRequest
	(*XPub)(nil),                                 // 32: shiftcrypto.bitbox02.XPub
	(*KeyOriginInfo)(nil),                        // 33: shiftcrypto.bitbox02.KeyOriginInfo
}
var file_btc_proto_depIdxs = []int32{
	2,  // 0: shiftcrypto.bitbox02.BTCScriptConfig.simple_type:type_name -> shiftcrypto.bitbox02.BTCScriptConfig.SimpleType
	27, // 1: shiftcrypto.bitbox02.BTCScriptConfig.multisig:type_name -> shiftcrypto.bitbox02.BTCScriptConfig.Multisig
	28, // 2: shiftcrypto.bitbox02.BTCScriptConfig.policy:type_name -> shiftcrypto.bitbox02.BTCScriptConfig.Policy
	0,  // 3: shiftcrypto.bitbox02.BTCPubRequest.coin:type_name -> shiftcrypto.bitbox02.BTCCoin
	4,  // 4: shiftcrypto.bitbox02.BTCPubRequest.xpub_type:type_name -> shiftcrypto.bitbox02.BTCPubRequest.XPubType
	8,  // 5: shiftcrypto.bitbox02.BTCPubRequest.script_config:type_name -> shiftcrypto.bitbox02.BTCScriptConfig
	8,  // 6: shiftcrypto.bitbox02.BTCScriptConfigWithKeypath.script_config:type_name -> shiftcrypto.bitbox02.BTCScriptConfig
	0,  // 7: shiftcrypto.bitbox02.BTCSignInitRequest.coin:type_name -> shiftcrypto.bitbox02.BTCCoin
	10, // 8: shiftcrypto.bitbox02.BTCSignInitRequest.script_configs:type_name -> shiftcrypto.bitbox02.BTCScriptConfigWithKeypath
	5,  // 9: shiftcrypto.bitbox02.BTCSignInitRequest.format_unit:type_name -> shiftcrypto.bitbox02.BTCSignInitRequest.FormatUnit
	6,  // 10: shiftcrypto.bitbox02.BTCSignNextResponse.type:type_name -> shiftcrypto.bitbox02.BTCSignNextResponse.Type
	29, // 11: shiftcrypto.bitbox02.BTCSignNextResponse.anti_klepto_signer_commitment:type_name -> shiftcrypto.bitbox02.AntiKleptoSignerCommitment
	30, // 12: shiftcrypto.bitbox02.BTCSignInputRequest.host_nonce_commitment:type_name -> shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment
	1,  // 13: shiftcrypto.bitbox02.BTCSignOutputRequest.type:type_name -> shiftcrypto.bitbox02.BTCOutputType
	0,  // 14: shiftcrypto.bitbox02.BTCScriptConfigRegistration.coin:type_name -> shiftcrypto.bitbox02.BTCCoin
	8,  // 15: shiftcrypto.bitbox02.BTCScriptConfigRegistration.script_config:type_name -> shiftcrypto.bitbox02.BTCScriptConfig
	15, // 16: shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest.registration:type_name -> shiftcrypto.bitbox02.BTCScriptConfigRegistration
	15, // 17: shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.registration:type_name -> shiftcrypto.bitbox02.BTCScriptConfigRegistration
	7,  // 18: shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.xpub_type:type_name -> shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest.XPubType
	0,  // 19: shiftcrypto.bitbox02.BTCSignMessageRequest.coin:type_name -> shiftcrypto.bitbox02.BTCCoin
	10, // 20: shiftcrypto.bitbox02.BTCSignMessageRequest.script_config:type_name -> shiftcrypto.bitbox02.BTCScriptConfigWithKeypath
	30, // 21: shiftcrypto.bitbox02.BTCSignMessageRequest.host_nonce_commitment:type_name -> shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment
	17, // 22: shiftcrypto.bitbox02.BTCRequest.is_script_config_registered:type_name -> shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredRequest
	19, // 23: shiftcrypto.bitbox02.BTCRequest.register_script_config:type_name -> shiftcrypto.bitbox02.BTCRegisterScriptConfigRequest
	20, // 24: shiftcrypto.bitbox02.BTCRequest.prevtx_init:type_name -> shiftcrypto.bitbox02.BTCPrevTxInitRequest
	21, // 25: shiftcrypto.bitbox02.BTCRequest.prevtx_input:type_name -> shiftcrypto.bitbox02.BTCPrevTxInputRequest
	22, // 26: shiftcrypto.bitbox02.BTCRequest.prevtx_output:type_name -> shiftcrypto.bitbox02.BTCPrevTxOutputRequest
	23, // 27: shiftcrypto.bitbox02.BTCRequest.sign_message:type_name -> shiftcrypto.bitbox02.BTCSignMessageRequest
	31, // 28: shiftcrypto.bitbox02.BTCRequest.antiklepto_signature:type_name -> shiftcrypto.bitbox02.AntiKleptoSignatureRequest
	16, // 29: shiftcrypto.bitbox02.BTCResponse.success:type_name -> shiftcrypto.bitbox02.BTCSuccess
	18, // 30: shiftcrypto.bitbox02.BTCResponse.is_script_config_registered:type_name -> shiftcrypto.bitbox02.BTCIsScriptConfigRegisteredResponse
	12, // 31: shiftcrypto.bitbox02.BTCResponse.sign_next:type_name -> shiftcrypto.bitbox02.BTCSignNextResponse
	24, // 32: shiftcrypto.bitbox02.BTCResponse.sign_message:type_name -> shiftcrypto.bitbox02.BTCSignMessageResponse
	29, // 33: shiftcrypto.bitbox02.BTCResponse.antiklepto_signer_commitment:type_name -> shiftcrypto.bitbox02.AntiKleptoSignerCommitment
	32, // 34: shiftcrypto.bitbox02.BTCScriptConfig.Multisig.xpubs:type_name -> shiftcrypto.bitbox02.XPub
	3,  // 35: shiftcrypto.bitbox02.BTCScriptConfig.Multisig.script_type:type_name -> shiftcrypto.bitbox02.BTCScriptConfig.Multisig.ScriptType
	33, // 36: shiftcrypto.bitbox02.BTCScriptConfig.Policy.keys:type_name -> shiftcrypto.bitbox02.KeyOriginInfo
	37, // [37:37] is the sub-list for method output_type
	37, // [37:37] is the sub-list for method input_type
	37, // [37:37] is the sub-list for extension type_name
	37, // [37:37] is the sub-list for extension extendee
	0,  // [0:37] is the sub-list for field type_name
}

func init() { file_btc_proto_init() }
func file_btc_proto_init() {
	if File_btc_proto != nil {
		return
	}
	file_common_proto_init()
	file_antiklepto_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_btc_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCScriptConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCPubRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCScriptConfigWithKeypath); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCSignInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCSignNextResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCSignInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCSignOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCScriptConfigRegistration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCSuccess); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCIsScriptConfigRegisteredRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCIsScriptConfigRegisteredResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCRegisterScriptConfigRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCPrevTxInitRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCPrevTxInputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCPrevTxOutputRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCSignMessageRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCSignMessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCScriptConfig_Multisig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_btc_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BTCScriptConfig_Policy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_btc_proto_msgTypes[0].OneofWrappers = []interface{}{
		(*BTCScriptConfig_SimpleType_)(nil),
		(*BTCScriptConfig_Multisig_)(nil),
		(*BTCScriptConfig_Policy_)(nil),
	}
	file_btc_proto_msgTypes[1].OneofWrappers = []interface{}{
		(*BTCPubRequest_XpubType)(nil),
		(*BTCPubRequest_ScriptConfig)(nil),
	}
	file_btc_proto_msgTypes[17].OneofWrappers = []interface{}{
		(*BTCRequest_IsScriptConfigRegistered)(nil),
		(*BTCRequest_RegisterScriptConfig)(nil),
		(*BTCRequest_PrevtxInit)(nil),
		(*BTCRequest_PrevtxInput)(nil),
		(*BTCRequest_PrevtxOutput)(nil),
		(*BTCRequest_SignMessage)(nil),
		(*BTCRequest_AntikleptoSignature)(nil),
	}
	file_btc_proto_msgTypes[18].OneofWrappers = []interface{}{
		(*BTCResponse_Success)(nil),
		(*BTCResponse_IsScriptConfigRegistered)(nil),
		(*BTCResponse_SignNext)(nil),
		(*BTCResponse_SignMessage)(nil),
		(*BTCResponse_AntikleptoSignerCommitment)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_btc_proto_rawDesc,
			NumEnums:      8,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_btc_proto_goTypes,
		DependencyIndexes: file_btc_proto_depIdxs,
		EnumInfos:         file_btc_proto_enumTypes,
		MessageInfos:      file_btc_proto_msgTypes,
	}.Build()
	File_btc_proto = out.File
	file_btc_proto_rawDesc = nil
	file_btc_proto_goTypes = nil
	file_btc_proto_depIdxs = nil
}
