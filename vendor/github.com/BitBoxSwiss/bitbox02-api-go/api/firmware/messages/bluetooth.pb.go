// Copyright 2025 Shift Crypto AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: bluetooth.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type BluetoothToggleEnabledRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BluetoothToggleEnabledRequest) Reset() {
	*x = BluetoothToggleEnabledRequest{}
	mi := &file_bluetooth_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BluetoothToggleEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothToggleEnabledRequest) ProtoMessage() {}

func (x *BluetoothToggleEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothToggleEnabledRequest.ProtoReflect.Descriptor instead.
func (*BluetoothToggleEnabledRequest) Descriptor() ([]byte, []int) {
	return file_bluetooth_proto_rawDescGZIP(), []int{0}
}

type BluetoothUpgradeInitRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	FirmwareLength uint32                 `protobuf:"varint,1,opt,name=firmware_length,json=firmwareLength,proto3" json:"firmware_length,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *BluetoothUpgradeInitRequest) Reset() {
	*x = BluetoothUpgradeInitRequest{}
	mi := &file_bluetooth_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BluetoothUpgradeInitRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothUpgradeInitRequest) ProtoMessage() {}

func (x *BluetoothUpgradeInitRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothUpgradeInitRequest.ProtoReflect.Descriptor instead.
func (*BluetoothUpgradeInitRequest) Descriptor() ([]byte, []int) {
	return file_bluetooth_proto_rawDescGZIP(), []int{1}
}

func (x *BluetoothUpgradeInitRequest) GetFirmwareLength() uint32 {
	if x != nil {
		return x.FirmwareLength
	}
	return 0
}

type BluetoothChunkRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Data          []byte                 `protobuf:"bytes,1,opt,name=data,proto3" json:"data,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BluetoothChunkRequest) Reset() {
	*x = BluetoothChunkRequest{}
	mi := &file_bluetooth_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BluetoothChunkRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothChunkRequest) ProtoMessage() {}

func (x *BluetoothChunkRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothChunkRequest.ProtoReflect.Descriptor instead.
func (*BluetoothChunkRequest) Descriptor() ([]byte, []int) {
	return file_bluetooth_proto_rawDescGZIP(), []int{2}
}

func (x *BluetoothChunkRequest) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type BluetoothSuccess struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BluetoothSuccess) Reset() {
	*x = BluetoothSuccess{}
	mi := &file_bluetooth_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BluetoothSuccess) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothSuccess) ProtoMessage() {}

func (x *BluetoothSuccess) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothSuccess.ProtoReflect.Descriptor instead.
func (*BluetoothSuccess) Descriptor() ([]byte, []int) {
	return file_bluetooth_proto_rawDescGZIP(), []int{3}
}

type BluetoothRequestChunkResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Offset        uint32                 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	Length        uint32                 `protobuf:"varint,2,opt,name=length,proto3" json:"length,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BluetoothRequestChunkResponse) Reset() {
	*x = BluetoothRequestChunkResponse{}
	mi := &file_bluetooth_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BluetoothRequestChunkResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothRequestChunkResponse) ProtoMessage() {}

func (x *BluetoothRequestChunkResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothRequestChunkResponse.ProtoReflect.Descriptor instead.
func (*BluetoothRequestChunkResponse) Descriptor() ([]byte, []int) {
	return file_bluetooth_proto_rawDescGZIP(), []int{4}
}

func (x *BluetoothRequestChunkResponse) GetOffset() uint32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *BluetoothRequestChunkResponse) GetLength() uint32 {
	if x != nil {
		return x.Length
	}
	return 0
}

type BluetoothRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Request:
	//
	//	*BluetoothRequest_UpgradeInit
	//	*BluetoothRequest_Chunk
	//	*BluetoothRequest_ToggleEnabled
	Request       isBluetoothRequest_Request `protobuf_oneof:"request"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BluetoothRequest) Reset() {
	*x = BluetoothRequest{}
	mi := &file_bluetooth_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BluetoothRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothRequest) ProtoMessage() {}

func (x *BluetoothRequest) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothRequest.ProtoReflect.Descriptor instead.
func (*BluetoothRequest) Descriptor() ([]byte, []int) {
	return file_bluetooth_proto_rawDescGZIP(), []int{5}
}

func (x *BluetoothRequest) GetRequest() isBluetoothRequest_Request {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *BluetoothRequest) GetUpgradeInit() *BluetoothUpgradeInitRequest {
	if x != nil {
		if x, ok := x.Request.(*BluetoothRequest_UpgradeInit); ok {
			return x.UpgradeInit
		}
	}
	return nil
}

func (x *BluetoothRequest) GetChunk() *BluetoothChunkRequest {
	if x != nil {
		if x, ok := x.Request.(*BluetoothRequest_Chunk); ok {
			return x.Chunk
		}
	}
	return nil
}

func (x *BluetoothRequest) GetToggleEnabled() *BluetoothToggleEnabledRequest {
	if x != nil {
		if x, ok := x.Request.(*BluetoothRequest_ToggleEnabled); ok {
			return x.ToggleEnabled
		}
	}
	return nil
}

type isBluetoothRequest_Request interface {
	isBluetoothRequest_Request()
}

type BluetoothRequest_UpgradeInit struct {
	UpgradeInit *BluetoothUpgradeInitRequest `protobuf:"bytes,1,opt,name=upgrade_init,json=upgradeInit,proto3,oneof"`
}

type BluetoothRequest_Chunk struct {
	Chunk *BluetoothChunkRequest `protobuf:"bytes,2,opt,name=chunk,proto3,oneof"`
}

type BluetoothRequest_ToggleEnabled struct {
	ToggleEnabled *BluetoothToggleEnabledRequest `protobuf:"bytes,3,opt,name=toggle_enabled,json=toggleEnabled,proto3,oneof"`
}

func (*BluetoothRequest_UpgradeInit) isBluetoothRequest_Request() {}

func (*BluetoothRequest_Chunk) isBluetoothRequest_Request() {}

func (*BluetoothRequest_ToggleEnabled) isBluetoothRequest_Request() {}

type BluetoothResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Types that are valid to be assigned to Response:
	//
	//	*BluetoothResponse_Success
	//	*BluetoothResponse_RequestChunk
	Response      isBluetoothResponse_Response `protobuf_oneof:"response"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *BluetoothResponse) Reset() {
	*x = BluetoothResponse{}
	mi := &file_bluetooth_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BluetoothResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BluetoothResponse) ProtoMessage() {}

func (x *BluetoothResponse) ProtoReflect() protoreflect.Message {
	mi := &file_bluetooth_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BluetoothResponse.ProtoReflect.Descriptor instead.
func (*BluetoothResponse) Descriptor() ([]byte, []int) {
	return file_bluetooth_proto_rawDescGZIP(), []int{6}
}

func (x *BluetoothResponse) GetResponse() isBluetoothResponse_Response {
	if x != nil {
		return x.Response
	}
	return nil
}

func (x *BluetoothResponse) GetSuccess() *BluetoothSuccess {
	if x != nil {
		if x, ok := x.Response.(*BluetoothResponse_Success); ok {
			return x.Success
		}
	}
	return nil
}

func (x *BluetoothResponse) GetRequestChunk() *BluetoothRequestChunkResponse {
	if x != nil {
		if x, ok := x.Response.(*BluetoothResponse_RequestChunk); ok {
			return x.RequestChunk
		}
	}
	return nil
}

type isBluetoothResponse_Response interface {
	isBluetoothResponse_Response()
}

type BluetoothResponse_Success struct {
	Success *BluetoothSuccess `protobuf:"bytes,1,opt,name=success,proto3,oneof"`
}

type BluetoothResponse_RequestChunk struct {
	RequestChunk *BluetoothRequestChunkResponse `protobuf:"bytes,2,opt,name=request_chunk,json=requestChunk,proto3,oneof"`
}

func (*BluetoothResponse_Success) isBluetoothResponse_Response() {}

func (*BluetoothResponse_RequestChunk) isBluetoothResponse_Response() {}

var File_bluetooth_proto protoreflect.FileDescriptor

const file_bluetooth_proto_rawDesc = "" +
	"\n" +
	"\x0fbluetooth.proto\x12\x14shiftcrypto.bitbox02\"\x1f\n" +
	"\x1dBluetoothToggleEnabledRequest\"F\n" +
	"\x1bBluetoothUpgradeInitRequest\x12'\n" +
	"\x0ffirmware_length\x18\x01 \x01(\rR\x0efirmwareLength\"+\n" +
	"\x15BluetoothChunkRequest\x12\x12\n" +
	"\x04data\x18\x01 \x01(\fR\x04data\"\x12\n" +
	"\x10BluetoothSuccess\"O\n" +
	"\x1dBluetoothRequestChunkResponse\x12\x16\n" +
	"\x06offset\x18\x01 \x01(\rR\x06offset\x12\x16\n" +
	"\x06length\x18\x02 \x01(\rR\x06length\"\x98\x02\n" +
	"\x10BluetoothRequest\x12V\n" +
	"\fupgrade_init\x18\x01 \x01(\v21.shiftcrypto.bitbox02.BluetoothUpgradeInitRequestH\x00R\vupgradeInit\x12C\n" +
	"\x05chunk\x18\x02 \x01(\v2+.shiftcrypto.bitbox02.BluetoothChunkRequestH\x00R\x05chunk\x12\\\n" +
	"\x0etoggle_enabled\x18\x03 \x01(\v23.shiftcrypto.bitbox02.BluetoothToggleEnabledRequestH\x00R\rtoggleEnabledB\t\n" +
	"\arequest\"\xbf\x01\n" +
	"\x11BluetoothResponse\x12B\n" +
	"\asuccess\x18\x01 \x01(\v2&.shiftcrypto.bitbox02.BluetoothSuccessH\x00R\asuccess\x12Z\n" +
	"\rrequest_chunk\x18\x02 \x01(\v23.shiftcrypto.bitbox02.BluetoothRequestChunkResponseH\x00R\frequestChunkB\n" +
	"\n" +
	"\bresponseb\x06proto3"

var (
	file_bluetooth_proto_rawDescOnce sync.Once
	file_bluetooth_proto_rawDescData []byte
)

func file_bluetooth_proto_rawDescGZIP() []byte {
	file_bluetooth_proto_rawDescOnce.Do(func() {
		file_bluetooth_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_bluetooth_proto_rawDesc), len(file_bluetooth_proto_rawDesc)))
	})
	return file_bluetooth_proto_rawDescData
}

var file_bluetooth_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_bluetooth_proto_goTypes = []any{
	(*BluetoothToggleEnabledRequest)(nil), // 0: shiftcrypto.bitbox02.BluetoothToggleEnabledRequest
	(*BluetoothUpgradeInitRequest)(nil),   // 1: shiftcrypto.bitbox02.BluetoothUpgradeInitRequest
	(*BluetoothChunkRequest)(nil),         // 2: shiftcrypto.bitbox02.BluetoothChunkRequest
	(*BluetoothSuccess)(nil),              // 3: shiftcrypto.bitbox02.BluetoothSuccess
	(*BluetoothRequestChunkResponse)(nil), // 4: shiftcrypto.bitbox02.BluetoothRequestChunkResponse
	(*BluetoothRequest)(nil),              // 5: shiftcrypto.bitbox02.BluetoothRequest
	(*BluetoothResponse)(nil),             // 6: shiftcrypto.bitbox02.BluetoothResponse
}
var file_bluetooth_proto_depIdxs = []int32{
	1, // 0: shiftcrypto.bitbox02.BluetoothRequest.upgrade_init:type_name -> shiftcrypto.bitbox02.BluetoothUpgradeInitRequest
	2, // 1: shiftcrypto.bitbox02.BluetoothRequest.chunk:type_name -> shiftcrypto.bitbox02.BluetoothChunkRequest
	0, // 2: shiftcrypto.bitbox02.BluetoothRequest.toggle_enabled:type_name -> shiftcrypto.bitbox02.BluetoothToggleEnabledRequest
	3, // 3: shiftcrypto.bitbox02.BluetoothResponse.success:type_name -> shiftcrypto.bitbox02.BluetoothSuccess
	4, // 4: shiftcrypto.bitbox02.BluetoothResponse.request_chunk:type_name -> shiftcrypto.bitbox02.BluetoothRequestChunkResponse
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { file_bluetooth_proto_init() }
func file_bluetooth_proto_init() {
	if File_bluetooth_proto != nil {
		return
	}
	file_bluetooth_proto_msgTypes[5].OneofWrappers = []any{
		(*BluetoothRequest_UpgradeInit)(nil),
		(*BluetoothRequest_Chunk)(nil),
		(*BluetoothRequest_ToggleEnabled)(nil),
	}
	file_bluetooth_proto_msgTypes[6].OneofWrappers = []any{
		(*BluetoothResponse_Success)(nil),
		(*BluetoothResponse_RequestChunk)(nil),
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_bluetooth_proto_rawDesc), len(file_bluetooth_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_bluetooth_proto_goTypes,
		DependencyIndexes: file_bluetooth_proto_depIdxs,
		MessageInfos:      file_bluetooth_proto_msgTypes,
	}.Build()
	File_bluetooth_proto = out.File
	file_bluetooth_proto_goTypes = nil
	file_bluetooth_proto_depIdxs = nil
}
