// Copyright 2021 Shift Crypto AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.34.2
// 	protoc        v3.21.12
// source: cardano.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CardanoNetwork int32

const (
	CardanoNetwork_CardanoMainnet CardanoNetwork = 0
	CardanoNetwork_CardanoTestnet CardanoNetwork = 1
)

// Enum value maps for CardanoNetwork.
var (
	CardanoNetwork_name = map[int32]string{
		0: "CardanoMainnet",
		1: "CardanoTestnet",
	}
	CardanoNetwork_value = map[string]int32{
		"CardanoMainnet": 0,
		"CardanoTestnet": 1,
	}
)

func (x CardanoNetwork) Enum() *CardanoNetwork {
	p := new(CardanoNetwork)
	*p = x
	return p
}

func (x CardanoNetwork) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoNetwork) Descriptor() protoreflect.EnumDescriptor {
	return file_cardano_proto_enumTypes[0].Descriptor()
}

func (CardanoNetwork) Type() protoreflect.EnumType {
	return &file_cardano_proto_enumTypes[0]
}

func (x CardanoNetwork) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardanoNetwork.Descriptor instead.
func (CardanoNetwork) EnumDescriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{0}
}

type CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType int32

const (
	CardanoSignTransactionRequest_Certificate_VoteDelegation_KEY_HASH             CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType = 0
	CardanoSignTransactionRequest_Certificate_VoteDelegation_SCRIPT_HASH          CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType = 1
	CardanoSignTransactionRequest_Certificate_VoteDelegation_ALWAYS_ABSTAIN       CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType = 2
	CardanoSignTransactionRequest_Certificate_VoteDelegation_ALWAYS_NO_CONFIDENCE CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType = 3
)

// Enum value maps for CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType.
var (
	CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType_name = map[int32]string{
		0: "KEY_HASH",
		1: "SCRIPT_HASH",
		2: "ALWAYS_ABSTAIN",
		3: "ALWAYS_NO_CONFIDENCE",
	}
	CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType_value = map[string]int32{
		"KEY_HASH":             0,
		"SCRIPT_HASH":          1,
		"ALWAYS_ABSTAIN":       2,
		"ALWAYS_NO_CONFIDENCE": 3,
	}
)

func (x CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType) Enum() *CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType {
	p := new(CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType)
	*p = x
	return p
}

func (x CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType) Descriptor() protoreflect.EnumDescriptor {
	return file_cardano_proto_enumTypes[1].Descriptor()
}

func (CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType) Type() protoreflect.EnumType {
	return &file_cardano_proto_enumTypes[1]
}

func (x CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType.Descriptor instead.
func (CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType) EnumDescriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{4, 3, 1, 0}
}

type CardanoXpubsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keypaths []*Keypath `protobuf:"bytes,1,rep,name=keypaths,proto3" json:"keypaths,omitempty"`
}

func (x *CardanoXpubsRequest) Reset() {
	*x = CardanoXpubsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoXpubsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoXpubsRequest) ProtoMessage() {}

func (x *CardanoXpubsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoXpubsRequest.ProtoReflect.Descriptor instead.
func (*CardanoXpubsRequest) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{0}
}

func (x *CardanoXpubsRequest) GetKeypaths() []*Keypath {
	if x != nil {
		return x.Keypaths
	}
	return nil
}

type CardanoXpubsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Xpubs [][]byte `protobuf:"bytes,1,rep,name=xpubs,proto3" json:"xpubs,omitempty"`
}

func (x *CardanoXpubsResponse) Reset() {
	*x = CardanoXpubsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoXpubsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoXpubsResponse) ProtoMessage() {}

func (x *CardanoXpubsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoXpubsResponse.ProtoReflect.Descriptor instead.
func (*CardanoXpubsResponse) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{1}
}

func (x *CardanoXpubsResponse) GetXpubs() [][]byte {
	if x != nil {
		return x.Xpubs
	}
	return nil
}

type CardanoScriptConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entries correspond to address types as described in:
	// https://github.com/cardano-foundation/CIPs/blob/6c249ef48f8f5b32efc0ec768fadf4321f3173f2/CIP-0019/CIP-0019.md
	// See also:
	// https://github.com/input-output-hk/cardano-ledger-specs/blob/d0aa86ded0b973b09b629e5aa62aa1e71364d088/eras/alonzo/test-suite/cddl-files/alonzo.cddl#L137
	//
	// Types that are assignable to Config:
	//
	//	*CardanoScriptConfig_PkhSkh_
	Config isCardanoScriptConfig_Config `protobuf_oneof:"config"`
}

func (x *CardanoScriptConfig) Reset() {
	*x = CardanoScriptConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoScriptConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoScriptConfig) ProtoMessage() {}

func (x *CardanoScriptConfig) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoScriptConfig.ProtoReflect.Descriptor instead.
func (*CardanoScriptConfig) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{2}
}

func (m *CardanoScriptConfig) GetConfig() isCardanoScriptConfig_Config {
	if m != nil {
		return m.Config
	}
	return nil
}

func (x *CardanoScriptConfig) GetPkhSkh() *CardanoScriptConfig_PkhSkh {
	if x, ok := x.GetConfig().(*CardanoScriptConfig_PkhSkh_); ok {
		return x.PkhSkh
	}
	return nil
}

type isCardanoScriptConfig_Config interface {
	isCardanoScriptConfig_Config()
}

type CardanoScriptConfig_PkhSkh_ struct {
	// Shelley PaymentKeyHash & StakeKeyHash
	PkhSkh *CardanoScriptConfig_PkhSkh `protobuf:"bytes,1,opt,name=pkh_skh,json=pkhSkh,proto3,oneof"`
}

func (*CardanoScriptConfig_PkhSkh_) isCardanoScriptConfig_Config() {}

type CardanoAddressRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network      CardanoNetwork       `protobuf:"varint,1,opt,name=network,proto3,enum=shiftcrypto.bitbox02.CardanoNetwork" json:"network,omitempty"`
	Display      bool                 `protobuf:"varint,2,opt,name=display,proto3" json:"display,omitempty"`
	ScriptConfig *CardanoScriptConfig `protobuf:"bytes,3,opt,name=script_config,json=scriptConfig,proto3" json:"script_config,omitempty"`
}

func (x *CardanoAddressRequest) Reset() {
	*x = CardanoAddressRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoAddressRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoAddressRequest) ProtoMessage() {}

func (x *CardanoAddressRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoAddressRequest.ProtoReflect.Descriptor instead.
func (*CardanoAddressRequest) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{3}
}

func (x *CardanoAddressRequest) GetNetwork() CardanoNetwork {
	if x != nil {
		return x.Network
	}
	return CardanoNetwork_CardanoMainnet
}

func (x *CardanoAddressRequest) GetDisplay() bool {
	if x != nil {
		return x.Display
	}
	return false
}

func (x *CardanoAddressRequest) GetScriptConfig() *CardanoScriptConfig {
	if x != nil {
		return x.ScriptConfig
	}
	return nil
}

// Max allowed transaction size is 16384 bytes according to
// https://github.com/cardano-foundation/CIPs/blob/master/CIP-0009/CIP-0009.md. Unlike with BTC, we
// can fit the whole request in RAM and don't need to stream.
//
// See also: https://github.com/input-output-hk/cardano-ledger-specs/blob/d0aa86ded0b973b09b629e5aa62aa1e71364d088/eras/alonzo/test-suite/cddl-files/alonzo.cddl#L50
type CardanoSignTransactionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Network               CardanoNetwork                               `protobuf:"varint,1,opt,name=network,proto3,enum=shiftcrypto.bitbox02.CardanoNetwork" json:"network,omitempty"`
	Inputs                []*CardanoSignTransactionRequest_Input       `protobuf:"bytes,2,rep,name=inputs,proto3" json:"inputs,omitempty"`
	Outputs               []*CardanoSignTransactionRequest_Output      `protobuf:"bytes,3,rep,name=outputs,proto3" json:"outputs,omitempty"`
	Fee                   uint64                                       `protobuf:"varint,4,opt,name=fee,proto3" json:"fee,omitempty"`
	Ttl                   uint64                                       `protobuf:"varint,5,opt,name=ttl,proto3" json:"ttl,omitempty"`
	Certificates          []*CardanoSignTransactionRequest_Certificate `protobuf:"bytes,6,rep,name=certificates,proto3" json:"certificates,omitempty"`
	Withdrawals           []*CardanoSignTransactionRequest_Withdrawal  `protobuf:"bytes,7,rep,name=withdrawals,proto3" json:"withdrawals,omitempty"`
	ValidityIntervalStart uint64                                       `protobuf:"varint,8,opt,name=validity_interval_start,json=validityIntervalStart,proto3" json:"validity_interval_start,omitempty"`
	AllowZeroTtl          bool                                         `protobuf:"varint,9,opt,name=allow_zero_ttl,json=allowZeroTtl,proto3" json:"allow_zero_ttl,omitempty"` // include ttl even if it is zero
	// Tag arrays in the transaction serialization with the 258 tag.
	// See https://github.com/IntersectMBO/cardano-ledger/blob/6e2d37cc0f47bd02e89b4ce9f78b59c35c958e96/eras/conway/impl/cddl-files/extra.cddl#L5
	TagCborSets bool `protobuf:"varint,10,opt,name=tag_cbor_sets,json=tagCborSets,proto3" json:"tag_cbor_sets,omitempty"`
}

func (x *CardanoSignTransactionRequest) Reset() {
	*x = CardanoSignTransactionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionRequest) ProtoMessage() {}

func (x *CardanoSignTransactionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionRequest.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionRequest) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{4}
}

func (x *CardanoSignTransactionRequest) GetNetwork() CardanoNetwork {
	if x != nil {
		return x.Network
	}
	return CardanoNetwork_CardanoMainnet
}

func (x *CardanoSignTransactionRequest) GetInputs() []*CardanoSignTransactionRequest_Input {
	if x != nil {
		return x.Inputs
	}
	return nil
}

func (x *CardanoSignTransactionRequest) GetOutputs() []*CardanoSignTransactionRequest_Output {
	if x != nil {
		return x.Outputs
	}
	return nil
}

func (x *CardanoSignTransactionRequest) GetFee() uint64 {
	if x != nil {
		return x.Fee
	}
	return 0
}

func (x *CardanoSignTransactionRequest) GetTtl() uint64 {
	if x != nil {
		return x.Ttl
	}
	return 0
}

func (x *CardanoSignTransactionRequest) GetCertificates() []*CardanoSignTransactionRequest_Certificate {
	if x != nil {
		return x.Certificates
	}
	return nil
}

func (x *CardanoSignTransactionRequest) GetWithdrawals() []*CardanoSignTransactionRequest_Withdrawal {
	if x != nil {
		return x.Withdrawals
	}
	return nil
}

func (x *CardanoSignTransactionRequest) GetValidityIntervalStart() uint64 {
	if x != nil {
		return x.ValidityIntervalStart
	}
	return 0
}

func (x *CardanoSignTransactionRequest) GetAllowZeroTtl() bool {
	if x != nil {
		return x.AllowZeroTtl
	}
	return false
}

func (x *CardanoSignTransactionRequest) GetTagCborSets() bool {
	if x != nil {
		return x.TagCborSets
	}
	return false
}

type CardanoSignTransactionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ShelleyWitnesses []*CardanoSignTransactionResponse_ShelleyWitness `protobuf:"bytes,1,rep,name=shelley_witnesses,json=shelleyWitnesses,proto3" json:"shelley_witnesses,omitempty"`
}

func (x *CardanoSignTransactionResponse) Reset() {
	*x = CardanoSignTransactionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionResponse) ProtoMessage() {}

func (x *CardanoSignTransactionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionResponse.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionResponse) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{5}
}

func (x *CardanoSignTransactionResponse) GetShelleyWitnesses() []*CardanoSignTransactionResponse_ShelleyWitness {
	if x != nil {
		return x.ShelleyWitnesses
	}
	return nil
}

type CardanoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Request:
	//
	//	*CardanoRequest_Xpubs
	//	*CardanoRequest_Address
	//	*CardanoRequest_SignTransaction
	Request isCardanoRequest_Request `protobuf_oneof:"request"`
}

func (x *CardanoRequest) Reset() {
	*x = CardanoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoRequest) ProtoMessage() {}

func (x *CardanoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoRequest.ProtoReflect.Descriptor instead.
func (*CardanoRequest) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{6}
}

func (m *CardanoRequest) GetRequest() isCardanoRequest_Request {
	if m != nil {
		return m.Request
	}
	return nil
}

func (x *CardanoRequest) GetXpubs() *CardanoXpubsRequest {
	if x, ok := x.GetRequest().(*CardanoRequest_Xpubs); ok {
		return x.Xpubs
	}
	return nil
}

func (x *CardanoRequest) GetAddress() *CardanoAddressRequest {
	if x, ok := x.GetRequest().(*CardanoRequest_Address); ok {
		return x.Address
	}
	return nil
}

func (x *CardanoRequest) GetSignTransaction() *CardanoSignTransactionRequest {
	if x, ok := x.GetRequest().(*CardanoRequest_SignTransaction); ok {
		return x.SignTransaction
	}
	return nil
}

type isCardanoRequest_Request interface {
	isCardanoRequest_Request()
}

type CardanoRequest_Xpubs struct {
	Xpubs *CardanoXpubsRequest `protobuf:"bytes,1,opt,name=xpubs,proto3,oneof"`
}

type CardanoRequest_Address struct {
	Address *CardanoAddressRequest `protobuf:"bytes,2,opt,name=address,proto3,oneof"`
}

type CardanoRequest_SignTransaction struct {
	SignTransaction *CardanoSignTransactionRequest `protobuf:"bytes,3,opt,name=sign_transaction,json=signTransaction,proto3,oneof"`
}

func (*CardanoRequest_Xpubs) isCardanoRequest_Request() {}

func (*CardanoRequest_Address) isCardanoRequest_Request() {}

func (*CardanoRequest_SignTransaction) isCardanoRequest_Request() {}

type CardanoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Response:
	//
	//	*CardanoResponse_Xpubs
	//	*CardanoResponse_Pub
	//	*CardanoResponse_SignTransaction
	Response isCardanoResponse_Response `protobuf_oneof:"response"`
}

func (x *CardanoResponse) Reset() {
	*x = CardanoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoResponse) ProtoMessage() {}

func (x *CardanoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoResponse.ProtoReflect.Descriptor instead.
func (*CardanoResponse) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{7}
}

func (m *CardanoResponse) GetResponse() isCardanoResponse_Response {
	if m != nil {
		return m.Response
	}
	return nil
}

func (x *CardanoResponse) GetXpubs() *CardanoXpubsResponse {
	if x, ok := x.GetResponse().(*CardanoResponse_Xpubs); ok {
		return x.Xpubs
	}
	return nil
}

func (x *CardanoResponse) GetPub() *PubResponse {
	if x, ok := x.GetResponse().(*CardanoResponse_Pub); ok {
		return x.Pub
	}
	return nil
}

func (x *CardanoResponse) GetSignTransaction() *CardanoSignTransactionResponse {
	if x, ok := x.GetResponse().(*CardanoResponse_SignTransaction); ok {
		return x.SignTransaction
	}
	return nil
}

type isCardanoResponse_Response interface {
	isCardanoResponse_Response()
}

type CardanoResponse_Xpubs struct {
	Xpubs *CardanoXpubsResponse `protobuf:"bytes,1,opt,name=xpubs,proto3,oneof"`
}

type CardanoResponse_Pub struct {
	Pub *PubResponse `protobuf:"bytes,2,opt,name=pub,proto3,oneof"`
}

type CardanoResponse_SignTransaction struct {
	SignTransaction *CardanoSignTransactionResponse `protobuf:"bytes,3,opt,name=sign_transaction,json=signTransaction,proto3,oneof"`
}

func (*CardanoResponse_Xpubs) isCardanoResponse_Response() {}

func (*CardanoResponse_Pub) isCardanoResponse_Response() {}

func (*CardanoResponse_SignTransaction) isCardanoResponse_Response() {}

type CardanoScriptConfig_PkhSkh struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	KeypathPayment []uint32 `protobuf:"varint,1,rep,packed,name=keypath_payment,json=keypathPayment,proto3" json:"keypath_payment,omitempty"`
	KeypathStake   []uint32 `protobuf:"varint,2,rep,packed,name=keypath_stake,json=keypathStake,proto3" json:"keypath_stake,omitempty"`
}

func (x *CardanoScriptConfig_PkhSkh) Reset() {
	*x = CardanoScriptConfig_PkhSkh{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoScriptConfig_PkhSkh) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoScriptConfig_PkhSkh) ProtoMessage() {}

func (x *CardanoScriptConfig_PkhSkh) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoScriptConfig_PkhSkh.ProtoReflect.Descriptor instead.
func (*CardanoScriptConfig_PkhSkh) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{2, 0}
}

func (x *CardanoScriptConfig_PkhSkh) GetKeypathPayment() []uint32 {
	if x != nil {
		return x.KeypathPayment
	}
	return nil
}

func (x *CardanoScriptConfig_PkhSkh) GetKeypathStake() []uint32 {
	if x != nil {
		return x.KeypathStake
	}
	return nil
}

type CardanoSignTransactionRequest_Input struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keypath      []uint32 `protobuf:"varint,1,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	PrevOutHash  []byte   `protobuf:"bytes,2,opt,name=prev_out_hash,json=prevOutHash,proto3" json:"prev_out_hash,omitempty"`
	PrevOutIndex uint32   `protobuf:"varint,3,opt,name=prev_out_index,json=prevOutIndex,proto3" json:"prev_out_index,omitempty"`
}

func (x *CardanoSignTransactionRequest_Input) Reset() {
	*x = CardanoSignTransactionRequest_Input{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionRequest_Input) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionRequest_Input) ProtoMessage() {}

func (x *CardanoSignTransactionRequest_Input) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionRequest_Input.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionRequest_Input) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{4, 0}
}

func (x *CardanoSignTransactionRequest_Input) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *CardanoSignTransactionRequest_Input) GetPrevOutHash() []byte {
	if x != nil {
		return x.PrevOutHash
	}
	return nil
}

func (x *CardanoSignTransactionRequest_Input) GetPrevOutIndex() uint32 {
	if x != nil {
		return x.PrevOutIndex
	}
	return 0
}

// https://github.com/input-output-hk/cardano-ledger/blob/d0aa86ded0b973b09b629e5aa62aa1e71364d088/eras/alonzo/test-suite/cddl-files/alonzo.cddl#L358
type CardanoSignTransactionRequest_AssetGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PolicyId []byte                                            `protobuf:"bytes,1,opt,name=policy_id,json=policyId,proto3" json:"policy_id,omitempty"`
	Tokens   []*CardanoSignTransactionRequest_AssetGroup_Token `protobuf:"bytes,2,rep,name=tokens,proto3" json:"tokens,omitempty"`
}

func (x *CardanoSignTransactionRequest_AssetGroup) Reset() {
	*x = CardanoSignTransactionRequest_AssetGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionRequest_AssetGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionRequest_AssetGroup) ProtoMessage() {}

func (x *CardanoSignTransactionRequest_AssetGroup) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionRequest_AssetGroup.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionRequest_AssetGroup) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{4, 1}
}

func (x *CardanoSignTransactionRequest_AssetGroup) GetPolicyId() []byte {
	if x != nil {
		return x.PolicyId
	}
	return nil
}

func (x *CardanoSignTransactionRequest_AssetGroup) GetTokens() []*CardanoSignTransactionRequest_AssetGroup_Token {
	if x != nil {
		return x.Tokens
	}
	return nil
}

type CardanoSignTransactionRequest_Output struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EncodedAddress string `protobuf:"bytes,1,opt,name=encoded_address,json=encodedAddress,proto3" json:"encoded_address,omitempty"`
	Value          uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
	// Optional. If provided, this is validated as a change output.
	ScriptConfig *CardanoScriptConfig                        `protobuf:"bytes,3,opt,name=script_config,json=scriptConfig,proto3" json:"script_config,omitempty"`
	AssetGroups  []*CardanoSignTransactionRequest_AssetGroup `protobuf:"bytes,4,rep,name=asset_groups,json=assetGroups,proto3" json:"asset_groups,omitempty"`
}

func (x *CardanoSignTransactionRequest_Output) Reset() {
	*x = CardanoSignTransactionRequest_Output{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionRequest_Output) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionRequest_Output) ProtoMessage() {}

func (x *CardanoSignTransactionRequest_Output) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionRequest_Output.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionRequest_Output) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{4, 2}
}

func (x *CardanoSignTransactionRequest_Output) GetEncodedAddress() string {
	if x != nil {
		return x.EncodedAddress
	}
	return ""
}

func (x *CardanoSignTransactionRequest_Output) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

func (x *CardanoSignTransactionRequest_Output) GetScriptConfig() *CardanoScriptConfig {
	if x != nil {
		return x.ScriptConfig
	}
	return nil
}

func (x *CardanoSignTransactionRequest_Output) GetAssetGroups() []*CardanoSignTransactionRequest_AssetGroup {
	if x != nil {
		return x.AssetGroups
	}
	return nil
}

// See https://github.com/IntersectMBO/cardano-ledger/blob/cardano-ledger-conway-1.12.0.0/eras/conway/impl/cddl-files/conway.cddl#L273
type CardanoSignTransactionRequest_Certificate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Types that are assignable to Cert:
	//
	//	*CardanoSignTransactionRequest_Certificate_StakeRegistration
	//	*CardanoSignTransactionRequest_Certificate_StakeDeregistration
	//	*CardanoSignTransactionRequest_Certificate_StakeDelegation_
	//	*CardanoSignTransactionRequest_Certificate_VoteDelegation_
	Cert isCardanoSignTransactionRequest_Certificate_Cert `protobuf_oneof:"cert"`
}

func (x *CardanoSignTransactionRequest_Certificate) Reset() {
	*x = CardanoSignTransactionRequest_Certificate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionRequest_Certificate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionRequest_Certificate) ProtoMessage() {}

func (x *CardanoSignTransactionRequest_Certificate) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionRequest_Certificate.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionRequest_Certificate) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{4, 3}
}

func (m *CardanoSignTransactionRequest_Certificate) GetCert() isCardanoSignTransactionRequest_Certificate_Cert {
	if m != nil {
		return m.Cert
	}
	return nil
}

func (x *CardanoSignTransactionRequest_Certificate) GetStakeRegistration() *Keypath {
	if x, ok := x.GetCert().(*CardanoSignTransactionRequest_Certificate_StakeRegistration); ok {
		return x.StakeRegistration
	}
	return nil
}

func (x *CardanoSignTransactionRequest_Certificate) GetStakeDeregistration() *Keypath {
	if x, ok := x.GetCert().(*CardanoSignTransactionRequest_Certificate_StakeDeregistration); ok {
		return x.StakeDeregistration
	}
	return nil
}

func (x *CardanoSignTransactionRequest_Certificate) GetStakeDelegation() *CardanoSignTransactionRequest_Certificate_StakeDelegation {
	if x, ok := x.GetCert().(*CardanoSignTransactionRequest_Certificate_StakeDelegation_); ok {
		return x.StakeDelegation
	}
	return nil
}

func (x *CardanoSignTransactionRequest_Certificate) GetVoteDelegation() *CardanoSignTransactionRequest_Certificate_VoteDelegation {
	if x, ok := x.GetCert().(*CardanoSignTransactionRequest_Certificate_VoteDelegation_); ok {
		return x.VoteDelegation
	}
	return nil
}

type isCardanoSignTransactionRequest_Certificate_Cert interface {
	isCardanoSignTransactionRequest_Certificate_Cert()
}

type CardanoSignTransactionRequest_Certificate_StakeRegistration struct {
	StakeRegistration *Keypath `protobuf:"bytes,1,opt,name=stake_registration,json=stakeRegistration,proto3,oneof"`
}

type CardanoSignTransactionRequest_Certificate_StakeDeregistration struct {
	StakeDeregistration *Keypath `protobuf:"bytes,2,opt,name=stake_deregistration,json=stakeDeregistration,proto3,oneof"`
}

type CardanoSignTransactionRequest_Certificate_StakeDelegation_ struct {
	StakeDelegation *CardanoSignTransactionRequest_Certificate_StakeDelegation `protobuf:"bytes,3,opt,name=stake_delegation,json=stakeDelegation,proto3,oneof"`
}

type CardanoSignTransactionRequest_Certificate_VoteDelegation_ struct {
	VoteDelegation *CardanoSignTransactionRequest_Certificate_VoteDelegation `protobuf:"bytes,10,opt,name=vote_delegation,json=voteDelegation,proto3,oneof"`
}

func (*CardanoSignTransactionRequest_Certificate_StakeRegistration) isCardanoSignTransactionRequest_Certificate_Cert() {
}

func (*CardanoSignTransactionRequest_Certificate_StakeDeregistration) isCardanoSignTransactionRequest_Certificate_Cert() {
}

func (*CardanoSignTransactionRequest_Certificate_StakeDelegation_) isCardanoSignTransactionRequest_Certificate_Cert() {
}

func (*CardanoSignTransactionRequest_Certificate_VoteDelegation_) isCardanoSignTransactionRequest_Certificate_Cert() {
}

type CardanoSignTransactionRequest_Withdrawal struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keypath []uint32 `protobuf:"varint,1,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	Value   uint64   `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CardanoSignTransactionRequest_Withdrawal) Reset() {
	*x = CardanoSignTransactionRequest_Withdrawal{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionRequest_Withdrawal) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionRequest_Withdrawal) ProtoMessage() {}

func (x *CardanoSignTransactionRequest_Withdrawal) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionRequest_Withdrawal.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionRequest_Withdrawal) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{4, 4}
}

func (x *CardanoSignTransactionRequest_Withdrawal) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *CardanoSignTransactionRequest_Withdrawal) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CardanoSignTransactionRequest_AssetGroup_Token struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AssetName []byte `protobuf:"bytes,1,opt,name=asset_name,json=assetName,proto3" json:"asset_name,omitempty"`
	// Number of tokens transacted of this asset.
	Value uint64 `protobuf:"varint,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *CardanoSignTransactionRequest_AssetGroup_Token) Reset() {
	*x = CardanoSignTransactionRequest_AssetGroup_Token{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionRequest_AssetGroup_Token) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionRequest_AssetGroup_Token) ProtoMessage() {}

func (x *CardanoSignTransactionRequest_AssetGroup_Token) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionRequest_AssetGroup_Token.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionRequest_AssetGroup_Token) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{4, 1, 0}
}

func (x *CardanoSignTransactionRequest_AssetGroup_Token) GetAssetName() []byte {
	if x != nil {
		return x.AssetName
	}
	return nil
}

func (x *CardanoSignTransactionRequest_AssetGroup_Token) GetValue() uint64 {
	if x != nil {
		return x.Value
	}
	return 0
}

type CardanoSignTransactionRequest_Certificate_StakeDelegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Keypath     []uint32 `protobuf:"varint,1,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	PoolKeyhash []byte   `protobuf:"bytes,2,opt,name=pool_keyhash,json=poolKeyhash,proto3" json:"pool_keyhash,omitempty"`
}

func (x *CardanoSignTransactionRequest_Certificate_StakeDelegation) Reset() {
	*x = CardanoSignTransactionRequest_Certificate_StakeDelegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionRequest_Certificate_StakeDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionRequest_Certificate_StakeDelegation) ProtoMessage() {}

func (x *CardanoSignTransactionRequest_Certificate_StakeDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionRequest_Certificate_StakeDelegation.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionRequest_Certificate_StakeDelegation) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{4, 3, 0}
}

func (x *CardanoSignTransactionRequest_Certificate_StakeDelegation) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *CardanoSignTransactionRequest_Certificate_StakeDelegation) GetPoolKeyhash() []byte {
	if x != nil {
		return x.PoolKeyhash
	}
	return nil
}

type CardanoSignTransactionRequest_Certificate_VoteDelegation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// keypath in this instance refers to stake credential
	Keypath      []uint32                                                                 `protobuf:"varint,1,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	Type         CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType `protobuf:"varint,2,opt,name=type,proto3,enum=shiftcrypto.bitbox02.CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType" json:"type,omitempty"`
	DrepCredhash []byte                                                                   `protobuf:"bytes,3,opt,name=drep_credhash,json=drepCredhash,proto3,oneof" json:"drep_credhash,omitempty"`
}

func (x *CardanoSignTransactionRequest_Certificate_VoteDelegation) Reset() {
	*x = CardanoSignTransactionRequest_Certificate_VoteDelegation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionRequest_Certificate_VoteDelegation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionRequest_Certificate_VoteDelegation) ProtoMessage() {}

func (x *CardanoSignTransactionRequest_Certificate_VoteDelegation) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionRequest_Certificate_VoteDelegation.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionRequest_Certificate_VoteDelegation) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{4, 3, 1}
}

func (x *CardanoSignTransactionRequest_Certificate_VoteDelegation) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *CardanoSignTransactionRequest_Certificate_VoteDelegation) GetType() CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType {
	if x != nil {
		return x.Type
	}
	return CardanoSignTransactionRequest_Certificate_VoteDelegation_KEY_HASH
}

func (x *CardanoSignTransactionRequest_Certificate_VoteDelegation) GetDrepCredhash() []byte {
	if x != nil {
		return x.DrepCredhash
	}
	return nil
}

type CardanoSignTransactionResponse_ShelleyWitness struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	PublicKey []byte `protobuf:"bytes,1,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	Signature []byte `protobuf:"bytes,2,opt,name=signature,proto3" json:"signature,omitempty"`
}

func (x *CardanoSignTransactionResponse_ShelleyWitness) Reset() {
	*x = CardanoSignTransactionResponse_ShelleyWitness{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cardano_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CardanoSignTransactionResponse_ShelleyWitness) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CardanoSignTransactionResponse_ShelleyWitness) ProtoMessage() {}

func (x *CardanoSignTransactionResponse_ShelleyWitness) ProtoReflect() protoreflect.Message {
	mi := &file_cardano_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CardanoSignTransactionResponse_ShelleyWitness.ProtoReflect.Descriptor instead.
func (*CardanoSignTransactionResponse_ShelleyWitness) Descriptor() ([]byte, []int) {
	return file_cardano_proto_rawDescGZIP(), []int{5, 0}
}

func (x *CardanoSignTransactionResponse_ShelleyWitness) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *CardanoSignTransactionResponse_ShelleyWitness) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_cardano_proto protoreflect.FileDescriptor

var file_cardano_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x63, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x14, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74,
	0x62, 0x6f, 0x78, 0x30, 0x32, 0x1a, 0x0c, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x22, 0x50, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x58, 0x70,
	0x75, 0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x6b, 0x65,
	0x79, 0x70, 0x61, 0x74, 0x68, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f,
	0x78, 0x30, 0x32, 0x2e, 0x4b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x52, 0x08, 0x6b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x73, 0x22, 0x2c, 0x0a, 0x14, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x58, 0x70, 0x75, 0x62, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x78, 0x70, 0x75, 0x62, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0c, 0x52, 0x05, 0x78, 0x70,
	0x75, 0x62, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x13, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x4b, 0x0a, 0x07, 0x70,
	0x6b, 0x68, 0x5f, 0x73, 0x6b, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x30, 0x2e, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f,
	0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x50, 0x6b, 0x68, 0x53, 0x6b, 0x68, 0x48, 0x00,
	0x52, 0x06, 0x70, 0x6b, 0x68, 0x53, 0x6b, 0x68, 0x1a, 0x56, 0x0a, 0x06, 0x50, 0x6b, 0x68, 0x53,
	0x6b, 0x68, 0x12, 0x27, 0x0a, 0x0f, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x70, 0x61,
	0x79, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x0e, 0x6b, 0x65, 0x79,
	0x70, 0x61, 0x74, 0x68, 0x50, 0x61, 0x79, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x23, 0x0a, 0x0d, 0x6b,
	0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x5f, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0d, 0x52, 0x0c, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x53, 0x74, 0x61, 0x6b, 0x65,
	0x42, 0x08, 0x0a, 0x06, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xc1, 0x01, 0x0a, 0x15, 0x43,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74,
	0x77, 0x6f, 0x72, 0x6b, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x12, 0x4e,
	0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x22, 0xa7,
	0x10, 0x0a, 0x1d, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x3e, 0x0a, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x24, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x52, 0x07, 0x6e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b,
	0x12, 0x51, 0x0a, 0x06, 0x69, 0x6e, 0x70, 0x75, 0x74, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x39, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62,
	0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x52, 0x06, 0x69, 0x6e, 0x70,
	0x75, 0x74, 0x73, 0x12, 0x54, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x66, 0x65, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x66, 0x65, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x74,
	0x74, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x03, 0x74, 0x74, 0x6c, 0x12, 0x63, 0x0a,
	0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x73, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3f, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x52, 0x0c, 0x63, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x73, 0x12, 0x60, 0x0a, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c,
	0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43,
	0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x57, 0x69, 0x74,
	0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x52, 0x0b, 0x77, 0x69, 0x74, 0x68, 0x64, 0x72, 0x61,
	0x77, 0x61, 0x6c, 0x73, 0x12, 0x36, 0x0a, 0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79,
	0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x69, 0x74, 0x79, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x24, 0x0a, 0x0e,
	0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5f, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x61, 0x6c, 0x6c, 0x6f, 0x77, 0x5a, 0x65, 0x72, 0x6f, 0x54,
	0x74, 0x6c, 0x12, 0x22, 0x0a, 0x0d, 0x74, 0x61, 0x67, 0x5f, 0x63, 0x62, 0x6f, 0x72, 0x5f, 0x73,
	0x65, 0x74, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x74, 0x61, 0x67, 0x43, 0x62,
	0x6f, 0x72, 0x53, 0x65, 0x74, 0x73, 0x1a, 0x6b, 0x0a, 0x05, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x12,
	0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d,
	0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61, 0x74, 0x68, 0x12, 0x22, 0x0a, 0x0d, 0x70, 0x72, 0x65,
	0x76, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x68, 0x61, 0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c,
	0x52, 0x0b, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x48, 0x61, 0x73, 0x68, 0x12, 0x24, 0x0a,
	0x0e, 0x70, 0x72, 0x65, 0x76, 0x5f, 0x6f, 0x75, 0x74, 0x5f, 0x69, 0x6e, 0x64, 0x65, 0x78, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x70, 0x72, 0x65, 0x76, 0x4f, 0x75, 0x74, 0x49, 0x6e,
	0x64, 0x65, 0x78, 0x1a, 0xc5, 0x01, 0x0a, 0x0a, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x08, 0x70, 0x6f, 0x6c, 0x69, 0x63, 0x79, 0x49, 0x64, 0x12,
	0x5c, 0x0a, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x44, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69,
	0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x69,
	0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x06, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x1a, 0x3c, 0x0a,
	0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x61, 0x73, 0x73, 0x65,
	0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x1a, 0xfa, 0x01, 0x0a, 0x06,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x12, 0x27, 0x0a, 0x0f, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65,
	0x64, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x65, 0x6e, 0x63, 0x6f, 0x64, 0x65, 0x64, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4e, 0x0a, 0x0d, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x73,
	0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f,
	0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0c, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x61, 0x0a, 0x0c, 0x61, 0x73, 0x73, 0x65, 0x74, 0x5f, 0x67,
	0x72, 0x6f, 0x75, 0x70, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x3e, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72,
	0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x2e, 0x41, 0x73, 0x73, 0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x0b, 0x61, 0x73, 0x73,
	0x65, 0x74, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x1a, 0xbf, 0x06, 0x0a, 0x0b, 0x43, 0x65, 0x72,
	0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x12, 0x4e, 0x0a, 0x12, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x4b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x11, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x52, 0x0a, 0x14, 0x73, 0x74, 0x61, 0x6b,
	0x65, 0x5f, 0x64, 0x65, 0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x4b, 0x65,
	0x79, 0x70, 0x61, 0x74, 0x68, 0x48, 0x00, 0x52, 0x13, 0x73, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65,
	0x72, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x7c, 0x0a, 0x10,
	0x73, 0x74, 0x61, 0x6b, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x4f, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74,
	0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65, 0x6c,
	0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x6b, 0x65,
	0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x79, 0x0a, 0x0f, 0x76, 0x6f,
	0x74, 0x65, 0x5f, 0x64, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x4e, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0e, 0x76, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x4e, 0x0a, 0x0f, 0x53, 0x74, 0x61, 0x6b, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x6f, 0x6f, 0x6c, 0x5f, 0x6b, 0x65, 0x79, 0x68, 0x61,
	0x73, 0x68, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x0b, 0x70, 0x6f, 0x6f, 0x6c, 0x4b, 0x65,
	0x79, 0x68, 0x61, 0x73, 0x68, 0x1a, 0xba, 0x02, 0x0a, 0x0e, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65,
	0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x72, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x5e, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62,
	0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53,
	0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74,
	0x65, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x44, 0x65, 0x6c, 0x65, 0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x44, 0x52, 0x65, 0x70, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x28, 0x0a, 0x0d, 0x64, 0x72, 0x65, 0x70, 0x5f, 0x63,
	0x72, 0x65, 0x64, 0x68, 0x61, 0x73, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0c, 0x48, 0x00, 0x52,
	0x0c, 0x64, 0x72, 0x65, 0x70, 0x43, 0x72, 0x65, 0x64, 0x68, 0x61, 0x73, 0x68, 0x88, 0x01, 0x01,
	0x22, 0x5e, 0x0a, 0x0f, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x44, 0x52, 0x65, 0x70, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x0c, 0x0a, 0x08, 0x4b, 0x45, 0x59, 0x5f, 0x48, 0x41, 0x53, 0x48, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x53, 0x43, 0x52, 0x49, 0x50, 0x54, 0x5f, 0x48, 0x41, 0x53, 0x48,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53, 0x5f, 0x41, 0x42, 0x53,
	0x54, 0x41, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x4c, 0x57, 0x41, 0x59, 0x53,
	0x5f, 0x4e, 0x4f, 0x5f, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x44, 0x45, 0x4e, 0x43, 0x45, 0x10, 0x03,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x72, 0x65, 0x70, 0x5f, 0x63, 0x72, 0x65, 0x64, 0x68, 0x61,
	0x73, 0x68, 0x42, 0x06, 0x0a, 0x04, 0x63, 0x65, 0x72, 0x74, 0x1a, 0x3c, 0x0a, 0x0a, 0x57, 0x69,
	0x74, 0x68, 0x64, 0x72, 0x61, 0x77, 0x61, 0x6c, 0x12, 0x18, 0x0a, 0x07, 0x6b, 0x65, 0x79, 0x70,
	0x61, 0x74, 0x68, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0d, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x70, 0x61,
	0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xe1, 0x01, 0x0a, 0x1e, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x11, 0x73,
	0x68, 0x65, 0x6c, 0x6c, 0x65, 0x79, 0x5f, 0x77, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x43, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61,
	0x72, 0x64, 0x61, 0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x68, 0x65,
	0x6c, 0x6c, 0x65, 0x79, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x52, 0x10, 0x73, 0x68, 0x65,
	0x6c, 0x6c, 0x65, 0x79, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x65, 0x73, 0x1a, 0x4d, 0x0a,
	0x0e, 0x53, 0x68, 0x65, 0x6c, 0x6c, 0x65, 0x79, 0x57, 0x69, 0x74, 0x6e, 0x65, 0x73, 0x73, 0x12,
	0x1d, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x22, 0x89, 0x02, 0x0a,
	0x0e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x41, 0x0a, 0x05, 0x78, 0x70, 0x75, 0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29,
	0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74,
	0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x58, 0x70, 0x75,
	0x62, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x05, 0x78, 0x70, 0x75,
	0x62, 0x73, 0x12, 0x47, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74,
	0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61,
	0x6e, 0x6f, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x48, 0x00, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x60, 0x0a, 0x10, 0x73,
	0x69, 0x67, 0x6e, 0x5f, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x33, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x69,
	0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x09, 0x0a,
	0x07, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0xfb, 0x01, 0x0a, 0x0f, 0x43, 0x61, 0x72,
	0x64, 0x61, 0x6e, 0x6f, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x05,
	0x78, 0x70, 0x75, 0x62, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x73, 0x68,
	0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62, 0x6f, 0x78,
	0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x58, 0x70, 0x75, 0x62, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x05, 0x78, 0x70, 0x75, 0x62, 0x73,
	0x12, 0x35, 0x0a, 0x03, 0x70, 0x75, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e, 0x62, 0x69, 0x74, 0x62,
	0x6f, 0x78, 0x30, 0x32, 0x2e, 0x50, 0x75, 0x62, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x48, 0x00, 0x52, 0x03, 0x70, 0x75, 0x62, 0x12, 0x61, 0x0a, 0x10, 0x73, 0x69, 0x67, 0x6e, 0x5f,
	0x74, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x34, 0x2e, 0x73, 0x68, 0x69, 0x66, 0x74, 0x63, 0x72, 0x79, 0x70, 0x74, 0x6f, 0x2e,
	0x62, 0x69, 0x74, 0x62, 0x6f, 0x78, 0x30, 0x32, 0x2e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f,
	0x53, 0x69, 0x67, 0x6e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x48, 0x00, 0x52, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x54,
	0x72, 0x61, 0x6e, 0x73, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x0a, 0x0a, 0x08, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2a, 0x38, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64, 0x61, 0x6e,
	0x6f, 0x4e, 0x65, 0x74, 0x77, 0x6f, 0x72, 0x6b, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x61, 0x72, 0x64,
	0x61, 0x6e, 0x6f, 0x4d, 0x61, 0x69, 0x6e, 0x6e, 0x65, 0x74, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x61, 0x72, 0x64, 0x61, 0x6e, 0x6f, 0x54, 0x65, 0x73, 0x74, 0x6e, 0x65, 0x74, 0x10, 0x01,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cardano_proto_rawDescOnce sync.Once
	file_cardano_proto_rawDescData = file_cardano_proto_rawDesc
)

func file_cardano_proto_rawDescGZIP() []byte {
	file_cardano_proto_rawDescOnce.Do(func() {
		file_cardano_proto_rawDescData = protoimpl.X.CompressGZIP(file_cardano_proto_rawDescData)
	})
	return file_cardano_proto_rawDescData
}

var file_cardano_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_cardano_proto_msgTypes = make([]protoimpl.MessageInfo, 18)
var file_cardano_proto_goTypes = []any{
	(CardanoNetwork)(0), // 0: shiftcrypto.bitbox02.CardanoNetwork
	(CardanoSignTransactionRequest_Certificate_VoteDelegation_CardanoDRepType)(0), // 1: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.VoteDelegation.CardanoDRepType
	(*CardanoXpubsRequest)(nil),                                       // 2: shiftcrypto.bitbox02.CardanoXpubsRequest
	(*CardanoXpubsResponse)(nil),                                      // 3: shiftcrypto.bitbox02.CardanoXpubsResponse
	(*CardanoScriptConfig)(nil),                                       // 4: shiftcrypto.bitbox02.CardanoScriptConfig
	(*CardanoAddressRequest)(nil),                                     // 5: shiftcrypto.bitbox02.CardanoAddressRequest
	(*CardanoSignTransactionRequest)(nil),                             // 6: shiftcrypto.bitbox02.CardanoSignTransactionRequest
	(*CardanoSignTransactionResponse)(nil),                            // 7: shiftcrypto.bitbox02.CardanoSignTransactionResponse
	(*CardanoRequest)(nil),                                            // 8: shiftcrypto.bitbox02.CardanoRequest
	(*CardanoResponse)(nil),                                           // 9: shiftcrypto.bitbox02.CardanoResponse
	(*CardanoScriptConfig_PkhSkh)(nil),                                // 10: shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh
	(*CardanoSignTransactionRequest_Input)(nil),                       // 11: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input
	(*CardanoSignTransactionRequest_AssetGroup)(nil),                  // 12: shiftcrypto.bitbox02.CardanoSignTransactionRequest.AssetGroup
	(*CardanoSignTransactionRequest_Output)(nil),                      // 13: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output
	(*CardanoSignTransactionRequest_Certificate)(nil),                 // 14: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate
	(*CardanoSignTransactionRequest_Withdrawal)(nil),                  // 15: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal
	(*CardanoSignTransactionRequest_AssetGroup_Token)(nil),            // 16: shiftcrypto.bitbox02.CardanoSignTransactionRequest.AssetGroup.Token
	(*CardanoSignTransactionRequest_Certificate_StakeDelegation)(nil), // 17: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation
	(*CardanoSignTransactionRequest_Certificate_VoteDelegation)(nil),  // 18: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.VoteDelegation
	(*CardanoSignTransactionResponse_ShelleyWitness)(nil),             // 19: shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness
	(*Keypath)(nil),     // 20: shiftcrypto.bitbox02.Keypath
	(*PubResponse)(nil), // 21: shiftcrypto.bitbox02.PubResponse
}
var file_cardano_proto_depIdxs = []int32{
	20, // 0: shiftcrypto.bitbox02.CardanoXpubsRequest.keypaths:type_name -> shiftcrypto.bitbox02.Keypath
	10, // 1: shiftcrypto.bitbox02.CardanoScriptConfig.pkh_skh:type_name -> shiftcrypto.bitbox02.CardanoScriptConfig.PkhSkh
	0,  // 2: shiftcrypto.bitbox02.CardanoAddressRequest.network:type_name -> shiftcrypto.bitbox02.CardanoNetwork
	4,  // 3: shiftcrypto.bitbox02.CardanoAddressRequest.script_config:type_name -> shiftcrypto.bitbox02.CardanoScriptConfig
	0,  // 4: shiftcrypto.bitbox02.CardanoSignTransactionRequest.network:type_name -> shiftcrypto.bitbox02.CardanoNetwork
	11, // 5: shiftcrypto.bitbox02.CardanoSignTransactionRequest.inputs:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionRequest.Input
	13, // 6: shiftcrypto.bitbox02.CardanoSignTransactionRequest.outputs:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output
	14, // 7: shiftcrypto.bitbox02.CardanoSignTransactionRequest.certificates:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate
	15, // 8: shiftcrypto.bitbox02.CardanoSignTransactionRequest.withdrawals:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionRequest.Withdrawal
	19, // 9: shiftcrypto.bitbox02.CardanoSignTransactionResponse.shelley_witnesses:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionResponse.ShelleyWitness
	2,  // 10: shiftcrypto.bitbox02.CardanoRequest.xpubs:type_name -> shiftcrypto.bitbox02.CardanoXpubsRequest
	5,  // 11: shiftcrypto.bitbox02.CardanoRequest.address:type_name -> shiftcrypto.bitbox02.CardanoAddressRequest
	6,  // 12: shiftcrypto.bitbox02.CardanoRequest.sign_transaction:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionRequest
	3,  // 13: shiftcrypto.bitbox02.CardanoResponse.xpubs:type_name -> shiftcrypto.bitbox02.CardanoXpubsResponse
	21, // 14: shiftcrypto.bitbox02.CardanoResponse.pub:type_name -> shiftcrypto.bitbox02.PubResponse
	7,  // 15: shiftcrypto.bitbox02.CardanoResponse.sign_transaction:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionResponse
	16, // 16: shiftcrypto.bitbox02.CardanoSignTransactionRequest.AssetGroup.tokens:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionRequest.AssetGroup.Token
	4,  // 17: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.script_config:type_name -> shiftcrypto.bitbox02.CardanoScriptConfig
	12, // 18: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Output.asset_groups:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionRequest.AssetGroup
	20, // 19: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.stake_registration:type_name -> shiftcrypto.bitbox02.Keypath
	20, // 20: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.stake_deregistration:type_name -> shiftcrypto.bitbox02.Keypath
	17, // 21: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.stake_delegation:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.StakeDelegation
	18, // 22: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.vote_delegation:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.VoteDelegation
	1,  // 23: shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.VoteDelegation.type:type_name -> shiftcrypto.bitbox02.CardanoSignTransactionRequest.Certificate.VoteDelegation.CardanoDRepType
	24, // [24:24] is the sub-list for method output_type
	24, // [24:24] is the sub-list for method input_type
	24, // [24:24] is the sub-list for extension type_name
	24, // [24:24] is the sub-list for extension extendee
	0,  // [0:24] is the sub-list for field type_name
}

func init() { file_cardano_proto_init() }
func file_cardano_proto_init() {
	if File_cardano_proto != nil {
		return
	}
	file_common_proto_init()
	if !protoimpl.UnsafeEnabled {
		file_cardano_proto_msgTypes[0].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoXpubsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[1].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoXpubsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[2].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoScriptConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[3].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoAddressRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[4].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[5].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[6].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[7].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[8].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoScriptConfig_PkhSkh); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[9].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionRequest_Input); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[10].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionRequest_AssetGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[11].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionRequest_Output); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[12].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionRequest_Certificate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[13].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionRequest_Withdrawal); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[14].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionRequest_AssetGroup_Token); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[15].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionRequest_Certificate_StakeDelegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[16].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionRequest_Certificate_VoteDelegation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cardano_proto_msgTypes[17].Exporter = func(v any, i int) any {
			switch v := v.(*CardanoSignTransactionResponse_ShelleyWitness); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_cardano_proto_msgTypes[2].OneofWrappers = []any{
		(*CardanoScriptConfig_PkhSkh_)(nil),
	}
	file_cardano_proto_msgTypes[6].OneofWrappers = []any{
		(*CardanoRequest_Xpubs)(nil),
		(*CardanoRequest_Address)(nil),
		(*CardanoRequest_SignTransaction)(nil),
	}
	file_cardano_proto_msgTypes[7].OneofWrappers = []any{
		(*CardanoResponse_Xpubs)(nil),
		(*CardanoResponse_Pub)(nil),
		(*CardanoResponse_SignTransaction)(nil),
	}
	file_cardano_proto_msgTypes[12].OneofWrappers = []any{
		(*CardanoSignTransactionRequest_Certificate_StakeRegistration)(nil),
		(*CardanoSignTransactionRequest_Certificate_StakeDeregistration)(nil),
		(*CardanoSignTransactionRequest_Certificate_StakeDelegation_)(nil),
		(*CardanoSignTransactionRequest_Certificate_VoteDelegation_)(nil),
	}
	file_cardano_proto_msgTypes[16].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cardano_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   18,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_cardano_proto_goTypes,
		DependencyIndexes: file_cardano_proto_depIdxs,
		EnumInfos:         file_cardano_proto_enumTypes,
		MessageInfos:      file_cardano_proto_msgTypes,
	}.Build()
	File_cardano_proto = out.File
	file_cardano_proto_rawDesc = nil
	file_cardano_proto_goTypes = nil
	file_cardano_proto_depIdxs = nil
}
