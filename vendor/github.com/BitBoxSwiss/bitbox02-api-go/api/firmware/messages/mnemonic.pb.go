// Copyright 2019 Shift Cryptosecurity AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: mnemonic.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ShowMnemonicRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ShowMnemonicRequest) Reset() {
	*x = ShowMnemonicRequest{}
	mi := &file_mnemonic_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ShowMnemonicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ShowMnemonicRequest) ProtoMessage() {}

func (x *ShowMnemonicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mnemonic_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ShowMnemonicRequest.ProtoReflect.Descriptor instead.
func (*ShowMnemonicRequest) Descriptor() ([]byte, []int) {
	return file_mnemonic_proto_rawDescGZIP(), []int{0}
}

type RestoreFromMnemonicRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	Timestamp      uint32                 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	TimezoneOffset int32                  `protobuf:"varint,2,opt,name=timezone_offset,json=timezoneOffset,proto3" json:"timezone_offset,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *RestoreFromMnemonicRequest) Reset() {
	*x = RestoreFromMnemonicRequest{}
	mi := &file_mnemonic_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RestoreFromMnemonicRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RestoreFromMnemonicRequest) ProtoMessage() {}

func (x *RestoreFromMnemonicRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mnemonic_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RestoreFromMnemonicRequest.ProtoReflect.Descriptor instead.
func (*RestoreFromMnemonicRequest) Descriptor() ([]byte, []int) {
	return file_mnemonic_proto_rawDescGZIP(), []int{1}
}

func (x *RestoreFromMnemonicRequest) GetTimestamp() uint32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RestoreFromMnemonicRequest) GetTimezoneOffset() int32 {
	if x != nil {
		return x.TimezoneOffset
	}
	return 0
}

type SetMnemonicPassphraseEnabledRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Enabled       bool                   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SetMnemonicPassphraseEnabledRequest) Reset() {
	*x = SetMnemonicPassphraseEnabledRequest{}
	mi := &file_mnemonic_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SetMnemonicPassphraseEnabledRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetMnemonicPassphraseEnabledRequest) ProtoMessage() {}

func (x *SetMnemonicPassphraseEnabledRequest) ProtoReflect() protoreflect.Message {
	mi := &file_mnemonic_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetMnemonicPassphraseEnabledRequest.ProtoReflect.Descriptor instead.
func (*SetMnemonicPassphraseEnabledRequest) Descriptor() ([]byte, []int) {
	return file_mnemonic_proto_rawDescGZIP(), []int{2}
}

func (x *SetMnemonicPassphraseEnabledRequest) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

var File_mnemonic_proto protoreflect.FileDescriptor

const file_mnemonic_proto_rawDesc = "" +
	"\n" +
	"\x0emnemonic.proto\x12\x14shiftcrypto.bitbox02\"\x15\n" +
	"\x13ShowMnemonicRequest\"c\n" +
	"\x1aRestoreFromMnemonicRequest\x12\x1c\n" +
	"\ttimestamp\x18\x01 \x01(\rR\ttimestamp\x12'\n" +
	"\x0ftimezone_offset\x18\x02 \x01(\x05R\x0etimezoneOffset\"?\n" +
	"#SetMnemonicPassphraseEnabledRequest\x12\x18\n" +
	"\aenabled\x18\x01 \x01(\bR\aenabledb\x06proto3"

var (
	file_mnemonic_proto_rawDescOnce sync.Once
	file_mnemonic_proto_rawDescData []byte
)

func file_mnemonic_proto_rawDescGZIP() []byte {
	file_mnemonic_proto_rawDescOnce.Do(func() {
		file_mnemonic_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_mnemonic_proto_rawDesc), len(file_mnemonic_proto_rawDesc)))
	})
	return file_mnemonic_proto_rawDescData
}

var file_mnemonic_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_mnemonic_proto_goTypes = []any{
	(*ShowMnemonicRequest)(nil),                 // 0: shiftcrypto.bitbox02.ShowMnemonicRequest
	(*RestoreFromMnemonicRequest)(nil),          // 1: shiftcrypto.bitbox02.RestoreFromMnemonicRequest
	(*SetMnemonicPassphraseEnabledRequest)(nil), // 2: shiftcrypto.bitbox02.SetMnemonicPassphraseEnabledRequest
}
var file_mnemonic_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_mnemonic_proto_init() }
func file_mnemonic_proto_init() {
	if File_mnemonic_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_mnemonic_proto_rawDesc), len(file_mnemonic_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_mnemonic_proto_goTypes,
		DependencyIndexes: file_mnemonic_proto_depIdxs,
		MessageInfos:      file_mnemonic_proto_msgTypes,
	}.Build()
	File_mnemonic_proto = out.File
	file_mnemonic_proto_goTypes = nil
	file_mnemonic_proto_depIdxs = nil
}
