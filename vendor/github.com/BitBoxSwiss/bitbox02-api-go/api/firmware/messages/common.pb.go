// Copyright 2019 Shift Cryptosecurity AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: common.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PubResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pub           string                 `protobuf:"bytes,1,opt,name=pub,proto3" json:"pub,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PubResponse) Reset() {
	*x = PubResponse{}
	mi := &file_common_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubResponse) ProtoMessage() {}

func (x *PubResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubResponse.ProtoReflect.Descriptor instead.
func (*PubResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{0}
}

func (x *PubResponse) GetPub() string {
	if x != nil {
		return x.Pub
	}
	return ""
}

type PubsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Pubs          []string               `protobuf:"bytes,1,rep,name=pubs,proto3" json:"pubs,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *PubsResponse) Reset() {
	*x = PubsResponse{}
	mi := &file_common_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *PubsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PubsResponse) ProtoMessage() {}

func (x *PubsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PubsResponse.ProtoReflect.Descriptor instead.
func (*PubsResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{1}
}

func (x *PubsResponse) GetPubs() []string {
	if x != nil {
		return x.Pubs
	}
	return nil
}

type RootFingerprintRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RootFingerprintRequest) Reset() {
	*x = RootFingerprintRequest{}
	mi := &file_common_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RootFingerprintRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootFingerprintRequest) ProtoMessage() {}

func (x *RootFingerprintRequest) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootFingerprintRequest.ProtoReflect.Descriptor instead.
func (*RootFingerprintRequest) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{2}
}

type RootFingerprintResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Fingerprint   []byte                 `protobuf:"bytes,1,opt,name=fingerprint,proto3" json:"fingerprint,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *RootFingerprintResponse) Reset() {
	*x = RootFingerprintResponse{}
	mi := &file_common_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *RootFingerprintResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RootFingerprintResponse) ProtoMessage() {}

func (x *RootFingerprintResponse) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RootFingerprintResponse.ProtoReflect.Descriptor instead.
func (*RootFingerprintResponse) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{3}
}

func (x *RootFingerprintResponse) GetFingerprint() []byte {
	if x != nil {
		return x.Fingerprint
	}
	return nil
}

// See https://github.com/bitcoin/bips/blob/master/bip-0032.mediawiki.
// version field dropped as it will set dynamically based on the context (xpub, ypub, etc.).
type XPub struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Depth             []byte                 `protobuf:"bytes,1,opt,name=depth,proto3" json:"depth,omitempty"`
	ParentFingerprint []byte                 `protobuf:"bytes,2,opt,name=parent_fingerprint,json=parentFingerprint,proto3" json:"parent_fingerprint,omitempty"`
	ChildNum          uint32                 `protobuf:"varint,3,opt,name=child_num,json=childNum,proto3" json:"child_num,omitempty"`
	ChainCode         []byte                 `protobuf:"bytes,4,opt,name=chain_code,json=chainCode,proto3" json:"chain_code,omitempty"`
	PublicKey         []byte                 `protobuf:"bytes,5,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *XPub) Reset() {
	*x = XPub{}
	mi := &file_common_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *XPub) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*XPub) ProtoMessage() {}

func (x *XPub) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use XPub.ProtoReflect.Descriptor instead.
func (*XPub) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{4}
}

func (x *XPub) GetDepth() []byte {
	if x != nil {
		return x.Depth
	}
	return nil
}

func (x *XPub) GetParentFingerprint() []byte {
	if x != nil {
		return x.ParentFingerprint
	}
	return nil
}

func (x *XPub) GetChildNum() uint32 {
	if x != nil {
		return x.ChildNum
	}
	return 0
}

func (x *XPub) GetChainCode() []byte {
	if x != nil {
		return x.ChainCode
	}
	return nil
}

func (x *XPub) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

// This message exists for use in oneof or repeated fields, where one can't inline `repeated uint32` due to protobuf rules.
type Keypath struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Keypath       []uint32               `protobuf:"varint,1,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Keypath) Reset() {
	*x = Keypath{}
	mi := &file_common_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Keypath) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Keypath) ProtoMessage() {}

func (x *Keypath) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Keypath.ProtoReflect.Descriptor instead.
func (*Keypath) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{5}
}

func (x *Keypath) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

type KeyOriginInfo struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	RootFingerprint []byte                 `protobuf:"bytes,1,opt,name=root_fingerprint,json=rootFingerprint,proto3" json:"root_fingerprint,omitempty"`
	Keypath         []uint32               `protobuf:"varint,2,rep,packed,name=keypath,proto3" json:"keypath,omitempty"`
	Xpub            *XPub                  `protobuf:"bytes,3,opt,name=xpub,proto3" json:"xpub,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *KeyOriginInfo) Reset() {
	*x = KeyOriginInfo{}
	mi := &file_common_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *KeyOriginInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyOriginInfo) ProtoMessage() {}

func (x *KeyOriginInfo) ProtoReflect() protoreflect.Message {
	mi := &file_common_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyOriginInfo.ProtoReflect.Descriptor instead.
func (*KeyOriginInfo) Descriptor() ([]byte, []int) {
	return file_common_proto_rawDescGZIP(), []int{6}
}

func (x *KeyOriginInfo) GetRootFingerprint() []byte {
	if x != nil {
		return x.RootFingerprint
	}
	return nil
}

func (x *KeyOriginInfo) GetKeypath() []uint32 {
	if x != nil {
		return x.Keypath
	}
	return nil
}

func (x *KeyOriginInfo) GetXpub() *XPub {
	if x != nil {
		return x.Xpub
	}
	return nil
}

var File_common_proto protoreflect.FileDescriptor

const file_common_proto_rawDesc = "" +
	"\n" +
	"\fcommon.proto\x12\x14shiftcrypto.bitbox02\"\x1f\n" +
	"\vPubResponse\x12\x10\n" +
	"\x03pub\x18\x01 \x01(\tR\x03pub\"\"\n" +
	"\fPubsResponse\x12\x12\n" +
	"\x04pubs\x18\x01 \x03(\tR\x04pubs\"\x18\n" +
	"\x16RootFingerprintRequest\";\n" +
	"\x17RootFingerprintResponse\x12 \n" +
	"\vfingerprint\x18\x01 \x01(\fR\vfingerprint\"\xa6\x01\n" +
	"\x04XPub\x12\x14\n" +
	"\x05depth\x18\x01 \x01(\fR\x05depth\x12-\n" +
	"\x12parent_fingerprint\x18\x02 \x01(\fR\x11parentFingerprint\x12\x1b\n" +
	"\tchild_num\x18\x03 \x01(\rR\bchildNum\x12\x1d\n" +
	"\n" +
	"chain_code\x18\x04 \x01(\fR\tchainCode\x12\x1d\n" +
	"\n" +
	"public_key\x18\x05 \x01(\fR\tpublicKey\"#\n" +
	"\aKeypath\x12\x18\n" +
	"\akeypath\x18\x01 \x03(\rR\akeypath\"\x84\x01\n" +
	"\rKeyOriginInfo\x12)\n" +
	"\x10root_fingerprint\x18\x01 \x01(\fR\x0frootFingerprint\x12\x18\n" +
	"\akeypath\x18\x02 \x03(\rR\akeypath\x12.\n" +
	"\x04xpub\x18\x03 \x01(\v2\x1a.shiftcrypto.bitbox02.XPubR\x04xpubb\x06proto3"

var (
	file_common_proto_rawDescOnce sync.Once
	file_common_proto_rawDescData []byte
)

func file_common_proto_rawDescGZIP() []byte {
	file_common_proto_rawDescOnce.Do(func() {
		file_common_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_common_proto_rawDesc), len(file_common_proto_rawDesc)))
	})
	return file_common_proto_rawDescData
}

var file_common_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_common_proto_goTypes = []any{
	(*PubResponse)(nil),             // 0: shiftcrypto.bitbox02.PubResponse
	(*PubsResponse)(nil),            // 1: shiftcrypto.bitbox02.PubsResponse
	(*RootFingerprintRequest)(nil),  // 2: shiftcrypto.bitbox02.RootFingerprintRequest
	(*RootFingerprintResponse)(nil), // 3: shiftcrypto.bitbox02.RootFingerprintResponse
	(*XPub)(nil),                    // 4: shiftcrypto.bitbox02.XPub
	(*Keypath)(nil),                 // 5: shiftcrypto.bitbox02.Keypath
	(*KeyOriginInfo)(nil),           // 6: shiftcrypto.bitbox02.KeyOriginInfo
}
var file_common_proto_depIdxs = []int32{
	4, // 0: shiftcrypto.bitbox02.KeyOriginInfo.xpub:type_name -> shiftcrypto.bitbox02.XPub
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_common_proto_init() }
func file_common_proto_init() {
	if File_common_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_common_proto_rawDesc), len(file_common_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_common_proto_goTypes,
		DependencyIndexes: file_common_proto_depIdxs,
		MessageInfos:      file_common_proto_msgTypes,
	}.Build()
	File_common_proto = out.File
	file_common_proto_goTypes = nil
	file_common_proto_depIdxs = nil
}
