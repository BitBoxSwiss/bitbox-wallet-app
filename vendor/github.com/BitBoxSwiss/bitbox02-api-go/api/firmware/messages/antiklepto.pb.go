// Copyright 2020 Shift Crypto AG
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.9
// 	protoc        v3.21.12
// source: antiklepto.proto

package messages

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
	unsafe "unsafe"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AntiKleptoHostNonceCommitment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commitment    []byte                 `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntiKleptoHostNonceCommitment) Reset() {
	*x = AntiKleptoHostNonceCommitment{}
	mi := &file_antiklepto_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntiKleptoHostNonceCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiKleptoHostNonceCommitment) ProtoMessage() {}

func (x *AntiKleptoHostNonceCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_antiklepto_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiKleptoHostNonceCommitment.ProtoReflect.Descriptor instead.
func (*AntiKleptoHostNonceCommitment) Descriptor() ([]byte, []int) {
	return file_antiklepto_proto_rawDescGZIP(), []int{0}
}

func (x *AntiKleptoHostNonceCommitment) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

type AntiKleptoSignerCommitment struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Commitment    []byte                 `protobuf:"bytes,1,opt,name=commitment,proto3" json:"commitment,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntiKleptoSignerCommitment) Reset() {
	*x = AntiKleptoSignerCommitment{}
	mi := &file_antiklepto_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntiKleptoSignerCommitment) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiKleptoSignerCommitment) ProtoMessage() {}

func (x *AntiKleptoSignerCommitment) ProtoReflect() protoreflect.Message {
	mi := &file_antiklepto_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiKleptoSignerCommitment.ProtoReflect.Descriptor instead.
func (*AntiKleptoSignerCommitment) Descriptor() ([]byte, []int) {
	return file_antiklepto_proto_rawDescGZIP(), []int{1}
}

func (x *AntiKleptoSignerCommitment) GetCommitment() []byte {
	if x != nil {
		return x.Commitment
	}
	return nil
}

type AntiKleptoSignatureRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	HostNonce     []byte                 `protobuf:"bytes,1,opt,name=host_nonce,json=hostNonce,proto3" json:"host_nonce,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AntiKleptoSignatureRequest) Reset() {
	*x = AntiKleptoSignatureRequest{}
	mi := &file_antiklepto_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AntiKleptoSignatureRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AntiKleptoSignatureRequest) ProtoMessage() {}

func (x *AntiKleptoSignatureRequest) ProtoReflect() protoreflect.Message {
	mi := &file_antiklepto_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AntiKleptoSignatureRequest.ProtoReflect.Descriptor instead.
func (*AntiKleptoSignatureRequest) Descriptor() ([]byte, []int) {
	return file_antiklepto_proto_rawDescGZIP(), []int{2}
}

func (x *AntiKleptoSignatureRequest) GetHostNonce() []byte {
	if x != nil {
		return x.HostNonce
	}
	return nil
}

var File_antiklepto_proto protoreflect.FileDescriptor

const file_antiklepto_proto_rawDesc = "" +
	"\n" +
	"\x10antiklepto.proto\x12\x14shiftcrypto.bitbox02\"?\n" +
	"\x1dAntiKleptoHostNonceCommitment\x12\x1e\n" +
	"\n" +
	"commitment\x18\x01 \x01(\fR\n" +
	"commitment\"<\n" +
	"\x1aAntiKleptoSignerCommitment\x12\x1e\n" +
	"\n" +
	"commitment\x18\x01 \x01(\fR\n" +
	"commitment\";\n" +
	"\x1aAntiKleptoSignatureRequest\x12\x1d\n" +
	"\n" +
	"host_nonce\x18\x01 \x01(\fR\thostNonceb\x06proto3"

var (
	file_antiklepto_proto_rawDescOnce sync.Once
	file_antiklepto_proto_rawDescData []byte
)

func file_antiklepto_proto_rawDescGZIP() []byte {
	file_antiklepto_proto_rawDescOnce.Do(func() {
		file_antiklepto_proto_rawDescData = protoimpl.X.CompressGZIP(unsafe.Slice(unsafe.StringData(file_antiklepto_proto_rawDesc), len(file_antiklepto_proto_rawDesc)))
	})
	return file_antiklepto_proto_rawDescData
}

var file_antiklepto_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_antiklepto_proto_goTypes = []any{
	(*AntiKleptoHostNonceCommitment)(nil), // 0: shiftcrypto.bitbox02.AntiKleptoHostNonceCommitment
	(*AntiKleptoSignerCommitment)(nil),    // 1: shiftcrypto.bitbox02.AntiKleptoSignerCommitment
	(*AntiKleptoSignatureRequest)(nil),    // 2: shiftcrypto.bitbox02.AntiKleptoSignatureRequest
}
var file_antiklepto_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_antiklepto_proto_init() }
func file_antiklepto_proto_init() {
	if File_antiklepto_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: unsafe.Slice(unsafe.StringData(file_antiklepto_proto_rawDesc), len(file_antiklepto_proto_rawDesc)),
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_antiklepto_proto_goTypes,
		DependencyIndexes: file_antiklepto_proto_depIdxs,
		MessageInfos:      file_antiklepto_proto_msgTypes,
	}.Build()
	File_antiklepto_proto = out.File
	file_antiklepto_proto_goTypes = nil
	file_antiklepto_proto_depIdxs = nil
}
